/**
 * \file
 * \brief BitField accessors for analog_rx_mem_map
 *
 * Autogenerated with yoda-gen 1.1.0. Do not modify
 *
 * \copyright Copyright (c) 2020 Analog Devices, Inc. All Rights Reserved.
 * This software is proprietary to Analog Devices, Inc. and its licensors.
 */

 #ifndef __ADRV9001_BF_ANALOG_RX_MEM_MAP_H__
 #define __ADRV9001_BF_ANALOG_RX_MEM_MAP_H__

#include "adrv9001_bf_hal.h"

/***************************************************************************//**
 * @brief The `adrv9001_BfAnalogRxMemMap_e` is an enumeration that defines
 * memory map addresses for the analog settings of the RX1 and RX2
 * channels in the ADRV9001 device. These addresses are used to access
 * and configure specific analog parameters for each RX channel,
 * facilitating the control and management of the device's analog front-
 * end.
 *
 * @param ADRV9001_BF_RX1_ANA Represents the memory map address for RX1 analog
 * settings, with a value of 0x3000.
 * @param ADRV9001_BF_RX2_ANA Represents the memory map address for RX2 analog
 * settings, with a value of 0x3400.
 ******************************************************************************/
typedef enum adrv9001_BfAnalogRxMemMap_e
{
    ADRV9001_BF_RX1_ANA    =   0x3000,
    ADRV9001_BF_RX2_ANA    =   0x3400
} adrv9001_BfAnalogRxMemMap_e;

/***************************************************************************//**
 * @brief The `analogRxMemMapInstances` is a static constant array of type
 * `adrv9001_BfAnalogRxMemMap_e`, which is an enumeration representing
 * different analog receive memory map instances. It contains two
 * elements: `ADRV9001_BF_RX1_ANA` and `ADRV9001_BF_RX2_ANA`, which
 * correspond to specific memory map addresses for RX1 and RX2 analog
 * components.
 *
 * @details This array is used to reference specific analog receive memory map
 * instances for operations involving RX1 and RX2 components.
 ******************************************************************************/
static const adrv9001_BfAnalogRxMemMap_e analogRxMemMapInstances[] = {
    ADRV9001_BF_RX1_ANA,
    ADRV9001_BF_RX2_ANA
};

/***************************************************************************//**
 * @brief Sets the high range value for the auxiliary low frequency output of
 * the analog receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the high range.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_AuxLoHighR_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x7c), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the high byte of the auxiliary low frequency signal from the
 * specified analog receiver memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_AuxLoHighR_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x7c), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bypass mode for the auxiliary low dropout regulator in the
 * analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A 8-bit unsigned integer that specifies the bypass setting for
 * the LDO.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_AuxLoLdoBypass_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x86), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bypass status of the auxiliary low dropout regulator
 * (LDO) for the analog receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific analog receiver
 * instance (e.g., RX1 or RX2).
 * @param value A pointer to a uint8_t variable where the retrieved bypass
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_AuxLoLdoBypass_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x86), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bypass state for the auxiliary low dropout (LDO) filter in
 * the analog receiver memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value A uint8_t value indicating whether to enable or disable the
 * bypass (1 to enable, 0 to disable).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_AuxLoLdoFilterBypass_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x87), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bypass status of the auxiliary low-dropout (LDO) filter
 * in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved filter
 * bypass status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_AuxLoLdoFilterBypass_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x87), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the auxiliary low dropout regulator in
 * the analog receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value A uint8_t value indicating the desired power down state (0 for
 * active, 1 for power down).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_AuxLoLdoPd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x86), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the auxiliary low dropout regulator power down
 * status from the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_AuxLoLdoPd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x86), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the status of the auxiliary low dropout regulator (LDO) for
 * the specified analog receiver instance.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific analog receiver
 * instance (e.g., RX1 or RX2).
 * @param value A pointer to a uint8_t variable where the retrieved status value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_AuxLoLdoStatus_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x86), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output selection for the auxiliary low dropout regulator
 * (LDO) voltage.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A 8-bit unsigned integer representing the desired output
 * selection value for the LDO.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_AuxLoLdoVoutSel_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x86), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the output selection for the auxiliary low dropout regulator
 * voltage.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_AuxLoLdoVoutSel_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x86), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output trim value for the auxiliary low dropout regulator in
 * the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the trim value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_AuxLoLdoVoutTrim_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x87), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the output trim value for the auxiliary low dropout
 * regulator (LDO) in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved trim value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_AuxLoLdoVoutTrim_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x87), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration tone driver attenuation for the specified
 * instance in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific analog RX
 * memory map instance (e.g., RX1 or RX2).
 * @param regInstance An unsigned integer representing the specific register
 * instance to be modified.
 * @param value An 8-bit unsigned integer representing the attenuation value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_CalToneDriverAttn_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x83 + 0x0 + (regInstance * 0x1)), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration tone driver attenuation value from the
 * specified register.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific analog RX
 * memory map instance.
 * @param regInstance An unsigned integer representing the specific register
 * instance to read from.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_CalToneDriverAttn_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x83 + 0x0 + (regInstance * 0x1)), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the calibration tone driver input
 * buffer.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param regInstance An unsigned integer representing the specific register
 * instance to be modified.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * power down state.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_CalToneDriverInbufPd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x83 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the calibration tone driver input
 * buffer.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type indicating which instance of the analog RX
 * memory map is being accessed.
 * @param regInstance An unsigned integer representing the specific register
 * instance to read from.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_CalToneDriverInbufPd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x83 + 0x0 + (regInstance * 0x1)), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the calibration tone driver in the
 * analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param regInstance An unsigned integer representing the specific register
 * instance to be modified.
 * @param value An 8-bit unsigned integer representing the power down state to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_CalToneDriverPd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x83 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the calibration tone driver for the
 * specified analog RX instance.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific analog RX
 * instance (e.g., RX1 or RX2).
 * @param regInstance An unsigned integer representing the specific register
 * instance to read from.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_CalToneDriverPd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x83 + 0x0 + (regInstance * 0x1)), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX attenuation input control for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific analog RX
 * memory map instance (e.g., RX1 or RX2).
 * @param regInstance An unsigned integer representing the specific register
 * instance to be modified.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RX attenuation.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_EnRxattenInputCm_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2a + 0x0 + (regInstance * 0x1)), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `EnRxattenInputCm` register for the
 * specified instance and register instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type indicating which analog RX memory map
 * instance to access.
 * @param regInstance An unsigned integer representing the specific register
 * instance to read from.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_EnRxattenInputCm_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2a + 0x0 + (regInstance * 0x1)), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the auxiliary low source enable bit in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that indicates whether to enable or disable the
 * auxiliary low source.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_EnableAuxLoSource_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x79), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the auxiliary low source enable bit from the
 * analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_EnableAuxLoSource_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x79), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low source for the first local oscillator in the analog
 * receiver memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value A 8-bit unsigned integer that specifies the value to set for the
 * low source.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_EnableLoSourceLb1_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x79), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief The `adrv9001_AnalogRxMemMap_EnableLoSourceLb1_Get` function retrieves
 * the value of the low source enable bit for the first local oscillator.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAnalogRxMemMap_e`
 * that specifies which instance of the analog RX memory map to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return The function returns an integer status code indicating the success or
 * failure of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_EnableLoSourceLb1_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x79), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low source for the second local oscillator in the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A 8-bit unsigned integer representing the value to set for the
 * low source.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_EnableLoSourceLb2_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x79), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the LO source LB2 setting from the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_EnableLoSourceLb2_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x79), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx LO source for the ADRV9001 analog receiver.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value A uint8_t value that indicates the desired state of the Tx LO
 * source (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_EnableTxLoSource_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x79), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the current value of the Tx LO source enable bit from the
 * analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_EnableTxLoSource_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x79), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bypass resistance for the IDIST in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A 8-bit unsigned integer representing the value to set for the
 * bypass resistance.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_IdistBypassBiasRes_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xb), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bypass bias resistance value from the analog RX memory
 * map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_IdistBypassBiasRes_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xb), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LB1 attenuation value in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the attenuation value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1Attn_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x33), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the LB1 attenuation setting from the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * attenuation value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1Attn_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x33), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Lb1AttnB` field in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the `Lb1AttnB` field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1AttnB_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x33), (value >> 0), 0x38, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Lb1AttnB` field from the analog RX memory
 * map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1AttnB_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x33), &register_value, 0x38, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the coarse correction value for the I component of the LO delay
 * in the ADRV9001 analog receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value An 8-bit unsigned integer representing the coarse correction
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1LoDelayCoarseCorrI_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x65), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the coarse correction value for the I channel of the low
 * delay in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value that specifies which instance of the
 * analog RX memory map to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1LoDelayCoarseCorrI_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x65), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the coarse correction value for the I component of the LO delay
 * in the ADRV9001 analog receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value An 8-bit unsigned integer representing the coarse correction
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1LoDelayCoarseCorrIb_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x66), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the coarse correction value for the I component of the LO
 * delay in the ADRV9001 analog receiver.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved coarse
 * correction value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1LoDelayCoarseCorrIb_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x66), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the coarse correction value for the Q channel of the low delay in
 * the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the correction value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1LoDelayCoarseCorrQ_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x65), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the coarse correction value for the Q channel of the low
 * delay in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1LoDelayCoarseCorrQ_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x65), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the coarse correction value for the Qb channel of the low delay
 * in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the coarse correction.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1LoDelayCoarseCorrQb_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x66), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the coarse correction value for the Q channel of the low
 * delay in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value that specifies which instance of the
 * analog RX memory map to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1LoDelayCoarseCorrQb_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x66), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low delay correction power down for the analog receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value A 8-bit unsigned integer representing the value to set for the
 * low delay correction power down.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1LoDelayCorrPd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x67), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the correction value for the low delay correction phase
 * detector in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1LoDelayCorrPd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x67), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DAC bias resistor bypass for the low band 1 analog receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value A `uint8_t` value that indicates whether to bypass the DAC bias
 * resistor (1) or not (0).
 * @return Returns an `int32_t` status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1LoDelayDacBiasResBypass_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x67), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DAC bias resistor bypass status for the Low Band 1
 * analog receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1LoDelayDacBiasResBypass_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x67), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DAC resolution for the low band 1 delay in the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the DAC resolution value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1LoDelayDacRes_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x67), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DAC resolution for the low delay of the first loopback
 * channel.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved DAC
 * resolution will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1LoDelayDacRes_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x67), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fine correction DAC value for the low band 1 analog receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value A 16-bit unsigned integer representing the value to be set for
 * the fine correction DAC.
 * @return Returns the status of the operations, where 0 indicates success and a
 * negative value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1LoDelayFineCorrDac_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x62), (value >> 3));
    if (0 != status) return status;

    status = adi_bf_hal_Field_Write(device, (instance + 0x64), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the fine correction DAC value for the low band 1 analog
 * receiver.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific analog receiver
 * instance.
 * @param value A pointer to a `uint16_t` variable where the retrieved DAC value
 * will be stored.
 * @return Returns the status of the read operations, where a non-zero value
 * indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1LoDelayFineCorrDac_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x62), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Field_Read(device, (instance + 0x64), &register_value, 0x7, 0x0);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fine correction DAC value for the low band 1 analog receiver.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value A 16-bit unsigned integer representing the value to be set for
 * the fine correction DAC.
 * @return Returns an integer status code indicating success (0) or an error
 * code.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1LoDelayFineCorrDacB_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x63), (value >> 3));
    if (0 != status) return status;

    status = adi_bf_hal_Field_Write(device, (instance + 0x64), (value >> 0), 0x38, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the fine correction DAC value for the Low Band 1 of the
 * analog receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value A pointer to a `uint16_t` variable where the retrieved DAC value
 * will be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1LoDelayFineCorrDacB_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x63), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Field_Read(device, (instance + 0x64), &register_value, 0x38, 0x3);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the latch enable for the LO delay correction DAC in the ADRV9001
 * analog receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value A 8-bit value that determines whether to enable or disable the
 * latch.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1LoDelayLatchEn_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x64), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the latch enable status for the LO delay correction DAC in
 * the ADRV9001 analog receiver.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerator value indicating which instance of the analog
 * receiver memory map is being accessed.
 * @param value A pointer to a `uint8_t` variable where the retrieved latch
 * enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1LoDelayLatchEn_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x64), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Configures the mixer settings for the Low Band 1 (Lb1) of the analog
 * receiver.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value An 8-bit unsigned integer representing the configuration value
 * to be set for the mixer.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1MixerConfig_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x32), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the configuration value of the LB1 mixer from the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved mixer
 * configuration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1MixerConfig_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x32), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `Lb1feLocm` field in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer value to be written to the `Lb1feLocm`
 * field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1feLocm_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2f), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Lb1feLocm` field from the analog RX memory
 * map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1feLocm_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2f), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Lb1feLocmB` field in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the `Lb1feLocmB` field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1feLocmB_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x38), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Lb1feLocmB` field from the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1feLocmB_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x38), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the loopback filter in the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAnalogRxMemMap_e`
 * that specifies the instance of the analog RX memory map.
 * @param value A `uint8_t` value that indicates the power down state to be set.
 * @return Returns an `int32_t` status code indicating the result of the
 * operation, where 0 indicates success and a non-zero value indicates
 * an error.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1fePd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the loopback filter for the analog
 * receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerator of type `adrv9001_BfAnalogRxMemMap_e` that
 * specifies which instance of the analog receiver memory map to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1fePd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down override for the loopback filter stage in the
 * analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that indicates the power down override state (0
 * or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1fePdOverride_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief The `adrv9001_AnalogRxMemMap_Lb1fePdOverride_Get` function retrieves
 * the power down override status for the LB1 FE.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerator value that specifies which instance of the
 * analog RX memory map to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return The function returns an integer status code indicating the success or
 * failure of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1fePdOverride_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down override selection for the LB1FE (Low Band 1 Front
 * End) in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that indicates the power down override
 * selection.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1fePdOverrideSelect_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down override selection status for the LB1 FE.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1fePdOverrideSelect_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Lb1fecap` field in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the `Lb1fecap` field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1fecap_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x30), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Lb1fecap` register from the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value that specifies which instance of the
 * analog RX memory map to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1fecap_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x30), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Lb1fecapB` field in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAnalogRxMemMap_e`
 * that specifies the instance of the analog RX memory map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the `Lb1fecapB` field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1fecapB_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x31), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Lb1fecapB` register from the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerator of type `adrv9001_BfAnalogRxMemMap_e` that
 * specifies which instance of the analog RX memory map to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Lb1fecapB_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x31), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the force enable state for each stage of the loopback filter in
 * the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A 8-bit unsigned integer where each bit corresponds to enabling
 * or disabling a stage in the loopback filter.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_LoopbackFilter1StageForceEn_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x81), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the forced enable state of the first stage of the loopback
 * filter in the analog RX memory map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_LoopbackFilter1StageForceEn_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x81), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the loopback filter differential mode for channel 1 in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that sets the loopback filter mode (differential
 * or common).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_LoopbackFilterDiffCh1_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x82), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the differential loopback filter setting for channel 1 in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_LoopbackFilterDiffCh1_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x82), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the loopback switch configuration for channel 1 in the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAnalogRxMemMap_e`
 * that specifies the instance of the analog RX memory map.
 * @param value A `uint8_t` value that determines the loopback switch
 * configuration.
 * @return Returns an `int32_t` status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_LoopbackSwCh1_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x80), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the loopback switch channel 1 configuration from the analog
 * RX memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_LoopbackSwCh1_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x80), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the attenuation value for the ORx1 channel to 1.0V.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the attenuation value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1Force1p0vAttn_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x17), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the forced 1.0V attenuation value for the ORx1 channel.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * attenuation value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1Force1p0vAttn_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the override for the ORx1 enable signal in the analog RX memory
 * map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A 8-bit unsigned integer that indicates the value to set for the
 * override.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1ForceEnableOverrideLo_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Orx1ForceEnableOverrideLo` register from
 * the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1ForceEnableOverrideLo_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the maximum attenuation for the ORx1 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerator value indicating which instance of the analog
 * RX memory map to modify.
 * @param value An 8-bit unsigned integer representing the maximum attenuation
 * value to set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1ForceMaxAttn_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the maximum attention value for the ORx1 channel in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating which instance of the analog
 * RX memory map to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved maximum
 * attention value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation, while the maximum attention value is stored in
 * the variable pointed to by `value`.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1ForceMaxAttn_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the high-resolution enable bit for the ORx1 channel in the analog
 * RX memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that indicates whether to enable (1) or disable
 * (0) the high-resolution mode.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1HiLoResEn_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the high-resolution enable status for the ORx1 channel in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1HiLoResEn_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the high-resolution enable bit for the ORx1 channel in the analog
 * RX memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that indicates whether to enable (1) or disable
 * (0) the high-resolution mode.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1HiLoResEnB_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief The `adrv9001_AnalogRxMemMap_Orx1HiLoResEnB_Get` function retrieves
 * the high/low resolution enable status for the ORx1 channel.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAnalogRxMemMap_e`
 * that specifies the instance of the analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return The function returns an integer status code indicating the success or
 * failure of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1HiLoResEnB_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the coarse correction value for the I channel of the ORx1 LO
 * delay.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the coarse correction
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1LoDelayCoarseCorrI_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x59), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the coarse correction value for the I component of the ORx1
 * LO delay.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1LoDelayCoarseCorrI_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x59), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the coarse correction value for the I component of the ORx1 LO
 * delay.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the coarse correction
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1LoDelayCoarseCorrIb_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5a), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the coarse correction value for the I component of the ORx1
 * LO delay.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1LoDelayCoarseCorrIb_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5a), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the coarse correction value for the ORx1 LO delay.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the coarse correction
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1LoDelayCoarseCorrQ_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x59), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the coarse correction value for the ORx1 LO delay.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type indicating which instance of the analog RX
 * memory map to access.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1LoDelayCoarseCorrQ_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x59), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the coarse correction value for the Q channel of the ORx1 LO
 * delay.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the coarse correction.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1LoDelayCoarseCorrQb_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5a), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the coarse correction value for the Q channel of the ORx1 LO
 * delay.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1LoDelayCoarseCorrQb_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5a), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the correction value for the ORx1 LO delay.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the correction value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1LoDelayCorrPd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5b), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the correction value for the ORx1 LO delay.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved correction
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1LoDelayCorrPd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5b), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DAC bias resistor bypass for the ORx1 low delay.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that indicates whether to bypass the DAC bias
 * resistor (1) or not (0).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1LoDelayDacBiasResBypass_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5b), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DAC bias resistor bypass status for the ORx1 LO delay.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1LoDelayDacBiasResBypass_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5b), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DAC resolution for the ORx1 LO delay.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * DAC resolution.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1LoDelayDacRes_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5b), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DAC resolution for the ORx1 LO delay.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved DAC
 * resolution will be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1LoDelayDacRes_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5b), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fine correction DAC value for the ORx1 LO delay.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type indicating which instance of the analog RX
 * memory map is being accessed.
 * @param value A 16-bit unsigned integer representing the value to be set for
 * the fine correction DAC.
 * @return Returns an integer status code indicating success (0) or an error
 * code.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1LoDelayFineCorrDac_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x56), (value >> 3));
    if (0 != status) return status;

    status = adi_bf_hal_Field_Write(device, (instance + 0x58), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the fine correction DAC value for the ORx1 LO delay in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerator value indicating which instance of the analog
 * RX memory map to access.
 * @param value A pointer to a `uint16_t` where the retrieved DAC value will be
 * stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1LoDelayFineCorrDac_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x56), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Field_Read(device, (instance + 0x58), &register_value, 0x7, 0x0);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fine correction DAC value for the ORx1 LO delay.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A 16-bit unsigned integer representing the value to be set for
 * the fine correction DAC.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1LoDelayFineCorrDacB_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x57), (value >> 3));
    if (0 != status) return status;

    status = adi_bf_hal_Field_Write(device, (instance + 0x58), (value >> 0), 0x38, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the fine correction DAC value for the ORx1 LO delay.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint16_t` variable where the retrieved DAC value
 * will be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1LoDelayFineCorrDacB_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x57), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Field_Read(device, (instance + 0x58), &register_value, 0x38, 0x3);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the latch enable for the ORx1 LO delay correction DAC.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that indicates whether to enable or disable the
 * latch.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1LoDelayLatchEn_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x58), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the latch enable status for the ORx1 LO delay correction.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved latch
 * enable value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1LoDelayLatchEn_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x58), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Configures the mixer settings for the ORx1 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit value that configures the mixer settings.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1MixerConfig_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x14), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the mixer configuration value for the ORx1 channel.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved mixer
 * configuration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1MixerConfig_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x14), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the 1.8V supply selection for the ORx1 analog receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value A 8-bit unsigned integer representing the value to set for the
 * 1.8V supply selection.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1Sel1p8vSupply_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x18), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the 1.8V supply selection for the ORx1 analog receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerator of type `adrv9001_BfAnalogRxMemMap_e` that
 * specifies which instance of the analog receiver is being
 * accessed.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1Sel1p8vSupply_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x18), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the attenuation resistor shunt word for the ORx1 channel in the
 * ADRV9001 analog receiver.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the attenuation resistor shunt.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1SelAttenRshuntWord_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x14), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Orx1SelAttenRshuntWord` from the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerator value that specifies which instance of the
 * analog RX memory map to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1SelAttenRshuntWord_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x14), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `Orx1feLocm` field in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer value to be written to the specified
 * field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1feLocm_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the `feLocm` value from the specified instance of the analog
 * RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1feLocm_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `Orx1feLocmB` field in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer value to be written to the
 * `Orx1feLocmB` field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1feLocmB_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2d), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Orx1feLocmB` register from the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type indicating which instance of the analog RX
 * memory map to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1feLocmB_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2d), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the `ORx1` front-end analog circuitry.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAnalogRxMemMap_e`
 * that specifies which instance of the analog RX memory map to
 * configure.
 * @param value A `uint8_t` value that indicates the desired power down state (0
 * for active, 1 for power down).
 * @return Returns an `int32_t` status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1feLodcPd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x13), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the `Orx1feLodc` field from the
 * analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type indicating which instance of the analog RX
 * memory map to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1feLodcPd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x13), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the ORx1 front-end.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value indicating the desired power down state (0 for
 * active, 1 for power down).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1fePd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the ORx1 front-end.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved power down
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1fePd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down override for the ORx1 front-end.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that indicates the power down override state to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1fePdOverride_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down override status for the ORx1 front-end.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1fePdOverride_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the override selection for the power down state of the ORx1
 * front-end.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that indicates the power down override selection
 * state.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1fePdOverrideSelect_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down override selection for the ORx1 front-end.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating the specific instance of the analog
 * RX memory map.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1fePdOverrideSelect_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RBB disable state for the ORx1 analog receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerator of type `adrv9001_BfAnalogRxMemMap_e` that
 * specifies the instance of the analog receiver.
 * @param value A `uint8_t` value that indicates the desired state for the RBB
 * disable (0 or 1).
 * @return Returns an `int32_t` status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1feRbbDisable_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x13), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RBB disable bit for the ORx1 FE.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1feRbbDisable_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x13), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `Orx1fecap` field in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAnalogRxMemMap_e`
 * that specifies the instance of the analog RX memory map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the `Orx1fecap` field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1fecap_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x15), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Orx1fecap` register from the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1fecap_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x15), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Orx1fecapB` field in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the `Orx1fecapB` field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1fecapB_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x16), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Orx1fecapB` register from the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx1fecapB_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x16), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the attenuation value for the ORx2 channel to 1.0V.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the attenuation value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2Force1p0vAttn_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x20), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief The `adrv9001_AnalogRxMemMap_Orx2Force1p0vAttn_Get` function retrieves
 * the value of the 1.0V attenuation setting for the ORx2 channel.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerator of type `adrv9001_BfAnalogRxMemMap_e` that
 * specifies the instance of the analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return The function returns an integer status code indicating the success or
 * failure of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2Force1p0vAttn_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x20), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the override for the ORx2 enable low bit in the analog RX memory
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that indicates whether to enable or disable the
 * override.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2ForceEnableOverrideLo_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Orx2ForceEnableOverrideLo` register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type indicating which instance of the analog RX
 * memory map is being accessed.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2ForceEnableOverrideLo_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the maximum attenuation for the ORx2 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the maximum attenuation
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2ForceMaxAttn_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the maximum attenuation setting for the ORx2 channel in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating which instance of the analog
 * RX memory map to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved maximum
 * attenuation value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2ForceMaxAttn_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the high/low resolution enable for the ORx2 channel in the
 * ADRV9001 analog receiver.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value A uint8_t value that indicates whether to enable (1) or disable
 * (0) the high/low resolution.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2HiLoResEn_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x22), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the high and low resolution enable status for the ORx2
 * channel.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2HiLoResEn_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x22), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the high-resolution enable bit for the ORx2 channel in the analog
 * RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that indicates whether to enable (1) or disable
 * (0) the high-resolution mode.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2HiLoResEnB_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x23), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the high-resolution enable status for the ORx2 channel.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerator value indicating which instance of the analog
 * RX memory map to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2HiLoResEnB_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x23), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the coarse correction value for the I channel of the ORx2 LO
 * delay.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the coarse correction
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2LoDelayCoarseCorrI_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5f), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the coarse correction value for the I component of the ORx2
 * LO delay.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2LoDelayCoarseCorrI_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5f), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the coarse correction value for the I component of the ORx2 LO
 * delay.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the coarse correction.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2LoDelayCoarseCorrIb_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x60), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the coarse correction value for the I component of the ORx2
 * LO delay.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2LoDelayCoarseCorrIb_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x60), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the coarse correction value for the ORx2 LO delay.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the coarse correction
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2LoDelayCoarseCorrQ_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5f), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the coarse correction value for the ORx2 LO delay.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2LoDelayCoarseCorrQ_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5f), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the coarse correction value for the Q channel of the ORx2 LO
 * delay.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the coarse correction.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2LoDelayCoarseCorrQb_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x60), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the coarse correction value for the ORx2 LO delay.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2LoDelayCoarseCorrQb_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x60), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ORx2 LO delay correction power down.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that specifies the power down state for the LO
 * delay correction.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2LoDelayCorrPd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x61), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the correction value for the ORx2 LO delay.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved correction
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2LoDelayCorrPd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x61), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DAC bias resistor bypass for the ORx2 LO delay.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that indicates whether to bypass the DAC bias
 * resistor (1) or not (0).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2LoDelayDacBiasResBypass_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x61), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DAC bias resistor bypass status for the ORx2 LO delay.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2LoDelayDacBiasResBypass_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x61), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DAC resolution for the ORx2 LO delay.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * DAC resolution.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2LoDelayDacRes_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x61), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DAC resolution for the ORx2 LO delay.
 *
 * @param device A pointer to the device structure.
 * @param instance An enumerator indicating the specific instance of the analog
 * RX memory map.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2LoDelayDacRes_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x61), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fine correction DAC value for the ORx2 LO delay in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A 16-bit unsigned integer representing the value to be set for
 * the fine correction DAC.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the operations failed.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2LoDelayFineCorrDac_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x5c), (value >> 3));
    if (0 != status) return status;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5e), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the fine correction DAC value for the ORx2 LO delay.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type indicating which instance of the analog RX
 * memory map to access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2LoDelayFineCorrDac_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x5c), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5e), &register_value, 0x7, 0x0);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fine correction DAC value for the ORx2 LO delay.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerator of type `adrv9001_BfAnalogRxMemMap_e` that
 * specifies the instance of the analog RX memory map.
 * @param value A 16-bit unsigned integer representing the value to be set for
 * the fine correction DAC.
 * @return Returns an integer status code indicating success (0) or an error
 * code.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2LoDelayFineCorrDacB_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x5d), (value >> 3));
    if (0 != status) return status;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5e), (value >> 0), 0x38, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the fine correction DAC value for the ORx2 LO delay.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint16_t` variable where the retrieved DAC value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero). The retrieved DAC value is stored in the variable pointed
 * to by `value`.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2LoDelayFineCorrDacB_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x5d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5e), &register_value, 0x38, 0x3);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the latch enable for the ORx2 LO delay correction DAC.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that indicates whether to enable or disable the
 * latch.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2LoDelayLatchEn_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5e), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the ORx2 LO delay latch enable bit from the
 * analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2LoDelayLatchEn_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5e), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the mixer configuration for the ORx2 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the configuration value
 * to be set for the mixer.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2MixerConfig_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the mixer configuration value for the ORx2 channel.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved mixer
 * configuration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2MixerConfig_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the selection of the 1.8V supply for the ORx2 instance in the
 * analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAnalogRxMemMap_e`
 * that specifies which instance of the analog RX memory map is
 * being configured.
 * @param value A `uint8_t` value that indicates the selection state for the
 * 1.8V supply.
 * @return Returns an `int32_t` status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2Sel1p8vSupply_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x21), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the 1.8V supply selection for the ORx2 channel in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerator of type `adrv9001_BfAnalogRxMemMap_e`
 * indicating which instance of the analog RX memory map to
 * access.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2Sel1p8vSupply_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x21), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the attenuation resistor shunt word for the ORx2 channel in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the attenuation resistor shunt.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2SelAttenRshuntWord_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the attenuation resistor shunt word for the
 * ORx2 channel.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2SelAttenRshuntWord_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `feLocm` field in the ORx2 front-end configuration.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer value to be written to the `feLocm`
 * field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2feLocm_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Orx2feLocm` field from the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2feLocm_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `Orx2feLocmB` field in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer value to be written to the
 * `Orx2feLocmB` field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2feLocmB_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2e), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Orx2feLocmB` register from the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2feLocmB_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2e), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the local oscillator (LO) digital-to-
 * analog converter (DAC) in the analog receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value A 8-bit unsigned integer that indicates the power down state to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2feLodcPd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Orx2feLodcPd` field from the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2feLodcPd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the ORx2 front-end.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerator of type `adrv9001_BfAnalogRxMemMap_e` that
 * specifies which instance of the analog RX memory map to
 * configure.
 * @param value A `uint8_t` value that indicates the desired power down state (0
 * for active, 1 for power down).
 * @return Returns an `int32_t` status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2fePd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the ORx2 front-end.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerator value that specifies which instance of the
 * analog RX memory map to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2fePd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down override for the ORx2 front-end.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that indicates the power down override state to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2fePdOverride_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x8), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down override status for the ORx2 front-end.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerator value that specifies which instance of the
 * analog RX memory map to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2fePdOverride_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x8), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down override selection for the ORx2 front-end.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that indicates the power down override
 * selection.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2fePdOverrideSelect_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x7), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the override selection value for the ORx2 front-end power
 * down.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2fePdOverrideSelect_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x7), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RBB disable state for the ORx2 front-end.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerator of type `adrv9001_BfAnalogRxMemMap_e` that
 * specifies which instance of the analog RX memory map to
 * modify.
 * @param value A `uint8_t` value that indicates the desired state for the RBB
 * disable (0 or 1).
 * @return Returns an `int32_t` status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2feRbbDisable_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RBB disable bit for the ORx2 front-end.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2feRbbDisable_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `Orx2fecap` field in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAnalogRxMemMap_e`
 * that specifies the instance of the analog RX memory map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the `Orx2fecap` field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2fecap_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1e), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Orx2fecap` register from the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2fecap_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1e), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Orx2fecapB` field in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the `Orx2fecapB` field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2fecapB_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1f), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Orx2fecapB` register from the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Orx2fecapB_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1f), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ORx attenuation calibration signal in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific analog RX
 * memory map instance (e.g., RX1 or RX2).
 * @param regInstance An unsigned integer representing the specific register
 * instance to be modified.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the calibration signal.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxAttnCalSig_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x24 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration signal value for the ORx attenuation.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific analog RX
 * memory map instance (e.g., RX1 or RX2).
 * @param regInstance An unsigned integer representing the specific register
 * instance to read from.
 * @param value A pointer to a uint8_t where the retrieved calibration signal
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxAttnCalSig_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x24 + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the decay value for the ORx block detection in the ADRV9001
 * analog receiver.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value An 8-bit unsigned integer representing the decay value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxBlockDetDecay_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x68), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief The `adrv9001_AnalogRxMemMap_OrxBlockDetDecay_Get` function retrieves
 * the decay value from a specific register in the analog RX memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved decay
 * value will be stored.
 * @return The function returns an integer status code indicating the success or
 * failure of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxBlockDetDecay_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x68), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the lower threshold for the ORx block detection in the ADRV9001
 * analog receiver.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific analog receiver
 * instance (e.g., RX1 or RX2).
 * @param regInstance An unsigned integer representing the specific register
 * instance for the block detection threshold.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * lower threshold.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxBlockDetLlbth_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x69 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the block detection lower threshold value from the ORx block
 * of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerator indicating which instance of the analog RX
 * memory map to access.
 * @param regInstance An index specifying the register instance to read from.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxBlockDetLlbth_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x69 + 0x0 + (regInstance * 0x1)), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the upper limit threshold for the ORx block detection in the
 * ADRV9001 analog receiver.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerator value indicating which instance of the analog
 * receiver memory map is being accessed.
 * @param regInstance An index specifying the specific register instance to be
 * modified.
 * @param value The value to be set for the upper limit threshold, which is a
 * 6-bit value.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxBlockDetUlbth_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x70 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ultra-low threshold value from the ORx block detection
 * register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type indicating which instance of the analog RX
 * memory map to access.
 * @param regInstance An index to specify which register instance to read from.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxBlockDetUlbth_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x70 + 0x0 + (regInstance * 0x1)), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the ORx block detection circuit.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value indicating the power down state to set (1 for
 * power down, 0 for active).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxBlockdetPd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the ORx block detection circuit.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved power down
 * status will be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxBlockdetPd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down override for the ORx block detection circuit.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that specifies the power down override setting.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxBlockdetPdOverride_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down override status for the ORx block detection
 * circuit.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxBlockdetPdOverride_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down override for the ORx block detection circuit.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that indicates the power down override setting.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxBlockdetPdOverrideSelect_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down override selection status for the ORx block
 * detection circuit.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxBlockdetPdOverrideSelect_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the ORx calibration signal.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerator of type `adrv9001_BfAnalogRxMemMap_e` that
 * specifies which instance of the analog RX memory map to
 * access.
 * @param regInstance A 32-bit unsigned integer that specifies the register
 * instance to be modified.
 * @param value An 8-bit unsigned integer that represents the value to set for
 * the power down state.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxCalSigPd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x24 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration signal power down status for the ORx
 * channel.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific analog RX
 * memory map instance (e.g., ADRV9001_BF_RX1_ANA or
 * ADRV9001_BF_RX2_ANA).
 * @param regInstance An unsigned integer representing the specific register
 * instance to read from.
 * @param value A pointer to a uint8_t variable where the read value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxCalSigPd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x24 + 0x0 + (regInstance * 0x1)), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state of the `ORx` `Osdac`.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAnalogRxMemMap_e`
 * that specifies which instance of the analog RX memory map to
 * modify.
 * @param value A `uint8_t` value that indicates the desired power down state (1
 * to power down, 0 to enable).
 * @return Returns an `int32_t` indicating the success or failure of the
 * operation, where 0 indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxOsdacPd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the `OrxOsdac`.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxOsdacPd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down override for the ORx OS DAC.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that indicates the power down state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxOsdacPdOverride_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down override status for the ORx OS DAC.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerator value that specifies which instance of the
 * analog RX memory map to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxOsdacPdOverride_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down override selection for the ORx OS DAC.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that indicates the power down override
 * selection.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxOsdacPdOverrideSelect_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the OS DAC power down override selection value from the
 * specified analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxOsdacPdOverrideSelect_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the force update for the ORx TIA mode control bits.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that indicates the desired state to set for the
 * TIA force update.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxTiaForceUpdate_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x55), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the forced update value for the ORx TIA configuration.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxTiaForceUpdate_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x55), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the direct mode for the ORx TIA in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that sets the mode for the TIA.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxTiaModeDirect_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x55), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the direct mode setting for the ORx TIA in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating which instance of the analog
 * RX memory map to access.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxTiaModeDirect_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x55), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TIA mode to directly output the PLL clock divided by 16.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the TIA mode.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxTiaModeDirectDiv16_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x55), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `OrxTiaModeDirectDiv16` setting from the
 * analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxTiaModeDirectDiv16_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x55), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LFSR mode for the ORx TIA mode in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that sets the LFSR mode.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxTiaModeLfsr_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x55), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LFSR mode setting for the ORx TIA mode in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a uint8_t variable where the retrieved LFSR mode
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxTiaModeLfsr_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x55), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LFSR tap seed bit for the ORx TIA mode in the ADRV9001 analog
 * RX memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A 8-bit unsigned integer representing the value to be set for
 * the LFSR tap seed.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxTiaModeLfsrTapSeedb_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x55), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LFSR tap seed value for the ORx TIA mode from the
 * specified device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved LFSR tap
 * seed value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxTiaModeLfsrTapSeedb_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x55), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the sequence mode for the ORx TIA in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the mode to set for the
 * ORx TIA.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxTiaModeSeq_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x55), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ORx TIA mode sequence from the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxTiaModeSeq_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x55), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the overlap control for the I channel of the ORx mixer in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param regInstance An unsigned integer representing the specific register
 * instance to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxmixerILogenOvlpCtrl_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x26 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the overlap control value for the I channel of the ORx
 * mixer.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated type indicating which instance of the analog RX
 * memory map to access.
 * @param regInstance An index to specify the particular register instance to
 * read from.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxmixerILogenOvlpCtrl_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x26 + 0x0 + (regInstance * 0x1)), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the overlap control for the Q channel of the ORx mixer in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param regInstance An unsigned integer representing the specific register
 * instance to be modified.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the overlap control.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxmixerQLogenOvlpCtrl_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x28 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the Q channel's Logarithmic Enable Overlap
 * Control register for the specified instance.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated type indicating which instance of the analog RX
 * memory map to access.
 * @param regInstance An index specifying the register instance to read from.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxmixerQLogenOvlpCtrl_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x28 + 0x0 + (regInstance * 0x1)), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bypass bias for the ORx TIA in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value representing the bias setting to be applied.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxtiaBypBiasR_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3a), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bypass bias value for the ORx TIA from the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxtiaBypBiasR_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3a), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias control stage 1 for the ORx TIA in the ADRV9001 analog
 * receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * bias control.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxtiaIbiasCntrlStg1_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3a), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the control stage 1 bias current setting for the ORx TIA.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` where the retrieved bias current value
 * will be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxtiaIbiasCntrlStg1_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3a), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias control stage 2 for the ORx1 channel in the ADRV9001
 * analog receiver.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value An 8-bit unsigned integer representing the bias control value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxtiaIbiasCntrlStg2_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3a), (value >> 0), 0x38, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the control stage 2 bias current setting for the ORx TIA.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved bias
 * current setting will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxtiaIbiasCntrlStg2_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3a), &register_value, 0x38, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SPI override for the TIA delay in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the TIA delay.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxtiaPdTiaDelaySpiOvrd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x54), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SPI override delay value for the TIA in the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a uint8_t variable where the retrieved delay value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxtiaPdTiaDelaySpiOvrd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x54), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power control stage 1 for the ORx TIA in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerator indicating which instance of the analog RX
 * memory map is being accessed.
 * @param regInstance An index specifying the register instance for the power
 * control.
 * @param value A byte value representing the power control setting to be
 * written.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxtiaPowCntrlStg1_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3b + 0x0 + (regInstance * 0x1)), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power control setting for stage 1 of the ORx TIA.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerator value that specifies which instance of the
 * analog RX memory map to access.
 * @param regInstance An index that specifies the register instance for which
 * the power control setting is being retrieved.
 * @param value A pointer to a uint8_t variable where the retrieved power
 * control value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxtiaPowCntrlStg1_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3b + 0x0 + (regInstance * 0x1)), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power control for stage 2 of the ORx TIA.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerator of type `adrv9001_BfAnalogRxMemMap_e` that
 * specifies which instance of the analog RX memory map to
 * access.
 * @param regInstance A 32-bit unsigned integer that specifies the register
 * instance to be modified.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the specified register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxtiaPowCntrlStg2_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3b + 0x0 + (regInstance * 0x1)), (value >> 0), 0x38, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power control settings for stage 2 of the ORx TIA.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerator value that specifies which instance of the
 * analog RX memory map to access.
 * @param regInstance An index that specifies the register instance for which
 * the power control setting is being retrieved.
 * @param value A pointer to a uint8_t variable where the retrieved power
 * control value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxtiaPowCntrlStg2_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3b + 0x0 + (regInstance * 0x1)), &register_value, 0x38, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the override for the Vcm generator power down in the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that indicates the desired state for the Vcm
 * generator override.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxtiaSpiPdVcmgenOvrd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x54), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the override value for the Vcm generator in the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxtiaSpiPdVcmgenOvrd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x54), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reset state of the ORx Tuner in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that indicates the reset state to be set (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxtiaTunerResetb_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x39), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reset status of the `OrxtiaTuner` in the `adrv9001`
 * device.
 *
 * @param device A pointer to the device structure representing the `adrv9001`
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAnalogRxMemMap_e`
 * indicating which instance of the analog receiver memory map
 * to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxtiaTunerResetb_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x39), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output level of the Vcmgen for the ORx1 channel in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the desired output level
 * for the Vcmgen.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxtiaVcmgenOutlevel_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x54), (value >> 0), 0x6, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the output level of the Vcm generator for the specified
 * analog RX memory map instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved output
 * level will be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_OrxtiaVcmgenOutlevel_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x54), &register_value, 0x6, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the baseband analog multiplexer for the
 * ORx1 and Tx1 loopback.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that indicates the desired power down state (0
 * or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdBbAmuxOrx1Tx1lb_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2c), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `PdBbAmuxOrx1Tx1lb` register for the
 * specified device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value that specifies which instance of the
 * analog RX memory map to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdBbAmuxOrx1Tx1lb_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2c), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the baseband analog multiplexer for the
 * ORx2 and Tx2 loopback.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that indicates the desired power down state (0
 * or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdBbAmuxOrx2Tx2lb_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2c), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `PdBbAmuxOrx2Tx2lb` field from the analog
 * RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdBbAmuxOrx2Tx2lb_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2c), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `PdIDist` field in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A `uint8_t` value to be written to the `PdIDist` field.
 * @return Returns an `int32_t` status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdIDist_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xb), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `PdIDist` register from the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdIDist_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xb), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LO delay buffer configuration for the specified analog
 * receiver instance.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific analog receiver
 * instance (e.g., RX1 or RX2).
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the LO delay buffer.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdLb1LodelayBuffer_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `PdLb1LodelayBuffer` register for the
 * specified analog receiver instance.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific analog receiver
 * instance (e.g., `ADRV9001_BF_RX1_ANA` or
 * `ADRV9001_BF_RX2_ANA`).
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdLb1LodelayBuffer_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the override for the LO delay buffer in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that specifies the override setting for the LO
 * delay buffer.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdLb1LodelayBufferOverride_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the override value for the LO delay buffer of the first
 * loopback channel.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdLb1LodelayBufferOverride_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the override selection for the LO delay buffer in the ADRV9001
 * analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that specifies the override selection for the LO
 * delay buffer.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdLb1LodelayBufferOverrideSelect_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the override selection value for the LO delay buffer in the
 * ADRV9001 analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdLb1LodelayBufferOverrideSelect_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `Capdac` value for the `Lb1` mixer in the `adrv9001` device.
 *
 * @param device A pointer to the device structure representing the `adrv9001`
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAnalogRxMemMap_e`
 * indicating the specific instance of the analog RX memory map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the `Capdac`.
 * @return Returns an `int32_t` indicating the status of the write operation,
 * where 0 indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdLb1MixerCapdac_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Capdac` register for the `Lb1` mixer in
 * the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdLb1MixerCapdac_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the override value for the `Lb1` mixer capacitor DAC in the
 * `adrv9001` device.
 *
 * @param device A pointer to the device structure representing the `adrv9001`
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAnalogRxMemMap_e`
 * indicating the specific instance of the analog RX memory map.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * mixer capacitor DAC override.
 * @return Returns an `int32_t` indicating the status of the write operation,
 * where 0 indicates success and a non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdLb1MixerCapdacOverride_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the override value for the `Lb1` mixer capacitor DAC from
 * the specified device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdLb1MixerCapdacOverride_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the mixer capacitor DAC override selection for the ADRV9001
 * analog receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value A uint8_t value that specifies the override selection for the
 * mixer capacitor DAC.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdLb1MixerCapdacOverrideSelect_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Lb1MixerCapdacOverrideSelect` field from
 * the specified device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdLb1MixerCapdacOverrideSelect_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LO delay buffer for the analog receiver.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the LO delay buffer.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdOrx1LodelayBuffer_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the LO delay buffer for the ORx1 channel.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdOrx1LodelayBuffer_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the override value for the LO delay buffer of the ORx1 channel.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that specifies the override setting for the LO
 * delay buffer.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdOrx1LodelayBufferOverride_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the override value for the LO delay buffer of the ORx1
 * channel.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdOrx1LodelayBufferOverride_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the override selection for the LO delay buffer of the ORx1
 * channel in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that specifies the override selection for the LO
 * delay buffer.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdOrx1LodelayBufferOverrideSelect_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the override selection value for the ORx1 LO delay buffer.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdOrx1LodelayBufferOverrideSelect_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the mixer capacitor digital-to-analog converter (DAC) value for
 * the ORx1 channel.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the mixer capacitor DAC.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdOrx1MixerCapdac_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief The `adrv9001_AnalogRxMemMap_PdOrx1MixerCapdac_Get` function retrieves
 * the value of the mixer capacitor DAC for the ORx1 channel.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAnalogRxMemMap_e`
 * that specifies the instance of the analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return The function returns an integer status code indicating the success or
 * failure of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdOrx1MixerCapdac_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the mixer capacitor DAC override value for the ORx1 channel in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific analog RX
 * memory map instance (e.g., ADRV9001_BF_RX1_ANA or
 * ADRV9001_BF_RX2_ANA).
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the mixer capacitor DAC override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdOrx1MixerCapdacOverride_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the mixer capacitor DAC override value for the ORx1 channel.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdOrx1MixerCapdacOverride_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the mixer capacitor DAC override selection for the ORx1 channel
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value representing the selection for the mixer
 * capacitor DAC override.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdOrx1MixerCapdacOverrideSelect_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the mixer capacitor DAC override selection value for the
 * ORx1 channel.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdOrx1MixerCapdacOverrideSelect_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LO delay buffer for the ORx2 channel in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value to set the LO delay buffer.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdOrx2LodelayBuffer_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LO delay buffer value for the ORx2 channel in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating which instance of the analog
 * RX memory map to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved LO delay
 * buffer value will be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdOrx2LodelayBuffer_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the override value for the LO delay buffer of the ORx2 channel.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that specifies the override setting for the LO
 * delay buffer.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdOrx2LodelayBufferOverride_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x8), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the override value for the LO delay buffer of the ORx2
 * channel.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific analog RX
 * memory map instance (e.g., ADRV9001_BF_RX1_ANA or
 * ADRV9001_BF_RX2_ANA).
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdOrx2LodelayBufferOverride_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x8), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the override selection for the LO delay buffer of the second ORx
 * channel in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that indicates the override selection for the LO
 * delay buffer.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdOrx2LodelayBufferOverrideSelect_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x7), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the override selection value for the LO delay buffer of the
 * second ORx channel.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdOrx2LodelayBufferOverrideSelect_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x7), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the mixer capacitor DAC value for the ORx2 channel.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value indicating which instance of the analog
 * RX memory map is being accessed.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the mixer capacitor DAC.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdOrx2MixerCapdac_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief The `adrv9001_AnalogRxMemMap_PdOrx2MixerCapdac_Get` function retrieves
 * the value of the mixer capacitor DAC for the ORx2 channel.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAnalogRxMemMap_e`
 * that specifies the instance of the analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return The function returns an integer status code indicating the success or
 * failure of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdOrx2MixerCapdac_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the mixer capacitor DAC override value for the ORx2 channel.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * mixer capacitor DAC override.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdOrx2MixerCapdacOverride_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x8), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the mixer capacitor DAC override value for the ORx2 channel.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerator value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdOrx2MixerCapdacOverride_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x8), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the mixer capacitor DAC override selection for the ORx2 channel
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific analog RX
 * memory map instance (e.g., ORx2).
 * @param value A 8-bit unsigned integer representing the value to set for the
 * mixer capacitor DAC override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdOrx2MixerCapdacOverrideSelect_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x7), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the mixer capacitor DAC override selection value for the
 * ORx2 channel.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdOrx2MixerCapdacOverrideSelect_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x7), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down override for the output stage of the Rx1 loopback
 * filter.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that indicates whether to enable or disable the
 * power down override.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdOverrideOutRx1Loopback_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x7e), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down override status for the output stage of the
 * Rx1 loopback filter.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdOverrideOutRx1Loopback_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x7e), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the DAC for the specified instance in the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerator of type `adrv9001_BfAnalogRxMemMap_e` that
 * specifies which analog RX memory map instance to configure.
 * @param regInstance A 32-bit unsigned integer that specifies the register
 * instance to be modified.
 * @param value An 8-bit unsigned integer that represents the value to be set
 * for the DAC.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdTuneDac_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x94 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the DAC tuning register for the specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated type indicating which analog RX memory map
 * instance to access.
 * @param regInstance An index to specify which register instance to read from.
 * @param value A pointer to a uint8_t where the retrieved register value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_PdTuneDac_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x94 + 0x0 + (regInstance * 0x1)), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the high range of the RF local oscillator for the analog
 * receiver.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RF local oscillator high range.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RfLoHighR_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x7c), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the high range value of the RF local oscillator from the
 * analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RfLoHighR_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x7c), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias configuration for the Rx1 loopback filter in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the bias configuration
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Rx1LoopbackFilterBiasConfig_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x7e), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias configuration for the Rx1 loopback filter.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved bias
 * configuration will be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Rx1LoopbackFilterBiasConfig_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x7e), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the R-gate value for the Rx1 loopback filter in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the R-gate value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Rx1LoopbackFilterRgate_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x7e), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Rgate value from the Rx1 loopback filter configuration.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved Rgate
 * value will be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Rx1LoopbackFilterRgate_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x7e), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the override for the loopback filter stages in the Rx1 path of
 * the ADRV9001.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A 8-bit unsigned integer that specifies which filter stages to
 * override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Rx1PdLoopbackFilterOverride_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x80), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the override value for the Rx1 loopback filter in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating which instance of the analog
 * RX memory map to access.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_Rx1PdLoopbackFilterOverride_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x80), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the auxiliary low buffer in the analog
 * RX memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAnalogRxMemMap_e`
 * that specifies which instance of the analog RX memory map to
 * modify.
 * @param value A `uint8_t` value that indicates the desired power down state (0
 * for active, 1 for power down).
 * @return Returns an `int32_t` status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxAuxLoBufPd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x88), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the auxiliary low buffer in the
 * analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxAuxLoBufPd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x88), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RxAuxloR termination value in the ADRV9001 analog RX memory
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that represents the termination setting to be
 * applied.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxAuxloRTerm_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x88), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxAuxloRTerm` register from the specified
 * device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxAuxloRTerm_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x88), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the auxiliary low input buffer in the
 * analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value indicating the desired power down state (0 for
 * active, 1 for power down).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxCalToneAuxloInbufPd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the auxiliary low input buffer for
 * the RX calibration tone.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxCalToneAuxloInbufPd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the RX calibration tone output buffer.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value indicating the power down state to set (1 for
 * power down, 0 for active).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxCalToneOutbufPd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the RX calibration tone output
 * buffer.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxCalToneOutbufPd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the RX calibration tone's low input
 * buffer.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value indicating the desired power down state (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxCalToneRxloInbufPd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the RXLO input buffer for the
 * calibration tone.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a uint8_t variable where the retrieved power down
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxCalToneRxloInbufPd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the auxiliary low tone selection for the RX calibration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A 8-bit unsigned integer representing the value to set for the
 * auxiliary low tone selection.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxCalToneSelAuxLo_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the auxiliary low tone selection value from the RX
 * calibration memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxCalToneSelAuxLo_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the auxiliary low termination enable for the analog receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value A uint8_t value that indicates whether to enable or disable the
 * auxiliary low termination.
 * @return Returns the status of the write operation, which is an integer
 * indicating success or failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxEnAuxloTerm_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x88), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the auxiliary low termination enable bit from
 * the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxEnAuxloTerm_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x88), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the high range of the local oscillator (LO) for the analog
 * receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * high range of the LO.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxLoHighR_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x7c), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the high register value for the Rx LO in the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxLoHighR_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x7c), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RxLoLineR termination value in the ADRV9001 analog receiver
 * memory map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value A uint8_t value representing the termination setting to be
 * applied.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxLoLineRTerm_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxLoLineRTerm` register for the specified
 * instance of the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerator of type `adrv9001_BfAnalogRxMemMap_e` that
 * specifies which instance of the analog RX memory map to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxLoLineRTerm_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the receive low line buffer in the
 * analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value indicating the desired power down state (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxLoLineRcvBufPd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the receive buffer for the low line
 * of the analog receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved power down
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxLoLineRcvBufPd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the line termination bias power down state for the Rx low line.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that indicates the desired power down state for
 * the line termination bias.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxLoLineTermBiasPd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias power down status for the low line termination of
 * the analog receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved bias power
 * down status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxLoLineTermBiasPd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the line termination enable state for the Rx low frequency path
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value indicating the desired state of the line
 * termination enable (1 to enable, 0 to disable).
 * @return Returns the status of the write operation, indicating success (0) or
 * an error code.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxLoLineTermEnable_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the line termination enable status for the RxLo line in the
 * analog RX memory map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved line
 * termination enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxLoLineTermEnable_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the auxiliary low input buffer in the RX
 * mixer.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAnalogRxMemMap_e`
 * that specifies which instance of the analog RX memory map to
 * modify.
 * @param value A `uint8_t` value that indicates the desired power down state (0
 * for active, 1 for power down).
 * @return Returns an `int32_t` status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxMixAuxloInbufPd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x11), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the auxiliary low input buffer in
 * the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxMixAuxloInbufPd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x11), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the low output buffer of the Rx mixer.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAnalogRxMemMap_e`
 * that specifies which instance of the analog RX memory map to
 * operate on.
 * @param value A `uint8_t` value that indicates the desired power down state (1
 * to power down, 0 to power up).
 * @return Returns an `int32_t` indicating the status of the operation, where 0
 * indicates success and a non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxMixLoOutbufPd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x11), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the `RxMixLoOutbuf` for the
 * specified device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAnalogRxMemMap_e`
 * that specifies which instance of the analog RX memory map to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved power down
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxMixLoOutbufPd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x11), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the auxiliary low selection for the Rx mixer in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A 8-bit unsigned integer representing the value to set for the
 * auxiliary low selection.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxMixLoSelAuxLo_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x11), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxMixLoSelAuxLo` field from the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxMixLoSelAuxLo_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x11), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state of the RX low input buffer.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value indicating the desired power down state (1 to
 * power down, 0 to power up).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxMixRxloInbufPd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x11), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the `RxMixRxloInbuf` buffer for the
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved power down
 * status will be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxMixRxloInbufPd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x11), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the auxiliary low termination bias for the analog receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value An 8-bit unsigned integer representing the bias value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxPdAuxloTermBias_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x88), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the auxiliary low termination bias value from the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved bias value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxPdAuxloTermBias_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x88), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `RxSpare1` register in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the `RxSpare1` register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxSpare1_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xff), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxSpare1` register from the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxSpare1_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xff), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `RxSpare2` register in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAnalogRxMemMap_e`
 * that specifies the instance of the analog RX memory map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the `RxSpare2` register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxSpare2_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x100), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxSpare2` register from the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxSpare2_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x100), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control for the `RxtiaBbinjAmp` in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the `RxtiaBbinjAmp` control.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaBbinjAmpCtrl_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xed), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the control value for the `RxtiaBbinjAmpCtrl` register from
 * the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, where a non-zero value
 * indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaBbinjAmpCtrl_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xed), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the `Rxtia` block in the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A `uint8_t` value indicating the power down state to be set.
 * @return Returns an `int32_t` status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaBbinjPd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xed), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the `RxtiaBbinj` component in the
 * analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaBbinjPd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xed), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `RxtiaBbinjSelchop` field in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the `RxtiaBbinjSelchop` field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaBbinjSelchop_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xed), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaBbinjSelchop` field from the
 * specified instance of the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaBbinjSelchop_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xed), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the standby state for the `RxtiaBbinj` field in the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A `uint8_t` value that indicates the standby state to be set.
 * @return Returns an `int32_t` status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaBbinjStdby_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xed), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the standard by-pass status of the `Rxtia` block in the
 * analog receiver memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerator value that specifies which instance of the
 * analog receiver memory map to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaBbinjStdby_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xed), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX TIA configuration for a specified instance and register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type indicating which analog RX memory map
 * instance to configure.
 * @param regInstance An index indicating the specific register instance to be
 * configured.
 * @param value A 16-bit value representing the configuration settings to be
 * applied.
 * @return Returns the status of the operation, indicating success or failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaC1_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x8e + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x89 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RXTIA C1 configuration value from the specified device
 * and instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific analog RX
 * memory map instance.
 * @param regInstance An index to specify which register instance to read from.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaC1_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x8e + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x89 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fine tuning value for the `RxtiaC1` capacitor in the analog
 * RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerator of type `adrv9001_BfAnalogRxMemMap_e` that
 * specifies the instance of the analog RX memory map.
 * @param regInstance A 32-bit unsigned integer that specifies the register
 * instance for the operation.
 * @param value A 16-bit unsigned integer representing the value to be set for
 * the `RxtiaC1` capacitor.
 * @return Returns an integer status code indicating success (0) or an error
 * code.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaC1Fine_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x94 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x30, 0x4);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x92 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the fine adjustment value for the `RxtiaC1` register in the
 * analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type indicating which instance of the analog RX
 * memory map to access.
 * @param regInstance An index to specify which register instance to read from.
 * @param value A pointer to a `uint16_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaC1Fine_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x94 + 0x0 + (regInstance * 0x1)), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x92 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RXTIA C2 configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific analog RX
 * memory map instance.
 * @param regInstance An index to specify the register instance for the
 * configuration.
 * @param value A 16-bit value representing the configuration to be set.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaC2_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x8e + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc, 0x2);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x8a + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief The `adrv9001_AnalogRxMemMap_RxtiaC2_Get` function retrieves the value
 * of the `RxtiaC2` register from the analog RX memory map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated type indicating which instance of the analog RX
 * memory map to access.
 * @param regInstance An unsigned integer representing the specific register
 * instance to read from.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * register value will be stored.
 * @return The function returns an integer status code indicating success (0) or
 * failure (non-zero) of the read operations, and the retrieved value is
 * stored in the location pointed to by the `value` parameter.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaC2_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x8e + 0x0 + (regInstance * 0x1)), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x8a + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fine adjustment for the `RxtiaC2` register in the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type indicating which instance of the analog RX
 * memory map is being accessed.
 * @param regInstance An index indicating the specific register instance to be
 * modified.
 * @param value A 16-bit value representing the fine adjustment setting to be
 * written to the register.
 * @return Returns an integer status code indicating success (0) or an error
 * code.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaC2Fine_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x94 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc0, 0x6);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x93 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the fine adjustment value for the `RxtiaC2` register in the
 * analog RX memory map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific analog RX
 * memory map instance (e.g., RX1 or RX2).
 * @param regInstance An unsigned integer representing the specific register
 * instance to read from.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation, and the retrieved fine adjustment value is stored in
 * the provided pointer.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaC2Fine_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x94 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x93 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX TIA mode in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific analog RX
 * memory map instance (e.g., RX1 or RX2).
 * @param regInstance An integer representing the specific register instance to
 * be modified.
 * @param value A byte value representing the mode to set for the RX TIA.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaMode_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x94 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RX TIA mode from the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type indicating which instance of the analog RX
 * memory map to access.
 * @param regInstance An index to specify the register instance within the
 * selected memory map.
 * @param value A pointer to a uint8_t where the retrieved RX TIA mode value
 * will be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaMode_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x94 + 0x0 + (regInstance * 0x1)), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the input resistor for the integrator stage of the Biquad filter
 * in the ADRV9001 analog receiver.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerator indicating which instance of the analog
 * receiver memory map is being accessed.
 * @param regInstance An index indicating the specific register instance to be
 * modified.
 * @param value A 16-bit unsigned integer representing the value to set for the
 * input resistor.
 * @return Returns an integer status code indicating success (0) or an error
 * code.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaR2_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x8e + 0x0 + (regInstance * 0x1)), (value >> 8), 0x30, 0x4);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x8b + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaR2` register from the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerator value that specifies which instance of the
 * analog RX memory map to access.
 * @param regInstance An index that specifies the register instance to read
 * from.
 * @param value A pointer to a `uint16_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, which is 0 on success or a
 * negative error code on failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaR2_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x8e + 0x0 + (regInstance * 0x1)), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x8b + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the R3 register value for the RX TIA in the ADRV9001 analog
 * receiver memory map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerator value indicating which analog RX memory map
 * instance to configure.
 * @param regInstance An index specifying the register instance to be set.
 * @param value The 16-bit value to be written to the R3 register.
 * @return Returns the status of the operation, indicating success (0) or an
 * error code.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaR3_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x8e + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc0, 0x6);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x8c + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaR3` register from the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific analog RX
 * memory map instance.
 * @param regInstance An unsigned integer representing the specific register
 * instance to read.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * register value will be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaR3_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x8e + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x8c + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the feedback resistor value in the TIA for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param regInstance An index representing the specific register instance to be
 * modified.
 * @param value A 16-bit unsigned integer representing the feedback resistor
 * value to be set.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaR4_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x8f + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc0, 0x6);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x8d + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the feedback resistor value from the `RxtiaR4` register for
 * the specified instance.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerator of type `adrv9001_BfAnalogRxMemMap_e` that
 * specifies the instance of the analog RX memory map.
 * @param regInstance A 32-bit unsigned integer that specifies the register
 * instance to read from.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * feedback resistor value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaR4_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x8f + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x8d + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX TIA selection for stage 1 in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerator of type `adrv9001_BfAnalogRxMemMap_e` that
 * specifies the instance of the analog RX memory map.
 * @param regInstance A 32-bit unsigned integer that specifies the register
 * instance to be modified.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the specified register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaSelccStg1_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x90 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaSelccStg1` register for the specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific analog RX
 * memory map instance.
 * @param regInstance An unsigned integer representing the specific register
 * instance to read from.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaSelccStg1_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x90 + 0x0 + (regInstance * 0x1)), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the selection for the second stage of the `Rxtia` configuration
 * in the analog receiver memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAnalogRxMemMap_e`
 * that specifies the instance of the analog receiver.
 * @param regInstance A 32-bit unsigned integer that specifies the register
 * instance for the configuration.
 * @param value An 8-bit unsigned integer that represents the value to be set
 * for the second stage selection.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaSelccStg2_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x91 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaSelccStg2` register for the specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerator value that specifies which instance of the
 * analog RX memory map to access.
 * @param regInstance An index that specifies the register instance to read
 * from.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaSelccStg2_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x91 + 0x0 + (regInstance * 0x1)), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RXTIA selection for stage 1 in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param regInstance An unsigned integer representing the register instance to
 * be modified.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * RXTIA selection.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaSelrzStg1_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x90 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x60, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaSelrzStg1` register from the analog
 * RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type indicating which instance of the analog RX
 * memory map to access.
 * @param regInstance An index to specify the particular register instance to
 * read.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaSelrzStg1_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x90 + 0x0 + (regInstance * 0x1)), &register_value, 0x60, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX TIA selection for stage 2 in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerator value that specifies which instance of the
 * analog RX memory map to access.
 * @param regInstance An index that specifies the register instance to be
 * modified.
 * @param value The value to be written to the specified register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaSelrzStg2_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x91 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x60, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaSelrzStg2` register from the
 * specified device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerator value that specifies which instance of the
 * analog RX memory map to access.
 * @param regInstance An index that specifies the register instance to read
 * from.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_RxtiaSelrzStg2_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x91 + 0x0 + (regInstance * 0x1)), &register_value, 0x60, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the high gate voltage for the RX attenuation.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param regInstance An index to specify the register instance for the
 * operation.
 * @param value The value to be written to the specified register.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_SelRxattennVgateHi_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2a + 0x0 + (regInstance * 0x1)), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the high gate voltage setting for the RX attenuation.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific analog RX
 * memory map instance (e.g., RX1 or RX2).
 * @param regInstance An unsigned integer representing the specific register
 * instance to read from.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_SelRxattennVgateHi_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2a + 0x0 + (regInstance * 0x1)), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the self-injection calibration value for the analog RX memory
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific analog RX
 * memory map instance (e.g., RX1 or RX2).
 * @param regInstance An unsigned integer representing the specific register
 * instance to be modified.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the self-injection calibration.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_SelbInjCal_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x24 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the self-injection calibration value from the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific analog RX
 * memory map instance (e.g., RX1 or RX2).
 * @param regInstance An unsigned integer representing the specific register
 * instance to read from.
 * @param value A pointer to a uint8_t variable where the retrieved calibration
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_SelbInjCal_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x24 + 0x0 + (regInstance * 0x1)), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ORx1 or Tx1 loopback configuration in the analog RX memory
 * map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that specifies the configuration to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_SelectOrx1OrTx1lb_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2c), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the ORx1 or Tx1 loopback configuration from the
 * analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_SelectOrx1OrTx1lb_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2c), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ORx2 or Tx2 loopback configuration in the analog RX memory
 * map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAnalogRxMemMap_e`
 * that specifies the instance of the analog RX memory map.
 * @param value An 8-bit unsigned integer that represents the value to be set
 * for the specified instance.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_SelectOrx2OrTx2lb_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2c), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the ORx2 or Tx2 low band.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAnalogRxMemMap_e`
 * that specifies which instance of the analog RX memory map to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_SelectOrx2OrTx2lb_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2c), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the TIA in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value indicating the desired power down state (0 for
 * active, 1 for power down).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TiaPd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief The `adrv9001_AnalogRxMemMap_TiaPd_Get` function retrieves the power
 * down status of the TIA (Transimpedance Amplifier) for a specified
 * analog receiver instance.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAnalogRxMemMap_e`
 * indicating which analog receiver instance to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved power down
 * status will be stored.
 * @return The function returns an integer status code indicating the success or
 * failure of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TiaPd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down override for the TIA in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that indicates the power down override state to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TiaPdOverride_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the TIA power down override value from the specified analog
 * RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TiaPdOverride_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TIA power down override selection for the ADRV9001 analog
 * receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value A 8-bit unsigned integer that specifies the power down override
 * selection value.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TiaPdOverrideSelect_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the TIA power down override selection value from the
 * specified analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TiaPdOverrideSelect_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the TIA tuner clock driver input buffer.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value indicating the desired power down state (0 for
 * active, 1 for power down).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TiaTunerClkDriverInbufPd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x10), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the `TiaTunerClkDriverInbuf` for
 * the specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TiaTunerClkDriverInbufPd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x10), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the `TiaTunerClkDriver` in the analog RX
 * memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAnalogRxMemMap_e`
 * that specifies which instance of the analog RX memory map to
 * operate on.
 * @param value A `uint8_t` value that indicates the desired power down state (0
 * or 1).
 * @return Returns an `int32_t` indicating the success or failure of the write
 * operation, where 0 typically indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TiaTunerClkDriverPd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x10), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the `TiaTunerClkDriver` for the
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAnalogRxMemMap_e`
 * that specifies which instance of the analog RX memory map to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TiaTunerClkDriverPd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x10), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DAC gain for the analog receiver.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerator that specifies which instance of the analog
 * receiver memory map to configure.
 * @param regInstance An index that specifies the register instance to be
 * modified.
 * @param value A 16-bit value representing the gain setting to be applied to
 * the DAC.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TuneDacGm1_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x97 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x95 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the DAC gain setting for the specified instance
 * and register.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated type indicating which analog RX memory map
 * instance to access.
 * @param regInstance An index specifying the register instance to read from.
 * @param value A pointer to a uint16_t where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TuneDacGm1_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x97 + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x95 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain of the DAC for the second gain stage in the analog
 * receiver.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type indicating which instance of the analog
 * receiver is being configured.
 * @param regInstance An index to specify the register instance for the DAC
 * setting.
 * @param value The value to set for the DAC gain, which is a 16-bit value.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the operations performed.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TuneDacGm2_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x97 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc, 0x2);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x96 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the DAC gain setting for the second gain stage
 * in the analog receiver.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific analog receiver
 * instance (e.g., RX1 or RX2).
 * @param regInstance An index to specify which register instance to read from.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operations failed.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TuneDacGm2_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x97 + 0x0 + (regInstance * 0x1)), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x96 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DAC resolution for the analog receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerator of type `adrv9001_BfAnalogRxMemMap_e` that
 * specifies the instance of the analog receiver.
 * @param regInstance A 32-bit unsigned integer that specifies the register
 * instance to be modified.
 * @param value An 8-bit unsigned integer that represents the value to be set
 * for the DAC resolution.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TuneDacRes_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x97 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DAC resolution setting from the specified register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific analog RX
 * memory map instance.
 * @param regInstance An unsigned integer representing the specific register
 * instance to read from.
 * @param value A pointer to a uint8_t where the retrieved DAC resolution value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TuneDacRes_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x97 + 0x0 + (regInstance * 0x1)), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the auxiliary low input buffer in the Tx
 * calibration tone path.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value indicating the desired power down state (0 for
 * active, 1 for power down).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TxCalToneAuxloInbufPd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x11), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the Tx calibration tone auxiliary low input
 * buffer power down status.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TxCalToneAuxloInbufPd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x11), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the Tx calibration tone output buffer.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value indicating the power down state to set (1 for
 * power down, 0 for active).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TxCalToneOutbufPd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x11), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the Tx calibration tone output
 * buffer.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TxCalToneOutbufPd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x11), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the auxiliary low tone selection for the Tx calibration in the
 * ADRV9001 analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value that specifies the tone selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TxCalToneSelAuxLo_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x11), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the Tx calibration tone selection for the
 * auxiliary low frequency.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TxCalToneSelAuxLo_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x11), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the Tx LO input buffer in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value indicating the desired power down state (1 to
 * power down, 0 to power up).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TxCalToneTxloInbufPd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x11), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief The `adrv9001_AnalogRxMemMap_TxCalToneTxloInbufPd_Get` function
 * retrieves the power down status of the Tx calibration tone low input
 * buffer.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return The function returns an integer status code indicating the success or
 * failure of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TxCalToneTxloInbufPd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x11), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the auxiliary low input buffer in the
 * ADRV9001 analog receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog receiver memory map.
 * @param value A uint8_t value indicating the desired power down state (0 for
 * active, 1 for power down).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TxLbAuxloInbufPd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the TxLbAuxloInbufPd register for the specified
 * device and instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TxLbAuxloInbufPd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the low output buffer of the Tx
 * loopback.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value indicating the desired power down state (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TxLbLoOutbufPd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the Tx Low Buffer Output Power Down bit from
 * the specified analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value that specifies which instance of the
 * analog RX memory map to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TxLbLoOutbufPd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the auxiliary low selection for the Tx loopback.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A 8-bit unsigned integer representing the value to set for the
 * auxiliary low selection.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TxLbLoSelAuxLo_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the TxLbLoSelAuxLo register for the specified
 * device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TxLbLoSelAuxLo_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the Tx low band transmit low input
 * buffer.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A uint8_t value indicating the power down state to set (1 for
 * power down, 0 for active).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TxLbTxloInbufPd_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the Tx low buffer power down bit from the
 * analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TxLbTxloInbufPd_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx LO high range value in the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the Tx LO high range.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TxLoHighR_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x7c), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the high byte value of the Tx LO frequency from the analog
 * RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog RX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_TxLoHighR_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x7c), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Vhi gate control for the analog RX memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type indicating which instance of the analog RX
 * memory map is being accessed.
 * @param regInstance An index to specify the particular register instance
 * within the selected memory map.
 * @param value A 8-bit value to be written to the specified register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_VhiGateCtrl_Set(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2a + 0x0 + (regInstance * 0x1)), (value >> 0), 0x3e, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the VhiGate control value from the analog RX memory map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerator value indicating which instance of the analog
 * RX memory map to access.
 * @param regInstance An index to specify the register instance within the
 * selected memory map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxMemMap_VhiGateCtrl_Get(void *device,
    adrv9001_BfAnalogRxMemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2a + 0x0 + (regInstance * 0x1)), &register_value, 0x3e, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


#endif // __ADRV9001_BF_ANALOG_RX_MEM_MAP_H__