/**
 * \file
 * \brief BitField accessors for nvs_regmap_rxb
 *
 * Autogenerated with yoda-gen 1.1.0. Do not modify
 *
 * \copyright Copyright (c) 2020 Analog Devices, Inc. All Rights Reserved.
 * This software is proprietary to Analog Devices, Inc. and its licensors.
 */

 #ifndef __ADRV9001_BF_NVS_REGMAP_RXB_H__
 #define __ADRV9001_BF_NVS_REGMAP_RXB_H__

#include "adrv9001_bf_hal.h"

/***************************************************************************//**
 * @brief The `adrv9001_BfNvsRegmapRxb_e` is an enumeration that defines
 * constants for accessing specific core register maps associated with
 * RXB1 and RXB2 in the ADRV9001 device. Each enumerator is assigned a
 * unique hexadecimal value that corresponds to a specific register map
 * address, facilitating the configuration and control of the device's
 * receiver blocks.
 *
 * @param ADRV9001_BF_RXB1_CORE Represents the core register map for RXB1 with a
 * hexadecimal value of 0x1000.
 * @param ADRV9001_BF_RXB2_CORE Represents the core register map for RXB2 with a
 * hexadecimal value of 0x1400.
 ******************************************************************************/
typedef enum adrv9001_BfNvsRegmapRxb_e
{
    ADRV9001_BF_RXB1_CORE    =   0x1000,
    ADRV9001_BF_RXB2_CORE    =   0x1400
} adrv9001_BfNvsRegmapRxb_e;

/***************************************************************************//**
 * @brief The `nvsRegmapRxbInstances` is a static constant array of type
 * `adrv9001_BfNvsRegmapRxb_e`, which is an enumeration. It contains two
 * elements, `ADRV9001_BF_RXB1_CORE` and `ADRV9001_BF_RXB2_CORE`,
 * representing specific instances of the NVS register map for RXB
 * components in the ADRV9001 device.
 *
 * @details This array is used to reference specific RXB core instances in the
 * ADRV9001 device's NVS register map.
 ******************************************************************************/
static const adrv9001_BfNvsRegmapRxb_e nvsRegmapRxbInstances[] = {
    ADRV9001_BF_RXB1_CORE,
    ADRV9001_BF_RXB2_CORE
};


/***************************************************************************//**
 * @brief Retrieves the ADC control register value from the specified instance
 * of the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific ADC instance to
 * read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AdcControl_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x30), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC valid override value in the NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 8-bit unsigned integer representing the value to be set for
 * the ADC valid override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AdcValidOverride_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x53), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC valid override value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * ADC.
 * @param value A pointer to a uint8_t variable where the retrieved ADC valid
 * override value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AdcValidOverride_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x53), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the second high counter value in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the second high counter.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_Adcovrg2ndHighCounter_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x90), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the second high counter value from the ADRV9001 register
 * map.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumeration value representing the specific instance of
 * the register map.
 * @param value A pointer to a uint8_t variable where the retrieved counter
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_Adcovrg2ndHighCounter_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x90), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC high overflow exceeded counter in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcAdcHighOvrgExceededCounter_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x64), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC high overflow exceeded counter value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved counter
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcAdcHighOvrgExceededCounter_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x64), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC ADC low overflow exceeded counter in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcAdcLowOvrgExceededCounter_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x65), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC low overflow exceeded counter value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved counter
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcAdcLowOvrgExceededCounter_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x65), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain step for the ADC reset in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the gain step value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcAdcResetGainStep_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1bf), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC gain step value from a specific register for a given
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved gain step
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcAdcResetGainStep_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1bf), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the high counter value for the AGC ADC overrange in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcAdcovrgIp3HighCounter_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x7e), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the high counter value from the AGC ADC overrange register
 * for a specified instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved high counter
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcAdcovrgIp3HighCounter_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x7e), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low interrupt counter value for the AGC ADC overrange in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the low interrupt counter.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcAdcovrgLowInt0Counter_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x7f), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low interrupt counter value from the AGC ADC overrange
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved counter
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcAdcovrgLowInt0Counter_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x7f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC ADC overrange low interrupt 1 counter value in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value An 8-bit integer representing the value to be set for the AGC
 * ADC overrange low interrupt 1 counter.
 * @return Returns the status of the register write operation, indicating
 * success or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcAdcovrgLowInt1Counter_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x80), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low interrupt counter value from the AGC register for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC register.
 * @param value A pointer to a uint8_t variable where the retrieved counter
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcAdcovrgLowInt1Counter_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x80), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low frequency error mitigation mode for the AGC APD in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the low frequency error mitigation mode.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcApdLowFreqErrorMitigationMode_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x83), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low frequency error mitigation mode value from the AGC
 * APD register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC APD register.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcApdLowFreqErrorMitigationMode_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x83), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC attack delay value in the NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the AGC attack delay
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcAttackDelay_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x50), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC attack delay value from a specified register for a
 * given device instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC register.
 * @param value A pointer to a uint8_t variable where the retrieved AGC attack
 * delay value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcAttackDelay_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x50), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC auto gain lock delay for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the delay value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcAutoGainLockDelay_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x4f), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Auto Gain Control (AGC) lock delay value from a
 * specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcAutoGainLockDelay_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x4f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC BBDC current mode in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the AGC BBDC current mode.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcCurrentMode_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x14f), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC BBDC current mode value from a specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC BBDC.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcCurrentMode_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x14f), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the decimation value for the AGC BBDC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the decimation value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcDecimate_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x13e), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the decimation value from a specific register for the AGC
 * BBDC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved decimation
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcDecimate_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x13e), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC BBDC force round path configuration in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value A uint8_t value that specifies the configuration to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcForceRoundPath_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x156), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC BBDC force round path value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcForceRoundPath_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x156), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC BBDC force round path select value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the AGC BBDC force round path select.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcForceRoundPathSelect_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x156), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC BBDC force round path select value from a specified
 * register.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC BBDC.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcForceRoundPathSelect_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x156), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC BBDC load accumulator value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the AGC BBDC load accumulator.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcLoadAcc_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x147), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC BBDC load accumulator value from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcLoadAcc_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x147), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC BBDC load accumulator I value in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A 32-bit unsigned integer representing the value to be set in
 * the registers.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcLoadAccI_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x147), (value >> 16), 0xc, 0x2);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x144), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x143), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the accumulated I value from the AGC BBDC register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC BBDC register map.
 * @param value A pointer to a 32-bit unsigned integer where the accumulated I
 * value will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero). The accumulated I value is stored in the
 * location pointed to by the value parameter.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcLoadAccI_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x147), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x144), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x143), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC BBDC load accumulator Q value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer representing the value to be set in
 * the AGC BBDC load accumulator Q.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcLoadAccQ_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x147), (value >> 16), 0x30, 0x4);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x146), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x145), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the accumulated Q value from the AGC BBDC register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC BBDC register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved Q
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcLoadAccQ_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x147), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x146), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x145), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC BBDC M shift value in the ADRV9001 register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcMShift_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x13f), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC BBDC M shift value from a specified register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC register.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcMShift_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x13f), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the manual pause state for the AGC BBDC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value A uint8_t value indicating the desired manual pause state (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcManualPause_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x148), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC BBDC manual pause status from a specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC BBDC.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcManualPause_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x148), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the manual restore accumulator value for the AGC BBDC in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the manual restore accumulator.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcManualRestoreAcc_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x148), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcManualRestoreAcc_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x148), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC BBDC mask output in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcMaskOutput_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x13e), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC BBDC mask output value from a specific register for
 * a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC BBDC.
 * @param value A pointer to a uint8_t variable where the retrieved mask output
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcMaskOutput_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x13e), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC BBDC multiplier value in the ADRV9001 device's RXB
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit unsigned integer representing the multiplier value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcMultiplier_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x142), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC BBDC multiplier value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC BBDC multiplier.
 * @param value A pointer to a uint8_t variable where the retrieved multiplier
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcMultiplier_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x142), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC BBDC multiplier enable value in the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that indicates the multiplier enable setting to
 * be written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcMultiplierEnable_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x142), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC BBDC multiplier enable value from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved multiplier
 * enable value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcMultiplierEnable_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x142), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC BBDC pause state in the ADRV9001 device's RXB register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value A uint8_t value indicating the pause state to be set (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcPause_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x141), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC BBDC pause status from a specific register for a
 * given device instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcPause_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x141), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC BBDC reset state at gain change for a specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value A uint8_t value that indicates the reset state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcResetAtGainchange_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x140), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC BBDC reset status at gain change from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcResetAtGainchange_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x140), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC BBDC track input I register values for a specified
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer containing the value to be written to
 * the registers.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcTrackInputI_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x152), (value >> 16), 0x1, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x151), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x150), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC BBDC track input I value from the specified device
 * instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcTrackInputI_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x152), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x151), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x150), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC BBDC track input Q register values for a specified
 * instance of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer containing the value to be set in the
 * AGC BBDC track input Q registers.
 * @return Returns the status of the last write operation, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcTrackInputQ_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x155), (value >> 16), 0x1, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x154), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x153), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from a specific register map for the AGC BBDC
 * track input Q.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero). The retrieved 24-bit value is stored in the
 * location pointed to by the 'value' parameter.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcTrackInputQ_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x155), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x154), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x153), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC BBDC tracking enable value in the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value A uint8_t value that indicates the enable/disable state for AGC
 * BBDC tracking.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcTrackingEnable_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x140), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC BBDC tracking enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcTrackingEnable_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x140), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the AGC BBDC tracking information from the specified device
 * instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcTrackingISpi_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x14b), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x14a), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x149), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the AGC BBDC tracking value from the specified device
 * instance.
 *
 * @param device A pointer to the device structure used for communication.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the read operations, with the `value` pointer
 * containing the combined 24-bit result from the three register reads.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcTrackingQSpi_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x14e), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x14d), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x14c), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Updates the SPI readback value for the AGC BBDC in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the SPI readback update operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcUpdateSpiReadback_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x14f), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SPI readback value for the AGC BBDC register from the
 * specified device.
 *
 * @param device A pointer to the device structure used for communication.
 * @param instance An enumerated value representing the specific instance of the
 * AGC BBDC register.
 * @param value A pointer to a uint8_t variable where the readback value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcUpdateSpiReadback_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x14f), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the tracking word for the AGC BBDC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the tracking word.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcUpdateTrackingWord_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x140), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the tracking word from a specific register for the AGC BBDC
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved tracking
 * word will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcBbdcUpdateTrackingWord_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x140), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC gain value in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the gain value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcChangeGainIfAdcovrgHigh_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6e), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC gain value from a specific register for a given
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved gain value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcChangeGainIfAdcovrgHigh_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6e), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC gain threshold in the RXB register map for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit unsigned integer representing the gain value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcChangeGainIfUlbthHigh_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6e), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC gain value from a specific register for a given
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC register.
 * @param value A pointer to a uint8_t variable where the retrieved gain value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcChangeGainIfUlbthHigh_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6e), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC decrement gain step size in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the decrement gain step
 * size to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcDecrGainStepSize_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x42), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC decrement gain step size from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC register.
 * @param value A pointer to a uint8_t variable where the retrieved gain step
 * size will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcDecrGainStepSize_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x42), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC delay counter base rate for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the AGC delay counter base rate.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcDelayCounterBaseRate_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x4e), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC delay counter base rate from a specified register
 * and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcDelayCounterBaseRate_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x4e), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the digital saturation status from the AGC register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved saturation
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcDigSat_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3f), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC digital saturation exceeded counter in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns the status of the register write operation, indicating
 * success or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcDigSaturationExceededCounter_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x66), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC digital saturation exceeded counter value from a
 * specified register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved counter
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcDigSaturationExceededCounter_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x66), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC digital saturation gain step for a specified instance in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the gain step value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcDigsatGainStep_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x46), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the digital saturation gain step value from a specific
 * register for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved gain step
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcDigsatGainStep_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x46), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC dual-band enable field in the NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * AGC dual-band.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcDualbandEnable_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x83), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC dual-band enable status from a specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcDualbandEnable_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x83), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the lower index value for the AGC dual-band external table in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * AGC dual-band external table.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcDualbandExtTableLowerIndex_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x85), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the lower index value from the AGC dual-band extended table
 * for a specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC dual-band extended table.
 * @param value A pointer to a uint8_t variable where the retrieved lower index
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcDualbandExtTableLowerIndex_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x85), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the upper index value for the AGC dual-band external table in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * AGC dual-band external table.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcDualbandExtTableUpperIndex_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x84), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the upper index value from the AGC dual-band extended table
 * for a specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC dual-band register.
 * @param value A pointer to a uint8_t variable where the retrieved upper index
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcDualbandExtTableUpperIndex_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x84), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the high LNA threshold for the AGC dual-band receiver in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver register.
 * @param value An 8-bit unsigned integer representing the threshold value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcDualbandHighLnaThreshold_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x8e), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the high LNA threshold value from the AGC dual-band register
 * for a specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC dual-band register.
 * @param value A pointer to a uint8_t variable where the retrieved threshold
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcDualbandHighLnaThreshold_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x8e), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC dual-band index for Band A in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RXB.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the AGC dual-band index.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcDualbandIndexBandA_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x54), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC dual-band index for Band A from a specified device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * AGC register.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcDualbandIndexBandA_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x54), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC dual-band index override value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the AGC dual-band index override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcDualbandIndexOverride_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x55), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC dual-band index override value from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcDualbandIndexOverride_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x55), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC dual-band LNA step value in the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcDualbandLnaStep_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x8c), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC dual-band LNA step value from a specified register.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcDualbandLnaStep_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x8c), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low LNA threshold for the AGC dual-band in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the threshold value to be
 * set.
 * @return Returns the status of the register write operation, indicating
 * success or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcDualbandLowLnaThreshold_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x8f), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low LNA threshold value from the AGC dual-band register
 * for a specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC dual-band register.
 * @param value A pointer to a uint8_t variable where the retrieved low LNA
 * threshold value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcDualbandLowLnaThreshold_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x8f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the maximum index for the AGC dual-band in the ADRV9001 device's
 * RXB register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit unsigned integer representing the maximum index value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcDualbandMaxIndex_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x86), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the maximum index value from the AGC dual-band register for
 * a specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC dual-band register.
 * @param value A pointer to a uint8_t variable where the retrieved maximum
 * index value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcDualbandMaxIndex_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x86), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC dual-band power margin for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB (Receive Baseband) register map.
 * @param value An 8-bit unsigned integer representing the power margin value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcDualbandPwrMargin_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x8b), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power margin value from a specific register for the AGC
 * dual-band in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved power margin
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcDualbandPwrMargin_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x8b), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the auto gain lock configuration for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A uint8_t value indicating the desired state for the auto gain
 * lock.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcEnableAutoGainLock_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x92), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the auto gain lock status from a specific register for a
 * given instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved auto gain
 * lock status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcEnableAutoGainLock_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x92), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the digital saturation override for the AGC in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value A uint8_t value that indicates the desired state for the digital
 * saturation override.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcEnableDigsatOvrg_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x91), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC digital saturation override setting from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcEnableDigsatOvrg_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x91), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC fast recovery loop enable state in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value indicating the desired state to set for the AGC
 * fast recovery loop.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcEnableFastRecoveryLoop_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6e), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC fast recovery loop enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcEnableFastRecoveryLoop_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6e), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC enable gain change with pin control for a specified
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the gain change value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcEnableGainChangeWithPinControl_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x40), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC enable gain change value from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC register.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcEnableGainChangeWithPinControl_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x40), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC enable gain freeze configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value A uint8_t value that indicates the gain freeze setting to be
 * applied.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcEnableGainFreeze_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x91), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC Enable Gain Freeze value from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC register.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcEnableGainFreeze_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x91), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC enable gain index in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the gain index value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcEnableGainIndexUpdate_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x40), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC enable gain index from a specific register and
 * updates the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC register.
 * @param value A pointer to a uint8_t variable where the retrieved gain index
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcEnableGainIndexUpdate_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x40), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC Enable IP3 Optimization Threshold for a specified
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the threshold value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcEnableIp3OptimizationThreshold_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6e), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC Enable IP3 Optimization Threshold value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved threshold
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcEnableIp3OptimizationThreshold_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6e), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC enable reset to maximum gain in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the AGC enable reset.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcEnableResetToMaxgain_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x92), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC enable reset to max gain value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcEnableResetToMaxgain_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x92), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC gain value in the RXB register map for the specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit unsigned integer representing the gain value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcEnableSetGain_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x91), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC gain value from a specific register for a given
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved gain value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcEnableSetGain_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x91), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC gain freeze exit value in the ADRV9001 device's RXB
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RXB instance to
 * configure.
 * @param value An 8-bit unsigned integer representing the gain value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcEnableSetGainWGainFreezeExit_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x91), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC gain value from a specific register for a given
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved gain value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcEnableSetGainWGainFreezeExit_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x91), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC enable sync pulse for the gain counter in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value A uint8_t value that indicates the desired state (enabled or
 * disabled) for the AGC sync pulse.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcEnableSyncPulseForGainCounter_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6e), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC enable sync pulse value for the gain counter from a
 * specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcEnableSyncPulseForGainCounter_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6e), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC energy detect count in the ADRV9001 device's RXB NVS
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the AGC energy detect count.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcEnergyDetectCount_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x97), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC energy detect count from a specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcEnergyDetectCount_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x97), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC energy lost freeze value in the ADRV9001 device's RXB
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit integer representing the value to be set for the AGC
 * energy lost freeze.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcEnergyLostFreeze_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x91), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC energy lost freeze value from a specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcEnergyLostFreeze_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x91), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC energy lost threshold in the ADRV9001 device's RXB NVS
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register.
 * @param value An 8-bit unsigned integer representing the threshold value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcEnergyLostThreshold_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x93), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC energy lost threshold value from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved threshold
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcEnergyLostThreshold_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x93), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC fast attack settling delay in the ADRV9001 device's RXB
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the AGC fast attack settling delay.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcFastAttackSettlingDelay_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x95), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC fast attack settling delay value from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcFastAttackSettlingDelay_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x95), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the AGC fast attack state from a specified register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC fast attack state.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcFastAttackState_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3e), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC final overrange count in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcFinalOverrangeCount_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x96), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC final overrange count from a specific register in
 * the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved overrange
 * count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcFinalOverrangeCount_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x96), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC force freeze value in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the AGC force freeze.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcForceFreeze_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x92), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC force freeze value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC register.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcForceFreeze_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x92), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC Force Power Down Reset value in the ADRV9001 device's RXB
 * NVS register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcForcePdReset_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4a), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC Force Power Down Reset value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcForcePdReset_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4a), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the final settling step of the AGC full gain in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcFullGainFinalSettlingStep_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x93), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the final settling step of the AGC full gain from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcFullGainFinalSettlingStep_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x93), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC gain change synchronization update for a specified
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the new AGC gain value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcGainChangeSyncUpdate_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4a), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC gain change synchronization update value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcGainChangeSyncUpdate_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4a), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC gain index in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the AGC gain index to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcGainIndex_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x3d), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC gain index from a specified register for a given
 * device instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved AGC gain
 * index will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcGainIndex_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x3d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the AGC gain lock status from a specific register for a
 * given device instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved AGC gain
 * lock status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcGainLock_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3f), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC gain table step size in the ADRV9001 device's RXB NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB NVS register map.
 * @param value An 8-bit unsigned integer representing the step size value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcGainTableStepSize_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x95), (value >> 0), 0xe0, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC gain table step size from a specified register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC gain table.
 * @param value A pointer to a uint8_t variable where the retrieved step size
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcGainTableStepSize_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x95), &register_value, 0xe0, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC gain update counter in the NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer representing the value to be set in
 * the AGC gain update counter.
 * @return Returns the status of the last write operation, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcGainUpdateCounter_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6d), (value >> 16), 0x3f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x6c), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x6b), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC gain update counter value from the specified device
 * instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated type indicating the specific instance of the
 * NVS register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * counter value will be stored.
 * @return Returns the status of the last read operation, which indicates
 * success (0) or failure (non-zero). The retrieved AGC gain update
 * counter value is stored in the variable pointed to by `value`.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcGainUpdateCounter_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6d), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x6c), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x6b), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC gain lock exit count in the ADRV9001 device's RXB
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the AGC gain lock exit count.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcGainlockExitCount_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x99), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC gain lock exit count from a specific register for a
 * given device instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC gain lock.
 * @param value A pointer to a uint8_t variable where the retrieved exit count
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcGainlockExitCount_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x99), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC halt gain update counter on freeze for a specified
 * instance of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the AGC halt gain update counter.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcHaltGainUpdateCounterOnFreeze_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x41), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC halt gain update counter from a specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcHaltGainUpdateCounterOnFreeze_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x41), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC increment gain step size in the ADRV9001 device's RXB
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit unsigned integer representing the gain step size to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcIncrGainStepSize_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x42), (value >> 0), 0x38, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC increment gain step size from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved gain step
 * size will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcIncrGainStepSize_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x42), &register_value, 0x38, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the last gain index from the AGC register for a specified
 * instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * AGC register.
 * @param value A pointer to a uint8_t variable where the retrieved gain index
 * will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcLastGainIndex_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1a9), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC LL Blocker Freezes Gain Increment value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the AGC LL Blocker Freezes Gain Increment.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcLlBlockerFreezesGainIncr_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x92), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC LL Blocker Freezes Gain Increment value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcLlBlockerFreezesGainIncr_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x92), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC LLB gain step for a specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the gain step value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcLlbGainStep_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x47), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC LLB gain step value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC LLB gain step.
 * @param value A pointer to a uint8_t variable where the retrieved gain step
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcLlbGainStep_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x47), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC LLB threshold exceeded counter for a specified instance
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcLlbThresholdExceededCounter_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x63), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC LLB threshold exceeded counter value from a
 * specified register.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumeration value indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved counter
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcLlbThresholdExceededCounter_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x63), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC lock level in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the AGC lock level to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the AGC lock level setting operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcLockLevel_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x43), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC lock level from a specific register for a given
 * instance of the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC lock level to read.
 * @param value A pointer to a uint8_t variable where the retrieved AGC lock
 * level will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcLockLevel_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x43), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC low threshold prevent gain increment value in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the AGC low threshold.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcLowThsPreventGainInc_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6e), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC low threshold prevent gain increment value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcLowThsPreventGainInc_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6e), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC lower threshold value in the RXB NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB NVS register map.
 * @param value An 8-bit unsigned integer representing the threshold value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcLower0Threshold_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x61), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC lower threshold value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved threshold
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcLower0Threshold_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x61), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC lower threshold exceeded gain step in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the gain step value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcLower0ThresholdExceededGainStep_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x68), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC lower threshold exceeded gain step value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved gain step
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcLower0ThresholdExceededGainStep_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x68), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC lower 1 threshold value in the ADRV9001 device's RXB NVS
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit unsigned integer representing the threshold value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcLower1Threshold_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x71), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC lower 1 threshold value from a specific register for
 * a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC register.
 * @param value A pointer to a uint8_t variable where the retrieved threshold
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcLower1Threshold_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x71), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC lower 1 threshold exceeded gain step in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the gain step value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcLower1ThresholdExceededGainStep_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6a), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC lower 1 threshold exceeded gain step value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcLower1ThresholdExceededGainStep_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6a), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the manual gain index for the AGC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the gain index to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcManualGainIndex_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x4c), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC manual gain index from a specified register for a
 * given device instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved gain index
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcManualGainIndex_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x4c), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the manual gain index for the AGC in the RXB register map of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit unsigned integer representing the manual gain index to
 * be set.
 * @return Returns the status of the register write operation, indicating
 * success or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcManualGainIndexB_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x4d), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the manual gain index from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure used for communication with
 * the ADRV9001.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved gain index
 * will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcManualGainIndexB_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x4d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the manual gain index for the AGC in the RXB register map of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit unsigned integer representing the gain index value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcManualGainIndexElb_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x5f), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC manual gain index from a specified register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved gain index
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcManualGainIndexElb_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x5f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the manual gain index for the AGC in the RXB register map of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit unsigned integer representing the gain index value to
 * be set.
 * @return Returns an integer status code indicating the result of the register
 * write operation, where 0 typically indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcManualGainIndexElbB_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x60), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the manual gain index from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure used for communication with
 * the ADRV9001.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved gain index
 * will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcManualGainIndexElbB_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x60), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the manual gain index for the ORX AGC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the gain index to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcManualGainIndexOrx_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x5d), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC manual gain index from a specified register for the
 * ORX instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved gain index
 * will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcManualGainIndexOrx_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x5d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the manual gain index for the ORxB channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the gain index to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcManualGainIndexOrxB_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x5e), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the manual gain index for the ORxB channel from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value A pointer to a uint8_t variable where the retrieved gain index
 * will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcManualGainIndexOrxB_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x5e), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the manual gain control pin for the AGC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the manual gain control pin.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcManualGainPinControl_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4b), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the manual gain pin control value from a specific register
 * for the given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcManualGainPinControl_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4b), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC maximum gain index for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the maximum gain index to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcMaximumGainIndex_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x51), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC maximum gain index from a specified register for a
 * given device instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved maximum gain
 * index will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcMaximumGainIndex_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x51), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC minimum gain index in the ADRV9001 device's RXB register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit unsigned integer representing the gain index value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcMinimumGainIndex_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x52), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC minimum gain index from a specified register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved gain index
 * will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcMinimumGainIndex_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x52), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC Multiplier Clock Rate Compensation value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the AGC Multiplier Clock Rate Compensation.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcMultClkRateComp_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x7b), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC Multiplier Clock Rate Compensation value from a
 * specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcMultClkRateComp_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x7b), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC multitone IP3 index in the NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcMultitoneIp3Index_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x8a), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC multitone IP3 index value from a specific register.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcMultitoneIp3Index_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x8a), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC no unreg gain increment at maximum IP3 for a specified
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcNoUnrgGainIncAtMaxIp3_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x83), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC no unreg gain increment at maximum IP3 from a
 * specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcNoUnrgGainIncAtMaxIp3_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x83), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the maximum gain value for the AGC (Automatic Gain Control) in
 * the RXB (Receiver Baseband) register map of the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit unsigned integer representing the maximum gain value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcOptMaxGainWhenEnlost_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x91), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the maximum gain value from a specific register for the AGC
 * option when the ENLOST condition is met.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved maximum gain
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcOptMaxGainWhenEnlost_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x91), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the maximum gain for the AGC optimization in the RXB register map
 * of the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RXB instance to
 * configure.
 * @param value An 8-bit unsigned integer representing the maximum gain value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcOptimMaxGain_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x91), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the maximum gain value from the AGC register for a specified
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC register.
 * @param value A pointer to a uint8_t variable where the retrieved maximum gain
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcOptimMaxGain_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x91), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC optimal IP3 index in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the AGC optimal IP3 index.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcOptimalIp3Index_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x7d), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the optimal IP3 index from a specific register for a given
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved optimal IP3
 * index will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcOptimalIp3Index_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x7d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the maximum gain threshold for the AGC optimization in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the maximum gain
 * threshold value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcOptimizeMaxGainThreshold_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x96), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the maximum gain threshold value from a specific register
 * for the AGC optimization.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcOptimizeMaxGainThreshold_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x96), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC override freeze state in the ADRV9001 device's RXB
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RXB instance to
 * modify.
 * @param value A uint8_t value indicating the desired AGC override freeze
 * state.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcOvrgFreeze_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x91), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC override freeze value from a specified register for
 * a given device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcOvrgFreeze_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x91), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC override high gain step value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the AGC override high gain step.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcOvrgHighGainStep_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x45), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC override high gain step value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcOvrgHighGainStep_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x45), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC override low gain step value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the low gain step value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcOvrgLowGainStep_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x48), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low gain step value from the AGC override register for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC override register.
 * @param value A pointer to a uint8_t variable where the retrieved low gain
 * step value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcOvrgLowGainStep_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x48), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC override low gain step value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the gain step value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcOvrgLowInt0GainStep_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x81), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC override low gain step value from a specific
 * register for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved gain step
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcOvrgLowInt0GainStep_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x81), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC override low gain step value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the gain step value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcOvrgLowInt1GainStep_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x82), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC override low gain step value from a specific
 * register for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved gain step
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcOvrgLowInt1GainStep_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x82), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC override reset high count in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcOvrgResetpdHighCount_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x49), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the high count value of the AGC over-reset from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved high count
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcOvrgResetpdHighCount_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x49), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC peak threshold gain control mode for a specified instance
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB (Receive Baseband) register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the AGC peak threshold gain control mode.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcPeakThresholdGainControlMode_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6e), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC peak threshold gain control mode from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC peak threshold gain control.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcPeakThresholdGainControlMode_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6e), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC peak wait time in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the AGC peak wait time to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcPeakWaitTime_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x40), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC peak wait time value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved AGC peak
 * wait time will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcPeakWaitTime_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x40), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC reset counters in the ADRV9001 device's RXB register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit integer value to be written to the AGC reset counters.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcResetCounters_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x41), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC reset counters from a specified register and stores
 * the value.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * AGC reset counters.
 * @param value A pointer to a uint8_t variable where the retrieved counter
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcResetCounters_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x41), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC reset on RXON for a specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that indicates the desired state to set for the
 * AGC reset.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcResetOnRxon_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6e), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC reset status from a specific register for a given
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcResetOnRxon_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6e), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC reset on RXON gain index for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns the status of the register write operation, indicating
 * success or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcResetOnRxonGainIndex_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x5b), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC reset value from a specific register for a given
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcResetOnRxonGainIndex_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x5b), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC (Automatic Gain Control) configuration for a specified
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RXB.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the AGC setup register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcSetup_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4a), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC setup value from a specific register for a given
 * instance of the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC setup.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcSetup_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4a), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC slow loop settling delay in the ADRV9001 device's RXB
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit unsigned integer representing the settling delay value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcSlowLoopSettlingDelay_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x6f), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC slow loop settling delay value from a specific
 * register.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved settling
 * delay value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcSlowLoopSettlingDelay_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x6f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the AGC slow loop state from a specified register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC slow loop state.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcSlowLoopState_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3e), &register_value, 0x18, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC slow loop fast gain change block enable value in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcSlowloopFastGainChangeBlockEnable_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1bf), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC slow loop fast gain change block enable status from
 * a specified register.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC slow loop fast gain change block.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcSlowloopFastGainChangeBlockEnable_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1bf), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC slow loop freeze enable state in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value indicating the desired state to set for the AGC
 * slow loop freeze.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcSlowloopFreezeEnable_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x41), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC slow loop freeze enable status from a specified
 * register.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcSlowloopFreezeEnable_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x41), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC soft reset value in the RXB register map of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the AGC soft reset field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcSoftReset_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x41), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC soft reset value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcSoftReset_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x41), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC strong signal freeze value in the ADRV9001 NVS register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the AGC strong signal freeze.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcStrongSignalFreeze_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x92), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC strong signal freeze value from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcStrongSignalFreeze_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x92), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the stronger signal threshold for the AGC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the threshold value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcStrongerSignalThreshold_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x94), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the stronger signal threshold value from the AGC register
 * for a specified instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * AGC register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved threshold
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcStrongerSignalThreshold_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x94), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC UL signal power measurement delay in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value A 16-bit unsigned integer representing the delay value to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcUlSigPowerMeasDelay_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x73), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x72), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC UL signal power measurement delay from a specified
 * register map.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * measurement delay will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcUlSigPowerMeasDelay_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x73), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x72), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC UL signal power measurement duration in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the duration value to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcUlSigPowerMeasDuration_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x75), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x74), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC UL signal power measurement duration from the
 * specified register map.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated type indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * measurement duration will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the register read operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcUlSigPowerMeasDuration_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x75), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x74), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC ULB gain step for a specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the gain step value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcUlbGainStep_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x44), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC ULB gain step value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC register.
 * @param value A pointer to a uint8_t variable where the retrieved gain step
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcUlbGainStep_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x44), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC ULB threshold exceeded counter in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns the status of the register write operation, indicating
 * success or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcUlbThresholdExceededCounter_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x62), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC ULB threshold exceeded counter value from a
 * specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved counter
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcUlbThresholdExceededCounter_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x62), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain lock level during a burst for the specified AGC
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific AGC instance to
 * be updated.
 * @param value An 8-bit unsigned integer representing the gain lock level to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcUpdateSetgainLockLevelDuringBurst_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x92), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC gain lock level during burst mode from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC register.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcUpdateSetgainLockLevelDuringBurst_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x92), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC upper threshold exceeded gain step for a specified
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the gain step value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcUpper0ThresholdExceededGainStep_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x67), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC upper threshold exceeded gain step value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved gain step
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcUpper0ThresholdExceededGainStep_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x67), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC upper threshold value in the NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the threshold value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcUpper1Threshold_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x8d), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC Upper 1 Threshold value from a specified register
 * for a given device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved threshold
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcUpper1Threshold_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x8d), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC upper 1 threshold exceeded gain step in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the gain step value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcUpper1ThresholdExceededGainStep_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x69), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC upper 1 threshold exceeded gain step value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * AGC register.
 * @param value A pointer to a uint8_t variable where the retrieved gain step
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcUpper1ThresholdExceededGainStep_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x69), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC upper limit on gain increase for a specified lock level
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the AGC upper limit.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcUpperLimitOnGainIncreaseForLockLevel_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x98), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC upper limit on gain increase for a specified lock
 * level from a device register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * AGC register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcUpperLimitOnGainIncreaseForLockLevel_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x98), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC URANGE interval for a specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the value to be set in
 * the AGC URANGE interval.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcUrangeInterval0_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x7a), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x79), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC URANGE interval value from the specified register
 * map instance.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumeration value representing the specific instance of
 * the register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the register read operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcUrangeInterval0_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x7a), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x79), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC URANGE interval 1 multiplier in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value An 8-bit unsigned integer representing the multiplier value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcUrangeInterval1Mult_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x7b), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC URANGE interval 1 multiplier value from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcUrangeInterval1Mult_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x7b), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC URange interval multiplier in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcUrangeInterval2Mult_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x7c), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcUrangeInterval2Mult_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x7c), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC use counters for MGC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that specifies the setting to be applied to the
 * AGC use counters.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcUseCountersForMgc_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4b), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC use counters for MGC from a specific register and
 * stores the result in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_AgcUseCountersForMgc_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4b), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the high source select for the RXB APD in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_ApdHighSrcSelect_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x55), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the high source selection value from the RXB APD register
 * map for a specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value A pointer to a uint8_t variable where the retrieved high source
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_ApdHighSrcSelect_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x55), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low source selection for the RXB APD in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RXB.
 * @param value An 8-bit integer representing the value to be written to the
 * register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_ApdLowSrcSelect_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x55), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low source select value from the RXB APD register map
 * for a specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_ApdLowSrcSelect_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x55), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the slicer position value from a specific register for a
 * given instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value A pointer to a uint8_t variable where the retrieved slicer
 * position value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BandASlicerPosition_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a8), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the decimation value for the BBDC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the decimation value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcDecimate_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9a), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the decimation value from a specific register for the given
 * instance of the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved decimation
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcDecimate_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9a), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the decimation value for the BBDC ELB in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the decimation value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcElbDecimate_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c8), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcElbDecimate_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c8), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the NVS register map for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcElbMShift_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c9), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcElbMShift_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c9), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBDC ELB multiplier value in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the multiplier value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcElbMultiplier_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1cb), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBDC ELB multiplier value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved multiplier
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcElbMultiplier_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1cb), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBDC ELB multiplier enable field in the ADRV9001 NVS register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that indicates the desired state to set for the
 * BBDC ELB multiplier enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcElbMultiplierEnable_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ca), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBDC ELB multiplier enable value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcElbMultiplierEnable_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ca), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBDC ELB pause configuration in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcElbPause_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ca), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcElbPause_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ca), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBDC ELB tracking enable field in the NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value indicating the desired state to set for the BBDC
 * ELB tracking enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcElbTrackingEnable_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ca), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ELB tracking enable status from a specific register for
 * a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcElbTrackingEnable_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ca), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBDC force round path configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcForceRoundPath_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9c), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcForceRoundPath_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9c), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBDC force round path select value in the ADRV9001 NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcForceRoundPathSelect_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9c), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcForceRoundPathSelect_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9c), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the load accumulator value for a specified instance in the
 * ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the load accumulator.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcLoadAcc_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa3), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcLoadAcc_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa3), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the load accumulation value for the BBDC register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer representing the value to be set in
 * the BBDC load accumulation registers.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcLoadAccI_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa3), (value >> 16), 0xc, 0x2);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x9f), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xa0), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the accumulated I value from the BBDC load register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 32-bit unsigned integer where the accumulated I
 * value will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcLoadAccI_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa3), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x9f), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xa0), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBDC load accumulator value in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer representing the value to be loaded
 * into the accumulator.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcLoadAccQ_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa3), (value >> 16), 0x30, 0x4);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xa1), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xa2), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves and accumulates a 24-bit value from specific registers of a
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the accumulated
 * value will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcLoadAccQ_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa3), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xa1), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xa2), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the decimation value for the BBDC loopback in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the decimation value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcLoopbackDecimate_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x171), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the decimation value from a specific register for the BBDC
 * loopback in the ADRV9001 device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved decimation
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcLoopbackDecimate_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x171), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBDC loopback M shift value in the ADRV9001 device's RXB
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the BBDC loopback M shift.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcLoopbackMShift_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x172), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the loopback M shift value from a specific register for the
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcLoopbackMShift_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x172), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the loopback multiplier for the BBDC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the loopback multiplier
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcLoopbackMultiplier_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x173), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the loopback multiplier value from a specific register for a
 * given instance of the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved loopback
 * multiplier value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcLoopbackMultiplier_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x173), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the loopback multiplier enable value in the ADRV9001 NVS register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the loopback multiplier.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcLoopbackMultiplierEnable_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x174), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the loopback multiplier enable value from a specific
 * register for the given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcLoopbackMultiplierEnable_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x174), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the loopback pause configuration for the specified instance of
 * the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that indicates the loopback pause setting to be
 * applied.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcLoopbackPause_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x174), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the loopback pause value from a specific register for the
 * given instance of the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved loopback
 * pause value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcLoopbackPause_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x174), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the loopback tracking enable state for a specified instance in
 * the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value indicating the desired state to set for loopback
 * tracking (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcLoopbackTrackingEnable_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x174), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the loopback tracking enable status from a specific register
 * for the given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved loopback
 * tracking enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcLoopbackTrackingEnable_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x174), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBDC M shift value in the RXB register map for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcMShift_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9b), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBDC M-Shift value from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcMShift_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9b), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the manual pause state for the BBDC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value A uint8_t value indicating the manual pause state to be set (0
 * or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcManualPause_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa4), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the manual pause status from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcManualPause_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa4), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the manual restore accumulator value for a specified instance in
 * the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the manual restore accumulator.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcManualRestoreAcc_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa4), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcManualRestoreAcc_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa4), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBDC mask output for a specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the BBDC mask output.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcMaskOutput_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9a), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific masked output value from a register for a given
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved masked
 * output value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcMaskOutput_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9a), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBDC multiplier value in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the multiplier value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcMultiplier_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9e), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBDC multiplier value from a specific register for a
 * given instance of the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved multiplier
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcMultiplier_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9e), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBDC multiplier enable field in the NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit integer representing the value to be written to the
 * BBDC multiplier enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcMultiplierEnable_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9e), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBDC multiplier enable value from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved multiplier
 * enable value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcMultiplierEnable_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9e), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the decimation value for the BBDC ORX in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the BBDC ORX.
 * @param value An 8-bit unsigned integer representing the decimation value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcOrxDecimate_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x175), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the decimation value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcOrxDecimate_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x175), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBDC ORX M shift value in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be shifted
 * and set in the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcOrxMShift_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x176), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcOrxMShift_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x176), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the multiplier value for the BBDC ORX in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the multiplier value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcOrxMultiplier_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x177), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBDC ORX multiplier value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * BBDC ORX multiplier.
 * @param value A pointer to a uint8_t variable where the retrieved multiplier
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcOrxMultiplier_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x177), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the multiplier enable for the BBDC ORX in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value A 8-bit unsigned integer that specifies the multiplier enable
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcOrxMultiplierEnable_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x178), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the multiplier enable value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved multiplier
 * enable value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcOrxMultiplierEnable_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x178), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the pause state for the BBDC ORX in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value A uint8_t value indicating the pause state to be set (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcOrxPause_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x178), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcOrxPause_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x178), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the tracking enable value for the BBDC ORX in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the BBDC ORX.
 * @param value A uint8_t value that indicates the tracking enable state to be
 * set (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcOrxTrackingEnable_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x178), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the tracking enable status from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved tracking
 * enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcOrxTrackingEnable_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x178), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBDC pause state in the ADRV9001 device's RXB register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value A uint8_t value indicating the desired pause state to be set (0
 * or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcPause_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9d), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBDC pause status from a specific register for a given
 * instance of the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcPause_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9d), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBDC tracking enable state in the ADRV9001 device's RXB NVS
 * register.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RXB instance to
 * configure.
 * @param value A uint8_t value indicating the desired state for BBDC tracking
 * enable (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcTrackingEnable_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9c), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBDC tracking enable status from a specific register for
 * the given device instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcTrackingEnable_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9c), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBDC tracking reset accumulator on gain change for a
 * specified instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value A uint8_t value that indicates the new state to set for the BBDC
 * tracking reset.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcTrackingResetAccOnGainChange_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9c), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to BBDC tracking
 * reset on gain change from the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcTrackingResetAccOnGainChange_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9c), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the tracking word for the BBDC in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the BBDC.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the tracking word.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcUpdateTrackingWord_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9c), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the tracking word from a specific register for the given
 * instance of the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved tracking
 * word will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_BbdcUpdateTrackingWord_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9c), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the debug mode clock selection for the RX data source in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX data source.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_CssiRxDataSourceDbgModeClkSel_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d6), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the debug mode clock selection value from a specific
 * register for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_CssiRxDataSourceDbgModeClkSel_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d6), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the mask strobe enable for a specified instance in the ADRV9001
 * NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that indicates the mask strobe enable state to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_CssiRxMaskStrobeEnable_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d7), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the strobe enable mask value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved mask value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_CssiRxMaskStrobeEnable_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d7), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the strobe value for the CSSI RX mask in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the strobe value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_CssiRxMaskStrobeValue_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1d9), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the strobe value from a specific register for a given
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved strobe value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_CssiRxMaskStrobeValue_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1d9), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the current gain index from a specific register for a given
 * instance of the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved gain index
 * will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_CurrentGainIndex_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x2c), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the valid shift value for the DC signal processing output in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the shift value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgDpDoutShiftValid_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c1), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field and shifts it into a
 * provided variable.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved and shifted
 * register value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgDpDoutShiftValid_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c1), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DC offset shift value in the RXB register map for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit unsigned integer representing the shift value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgDpOutShift_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x15b), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DCSG DP output shift value from a specific register for
 * a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgDpOutShift_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x15b), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the falling RXON mask for a specified instance in the ADRV9001
 * NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that specifies the mask to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgFallingRxonMask_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c1), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DCSG falling RXON mask value from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved mask value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgFallingRxonMask_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c1), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DC gain mode for a specified instance in the ADRV9001 NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the DC gain mode field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgMode_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x15c), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DCSG mode value from a specific register for a given
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved DCSG mode
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgMode_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x15c), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DC offset for the RXB in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RXB instance to
 * configure.
 * @param value An 8-bit unsigned integer representing the DC offset value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgNsbOffset_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x15a), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DC offset value from a specific register for a given
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved DC offset
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgNsbOffset_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x15a), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DC offset for the RXB NSBS register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register.
 * @param value A 16-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgNsbs_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x158), (value >> 8), 0xf, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x157), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 16-bit value from specific registers of a device based on
 * the provided instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumeration value representing the specific instance of
 * the register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, with the 16-bit value
 * stored in the location pointed to by `value`.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgNsbs_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x158), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x157), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DC offset delay value in the RXB register map for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RXB instance to
 * configure.
 * @param value An 8-bit unsigned integer representing the delay value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgNsbsDly_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x159), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DCSG NSBS delay value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgNsbsDly_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x159), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the average exponential value for the DC signal gain in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmTLAvgExp_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x170), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the average exponential value from a specific register for a
 * given instance of the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmTLAvgExp_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x170), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DC offset average manual value in the ADRV9001 register map.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A 16-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmTLAvgMan_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x16f), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x16e), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the average value from two registers and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumeration value representing the specific instance of
 * the register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * average value will be stored.
 * @return Returns the status of the last register read operation, which
 * indicates success or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmTLAvgMan_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x16f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x16e), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the average exponential value for the DC signal gain in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmTUAvgExp_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x16d), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the average expected value from a specific register for a
 * given instance of the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmTUAvgExp_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x16d), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the average manual value for the DC signal gain in the RXB
 * register map of the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value A 16-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmTUAvgMan_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x16c), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x16b), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the average value from a specific register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the register read fails.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmTUAvgMan_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x16c), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x16b), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a series of register values from a device and stores them in
 * a provided array.
 *
 * @param device A pointer to the device context from which register values are
 * to be read.
 * @param instance An enumeration value that specifies the instance of the
 * register map to access.
 * @param value A pointer to a 2D array where the retrieved register values will
 * be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmAcc0IntermVal_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t (*value)[10])
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x166), &register_value, 0x3, 0x0);
    (*value)[0] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x165), &register_value);
    (*value)[1] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x164), &register_value);
    (*value)[2] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x163), &register_value);
    (*value)[3] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x162), &register_value);
    (*value)[4] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x161), &register_value);
    (*value)[5] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x160), &register_value);
    (*value)[6] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x15f), &register_value);
    (*value)[7] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x15e), &register_value);
    (*value)[8] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x15d), &register_value);
    (*value)[9] = register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DCSG PM accumulator number in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A 32-bit unsigned integer representing the value to be set in
 * the DCSG PM accumulator.
 * @return Returns the status of the last write operation, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmAcc0Num_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x17b), (value >> 16), 0x1f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x17a), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x179), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DCSG PM accumulator value from the specified register
 * map instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumeration value representing the specific instance of
 * the register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * accumulator value will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmAcc0Num_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17b), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x17a), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x179), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DC signal processing accumulator value in the ADRV9001
 * device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A 32-bit unsigned integer representing the value to be set in
 * the accumulator.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmAcc0NumB_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x17e), (value >> 16), 0x1f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x17d), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x17c), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from a specific register map for a given
 * instance of the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, which indicates
 * success (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmAcc0NumB_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17e), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x17d), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x17c), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DC signal processing accumulator number of reciprocal values
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A 32-bit unsigned integer containing the value to be set in the
 * registers.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmAcc0NumRecip_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x181), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x180), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x17f), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `DcsgPmAcc0NumRecip` register by reading
 * three consecutive registers and combining their values.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumeration value representing the specific instance of
 * the register map.
 * @param value A pointer to a 32-bit unsigned integer where the combined
 * register value will be stored.
 * @return Returns the status of the last register read operation, with the
 * combined value of the three registers stored in the location pointed
 * to by `value`.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmAcc0NumRecip_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x181), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x180), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x17f), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DC signal processing accumulator register values for a
 * specified instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A 32-bit unsigned integer containing the value to be split and
 * written to the registers.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmAcc0NumRecipB_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x184), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x183), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x182), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive registers for a
 * specified instance of the `adrv9001` device.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumeration value representing the specific instance of
 * the `adrv9001` device.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, where a value
 * of 0 indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmAcc0NumRecipB_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x184), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x183), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x182), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DCSG PM accumulator clear field in the ADRV9001 NVS register
 * map.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit value to be written to the DCSG PM accumulator clear
 * field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmAccClear_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x185), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DCSG PM accumulator value from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmAccClear_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x185), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DCSG PM clear mode for a specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmClearMode_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x185), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DCSG PM clear mode value from a specified register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmClearMode_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x185), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the intermediate value of the DCSG PM count from the
 * specified device and instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmCnt0IntermVal_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x169), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x168), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x167), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DC gain selection for the RXB in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RXB instance to
 * configure.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * DC gain selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmDsel_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x185), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DCSG PM DSEL value from a specific register for a given
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmDsel_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x185), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DCSG PM mode for a specified instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the DCSG PM mode.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmMode_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x185), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DCSG PM mode value from a specific register for a given
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmMode_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x185), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the power exponent value from a specific register for a
 * given instance of the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved power
 * exponent value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmPowExp0_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x186), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the power management value from the DCSG register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumeration value representing the specific instance of
 * the register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, where a value
 * of 0 indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmPowMan0_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x188), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x187), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the read strobe value for the DCSG PM register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the read strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmReadStrobe_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x185), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DCSG PM read strobe value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmReadStrobe_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x185), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DCSG PM status output from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved status value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgPmStatusOut_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x189), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DC gain shift value in the RXB NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB NVS register map.
 * @param value An 8-bit unsigned integer representing the DC gain shift value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgShift_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x15b), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DC offset shift value from a specific register for a
 * given instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved DC offset
 * shift value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgShift_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x15b), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DC gain shift ceiling value in the ADRV9001 register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the DC gain shift ceiling.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgShiftCeiling_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c3), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DCSG shift ceiling value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgShiftCeiling_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c3), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DC shift floor value in the RXB NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the DC shift floor.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgShiftFloor_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c4), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DC offset shift floor value from a specific register for
 * a given instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgShiftFloor_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c4), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DC gain shift left value in the RXB register map for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit unsigned integer representing the value to be shifted
 * and set in the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgShiftLeft_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c0), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a device register and
 * shifts it left by 8 bits.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated type indicating the specific instance of the
 * register map to read from.
 * @param value A pointer to a uint8_t variable where the shifted value will be
 * stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgShiftLeft_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c0), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DCSG shift left enable field in the RXB register map for the
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the DCSG shift left enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgShiftLeftEn_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c0), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the DCSG shift left enable field from a
 * specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgShiftLeftEn_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c0), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DCSG shift left selection value in the ADRV9001 NVS register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be shifted
 * and set in the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgShiftLeftSel_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c0), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DCSG shift left selection value from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgShiftLeftSel_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c0), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the output shift value from the DCSG slicer register for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved output shift
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgSlicerDpOutShift_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x16a), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves and shifts left the value of a specific register for the
 * DCSG slicer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register.
 * @param value A pointer to a uint8_t variable where the shifted register value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgSlicerDpOutShiftLeft_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c2), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the measured value of the DCSG slicer NSBS from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the measured value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DcsgSlicerNsbsMeasured_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c5), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the decibel power level for a specified instance in the ADRV9001
 * NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to modify.
 * @param value An 8-bit unsigned integer representing the power level to set,
 * which will be shifted before writing.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DecPower_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x3), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the decibel power value from a specific register for a given
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved power value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DecPower_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x3), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the digital gain for the RXB dec power in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RXB instance to
 * configure.
 * @param value An 8-bit unsigned integer representing the digital gain value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DecPowerAddDigGain_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x13), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the digital gain value from a specific register for a given
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved digital gain
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DecPowerAddDigGain_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x13), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power enable configuration for the RXB by writing to a
 * specific field in the device's register map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DecPowerEnSpiOrAgcSelect_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated type indicating the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DecPowerEnSpiOrAgcSelect_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable measurement power configuration for a specified
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value A uint8_t value representing the power measurement enable
 * configuration to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DecPowerEnableMeas_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the measurement enable status from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved measurement
 * enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DecPowerEnableMeas_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power input selection for a specified instance in the
 * ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the power input selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DecPowerInputSelect_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12), (value >> 0), 0x6, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power input selection value from a specific register for
 * a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DecPowerInputSelect_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12), &register_value, 0x6, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the linear power latch for the specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the power level to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DecPowerLatchLinearPower_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the linear power value from a specific register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved power value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DecPowerLatchLinearPower_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the linear power value from the specified device instance by
 * reading multiple registers.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * linear power value will be stored.
 * @return Returns the status of the last read operation, with the linear power
 * value stored in the provided pointer.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DecPowerLinearPower_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x5), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x4), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the decibel power logarithm shift value in the ADRV9001 NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be shifted
 * and set in the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DecPowerLogShift_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the decibel power logarithm shift value from a specific
 * register for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DecPowerLogShift_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the duration for power measurement in the ADRV9001 device's RXB
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit unsigned integer representing the duration value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DecPowerMeasurementDuration_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x13), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power measurement duration from a specific register for
 * a given instance of the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DecPowerMeasurementDuration_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x13), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the measurement duration for power state 5 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the measurement duration
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DecPowerState5MeasurementDuration_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x14), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the measurement duration value from a specific register for
 * a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved measurement
 * duration will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DecPowerState5MeasurementDuration_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x14), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the wait delay for the RXB dec power in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RXB instance to
 * configure.
 * @param value An 8-bit unsigned integer representing the wait delay value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DecPowerWaitDelay_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x15), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power wait delay value from a specific register for a
 * given instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DecPowerWaitDelay_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x15), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the secondary upper threshold for decimated data overload in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the threshold value to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DecimatedDataOverloadSecondaryUpperThreshold_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c6), (value >> 8), 0x3f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x5a), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the decimated data overload secondary upper threshold value
 * from a specified device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type indicating the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * threshold value will be stored.
 * @return Returns the status of the read operations, with the retrieved
 * decimated data overload secondary upper threshold value stored in the
 * provided pointer.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DecimatedDataOverloadSecondaryUpperThreshold_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c6), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x5a), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the field value for a specific instance in the NVS register map
 * of the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value to be written to the specified field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformFpEn_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x134), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformFpEn_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x134), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the exponent bits in the RXB register map for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RXB instance to
 * modify.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * exponent bits.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformFpExponentBits_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x134), (value >> 0), 0x6, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the exponent bits from a specific register for a given
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved exponent
 * bits will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformFpExponentBits_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x134), &register_value, 0x6, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the floating-point data format for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map to be modified.
 * @param value An 8-bit unsigned integer representing the floating-point data
 * format value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformFpFloatDataFormat_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x134), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific floating-point data format value from a register
 * for a given instance of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformFpFloatDataFormat_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x134), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the 'Hide Leading Ones' configuration for a specified instance in
 * the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformFpHideLeadingOnes_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x134), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformFpHideLeadingOnes_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x134), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the attenuation value for the RXB data form in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RXB instance to
 * configure.
 * @param value An 8-bit unsigned integer representing the attenuation value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformFpIntDataAtten_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x134), (value >> 0), 0xe0, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the attenuation value from a specific register for a given
 * instance of the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved attenuation
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformFpIntDataAtten_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x134), &register_value, 0xe0, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the NVS register map for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value to be written to the specified field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformFpNanEncEn_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x135), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformFpNanEncEn_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x135), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the floating-point rounding mode in the ADRV9001 NVS register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the rounding mode to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformFpRoundMode_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x135), (value >> 0), 0xe, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the floating-point rounding mode from a specific register
 * for a given instance of the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved rounding
 * mode will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformFpRoundMode_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x135), &register_value, 0xe, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the integer data format for a specified instance in the ADRV9001
 * NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformIntDataFormat_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x135), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the integer data format from a specific register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformIntDataFormat_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x135), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the integer data resolution for a specified instance in the
 * ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value An 8-bit unsigned integer representing the new data resolution
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformIntDataResolution_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x135), (value >> 0), 0x60, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the integer data resolution from a specific register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved resolution
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformIntDataResolution_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x135), &register_value, 0x60, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the embedded slicer configuration in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value An 8-bit integer representing the value to be written to the
 * register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformIntEmbedSlicer_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x136), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformIntEmbedSlicer_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x136), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the embedded slicer number in the RXB NVS register map for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit unsigned integer representing the slicer number to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformIntEmbedSlicerNumber_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x136), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the embedded slicer number from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved slicer
 * number will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformIntEmbedSlicerNumber_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x136), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the embedded slicer position in the RXB NVS register map for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit unsigned integer representing the slicer position to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformIntEmbedSlicerPos_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x136), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the embedded slicer position value from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved slicer
 * position value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformIntEmbedSlicerPos_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x136), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the even parity configuration for a specified RXB instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RXB instance to
 * configure.
 * @param value An 8-bit integer representing the parity value to set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformIntEvenParity_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x137), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the even parity value from a specific register for a given
 * instance of the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved even parity
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformIntEvenParity_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x137), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the parity support configuration for a specified instance of the
 * RXB register map in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit integer representing the parity support value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformIntParitySupport_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x137), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the parity support value from a specific register for a
 * given instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved parity
 * support value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformIntParitySupport_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x137), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the inverted RX I value in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the inverted RX I.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformInvertRxI_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x137), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the inverted RX I value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformInvertRxI_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x137), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the inverted RXQ configuration in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformInvertRxQ_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x137), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves and inverts the RXQ value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value A pointer to a uint8_t variable where the retrieved RXQ value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformInvertRxQ_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x137), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX output mask for a specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX block.
 * @param value An 8-bit unsigned integer representing the mask value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformMaskRxOutput_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x137), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the masked RX output value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX block.
 * @param value A pointer to a uint8_t variable where the retrieved masked RX
 * output value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformMaskRxOutput_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x137), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX monitor format I0 configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX monitor register.
 * @param value An 8-bit value to be written to the RX monitor format register.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformRxMonFormatI0_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x138), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and formats it
 * into a 16-bit value.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the formatted register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformRxMonFormatI0_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x138), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX monitor format I1 configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX monitor register.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformRxMonFormatI1_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x139), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and formats it
 * into a 16-bit value.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the formatted register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformRxMonFormatI1_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x139), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX monitor format I2 configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX monitor register.
 * @param value An 8-bit value to be written to the RX monitor format register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformRxMonFormatI2_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x13a), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and formats it
 * into a two-byte value.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the formatted register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformRxMonFormatI2_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x13a), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX monitor format for a specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX monitor format.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RX monitor format.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformRxMonFormatQ0_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x13b), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and formats it
 * into a 16-bit value.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the formatted register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformRxMonFormatQ0_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x13b), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX monitor format for a specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX monitor format.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RX monitor format.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformRxMonFormatQ1_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x13c), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and formats it
 * into a 16-bit value.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the formatted register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformRxMonFormatQ1_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x13c), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX monitor format for a specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX monitor format.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RX monitor format.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformRxMonFormatQ2_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x13d), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and formats it
 * into a 16-bit value.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the formatted register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DformRxMonFormatQ2_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x13d), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the digital DC offset tracking correction word I from the
 * specified device instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * correction word will be stored.
 * @return Returns the status of the read operations, with the retrieved digital
 * DC offset tracking correction word I stored in the variable pointed
 * to by 'value'.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DigitalDcOffsetTrackingCorrectionWordI_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xa5), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xa6), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa9), &register_value, 0x3, 0x0);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the digital DC offset tracking correction word Q from the
 * specified device instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * correction word will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any read operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DigitalDcOffsetTrackingCorrectionWordQ_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xa7), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xa8), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa9), &register_value, 0xc, 0x2);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the digital gain value from the RXB register map of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RXB instance to
 * read from.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * digital gain value will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DigitalGain_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2f), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Field_Read(device, (instance + 0x30), &register_value, 0xf, 0x0);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the digital phase delay for a specified instance in the ADRV9001
 * register map.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value An 8-bit unsigned integer representing the digital phase delay
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DigitalPhaseDelay_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1a3), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the digital phase delay value from a specific register for a
 * given instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver block.
 * @param value A pointer to a uint8_t variable where the retrieved digital
 * phase delay value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DigitalPhaseDelay_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1a3), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the dual-band control value for Band A from the specified
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DualbandControlBandA_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x31), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the dual-band gain value for Band A from the NVS register
 * map.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved gain value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_DualbandGainBandA_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x31), &register_value, 0xfc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the external LNA synchronization mode for a specified instance in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value A uint8_t value indicating the desired state for the external
 * LNA synchronization mode.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_EnableExtLnaSyncMode_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3c), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the external LNA synchronization mode setting from a
 * specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_EnableExtLnaSyncMode_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3c), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the external control register value for a specified instance
 * of the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_ExtControl_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2e), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the external LNA settling delay for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the settling delay value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_ExtLnaSettlingDelay_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x70), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the settling delay value for the external LNA from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved settling
 * delay value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_ExtLnaSettlingDelay_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x70), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain delay decrement value in the RXB register map of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RXB instance to
 * configure.
 * @param value A 16-bit unsigned integer representing the gain delay decrement
 * value to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_FeGainDelayDecr_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3b), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x3a), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain delay decrement value from the specified register
 * of the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_FeGainDelayDecr_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3b), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x3a), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain delay increment for a specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A 16-bit unsigned integer representing the value to be set for
 * the gain delay increment.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_FeGainDelayIncr_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x39), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x38), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain delay increment value from the specified register
 * map instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved gain
 * delay increment value will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_FeGainDelayIncr_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x39), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x38), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC control value in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the ADC control.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_ForceAdcControl_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x35), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC control value from a specific register for a given
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * ADC control.
 * @param value A pointer to a uint8_t variable where the retrieved ADC control
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_ForceAdcControl_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x35), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the digital gain for a specified instance of the RXB register map
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RXB instance to
 * configure.
 * @param value An 8-bit unsigned integer representing the digital gain value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_ForceDigitalGain_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x35), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the digital gain value from a specific register for a given
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved digital gain
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_ForceDigitalGain_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x35), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the dual-band control and gain for Band A in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_ForceDualbandControlAndGainBandA_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x35), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the dual-band control and gain settings for Band A from the
 * specified device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_ForceDualbandControlAndGainBandA_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x35), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the external control value for a specified instance in the
 * ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_ForceExtControl_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x35), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the external control value from a specific register for a
 * given instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_ForceExtControl_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x35), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the phase offset for a specified instance in the ADRV9001 NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for which the phase offset is being set.
 * @param value An 8-bit unsigned integer representing the phase offset value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_ForcePhaseOffset_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x35), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the forced phase offset value from the RXB register map for
 * a specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific RXB instance to
 * read from.
 * @param value A pointer to a uint8_t variable where the retrieved phase offset
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_ForcePhaseOffset_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x35), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the forced RX front-end gain for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value An 8-bit unsigned integer representing the gain value to set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_ForceRxFeGain_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x35), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the front-end gain value from a specific register for a
 * given instance of the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved gain value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_ForceRxFeGain_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x35), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TIA control value in the RXB register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific RXB instance to
 * configure.
 * @param value An 8-bit integer representing the TIA control value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_ForceTiaControl_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x35), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the TIA control value from a specific register for a given
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value A pointer to a uint8_t variable where the retrieved TIA control
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_ForceTiaControl_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x35), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the frequency hopping force selection in the ADRV9001 device's
 * RXB register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RXB instance to
 * configure.
 * @param value A uint8_t value that specifies the frequency hopping selection
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_FreqHopForceSel_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a4), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the frequency hopping force selection value from a specific
 * register for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved frequency
 * hopping value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_FreqHopForceSel_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a4), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain change pulse duration for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RXB.
 * @param value An 8-bit unsigned integer representing the gain change pulse
 * duration to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GainChangePulseDuration_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x37), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain change pulse duration from a specific register for
 * a given instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved gain change
 * pulse duration will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GainChangePulseDuration_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x37), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the minimum write interval for the gain FIFO in the RXB register
 * map of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value A 16-bit unsigned integer representing the minimum write
 * interval to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GainFifoMinWrIntvl_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xea), (value >> 8), 0x7, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xe9), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the minimum write interval for the gain FIFO from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * minimum write interval will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GainFifoMinWrIntvl_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xea), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xe9), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the analog gain value for the RXB GDCal register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register.
 * @param value An 8-bit unsigned integer representing the gain value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GdcalAnaGain1_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x16), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the analog gain value from a specific register for the given
 * instance of the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved gain value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GdcalAnaGain1_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x16), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the analog gain value for the RXB GDCal register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register.
 * @param value An 8-bit unsigned integer representing the gain value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GdcalAnaGain2_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x17), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the analog gain value from a specific register for a given
 * instance of the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved gain value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GdcalAnaGain2_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x17), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the digital gain value for the RXB GDCal register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register.
 * @param value An 8-bit unsigned integer representing the digital gain value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GdcalDigGain1_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x18), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the digital gain value from a specific register for the
 * given instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved digital gain
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GdcalDigGain1_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x18), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the digital gain value for the RXB GDCal register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register.
 * @param value An 8-bit unsigned integer representing the digital gain value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GdcalDigGain2_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x19), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the digital gain value from a specific register for a given
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved digital gain
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GdcalDigGain2_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x19), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GDCal flush period in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the flush period value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GdcalFlushPeriod_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1a), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GDCal flush period value from a specified register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved GDCal flush
 * period value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GdcalFlushPeriod_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1a), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain calibration input selection for a specified instance in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the gain calibration input selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GdcalInSel_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x20), (value >> 0), 0x60, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GdcalInSel_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x20), &register_value, 0x60, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GDCal power threshold in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the power threshold value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GdcalPowerThreshold_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GDCal power threshold value from a specific register for
 * a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved power
 * threshold value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GdcalPowerThreshold_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX calibration value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GdcalStartRxCal_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1e), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RX calibration value from a specific register for the
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX calibration.
 * @param value A pointer to a uint8_t variable where the retrieved calibration
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GdcalStartRxCal_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1e), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the transmit calibration start value in the ADRV9001 NVS register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that indicates the calibration start value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GdcalStartTxCal_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x24), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the TX calibration value from a specific register for the
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved calibration
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GdcalStartTxCal_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x24), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the GDCal state readback value from a specific register for
 * a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the readback value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GdcalStateReadback_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x20), &register_value, 0x18, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GDCal threshold for a specified instance in the ADRV9001 NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the GDCal threshold value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GdcalThreshold_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c), (value >> 8), 0xf, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1b), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GDCal threshold value from the NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved GDCal
 * threshold value will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GdcalThreshold_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1b), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GDCal threshold shift value in the NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the threshold shift value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GdcalThresholdShift_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GDCal threshold shift value from a specific register for
 * a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved GDCal
 * threshold shift value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GdcalThresholdShift_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the digital delay value from the RXB GDCal register map for
 * a specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RXB GDCal register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * digital delay value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operations failed.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GdcalTxAnaDigDelay_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x22), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x21), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the GDCal TX state from a specific register and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved GDCal TX
 * state will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GdcalTxState_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x23), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GDCal window size in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the GDCal window size to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GdcalWindowSize_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x20), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GDCal window size from a specific register for a given
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved GDCal window
 * size will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GdcalWindowSize_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x20), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC control value in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the ADC control register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GtAdcControl_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x28), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC control value from a specific register for a given
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved ADC control
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GtAdcControl_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x28), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the digital gain for the RXB in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RXB instance to
 * configure.
 * @param value A 16-bit unsigned integer representing the digital gain value to
 * be set.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GtDigitalGain_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x27), (value >> 4), 0x7f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Field_Write(device, (instance + 0x28), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the digital gain value from the RXB register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific RXB instance to
 * read from.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * digital gain value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GtDigitalGain_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x27), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Field_Read(device, (instance + 0x28), &register_value, 0xf, 0x0);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a value in the NVS register map for the dual-band A configuration
 * of the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific NVS register
 * instance to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the specified register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GtDualbandA_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1a7), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GtDualbandA_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1a7), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the dual-band control value in the NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the dual-band control register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GtDualbandControl_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x29), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the dual-band control register value from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GtDualbandControl_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x29), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the dual-band control for Band A in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map for the RXB.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GtDualbandControlBandA_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x36), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register for dual-band control in
 * the A band of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GtDualbandControlBandA_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x36), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the dual-band gain for a specified instance in the ADRV9001 NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for which the gain is being set.
 * @param value An 8-bit unsigned integer representing the gain value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GtDualbandGain_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x29), (value >> 0), 0xfc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the dual-band gain value from the RXB register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value A pointer to a uint8_t variable where the retrieved gain value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GtDualbandGain_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x29), &register_value, 0xfc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the dual-band gain for Band A in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the gain value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GtDualbandGainBandA_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x36), (value >> 0), 0xfc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the dual-band gain value for Band A from the specified
 * device's register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumeration value that specifies the instance of the
 * register map to read from.
 * @param value A pointer to a uint8_t variable where the retrieved gain value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GtDualbandGainBandA_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x36), &register_value, 0xfc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the external control value for a specified instance in the
 * ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the specified instance.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GtExtControl_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x26), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the external control value from a specific register for a
 * given instance of the `adrv9001` device.
 *
 * @param device A pointer to the device structure that represents the
 * `adrv9001` device.
 * @param instance An enumerated value representing the specific instance of the
 * `adrv9001` register map.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GtExtControl_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x26), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the phase offset for a specified receiver instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific receiver
 * instance to configure.
 * @param value A 16-bit integer representing the phase offset value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GtPhaseOffset_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x2b), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x2a), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the phase offset value from the RXB register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific RXB instance
 * from which to read the phase offset.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved phase
 * offset value will be stored.
 * @return Returns the status of the read operations, with the phase offset
 * value stored in the provided pointer.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GtPhaseOffset_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x2b), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x2a), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain value for the RX front-end in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value An 8-bit unsigned integer representing the gain value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GtRxFeGain_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x25), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain value from a specific register for the RX front-end
 * of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * RX block.
 * @param value A pointer to a uint8_t variable where the retrieved gain value
 * will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GtRxFeGain_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x25), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TIA control value in the RXB NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the TIA control field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GtTiaControl_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x28), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the TIA control value from the specified register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved TIA control
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GtTiaControl_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x28), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the uncorrectable parity error configuration in the ADRV9001
 * device's RXB register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RXB instance to
 * configure.
 * @param value A uint8_t value indicating the desired state for the
 * uncorrectable parity error.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GtUncorrectableParityError_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x34), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the uncorrectable parity error status from a specific
 * register for a given device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GtUncorrectableParityError_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x34), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the uncorrectable parity error address from a specific
 * register for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GtUncorrectableParityErrorAddr_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1be), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the uncorrectable parity error address clear value in the
 * ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 8-bit unsigned integer that represents the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GtUncorrectableParityErrorAddrClear_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x34), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to uncorrectable
 * parity error address clear from the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated type indicating the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_GtUncorrectableParityErrorAddrClear_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x34), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the high source selection for the RxB HB2 register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RxB.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_Hb2HighSrcSelect_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x55), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the high source selection value from the NVS register map
 * for a specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved high source
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_Hb2HighSrcSelect_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x55), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low source select for the Hb2 register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_Hb2LowSrcSelect_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x55), (value >> 0), 0xe0, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low source select value from the specified register of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_Hb2LowSrcSelect_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x55), &register_value, 0xe0, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low inversion state of the APD in the RXB register map for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value A uint8_t value that indicates the desired inversion state to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_InvertApdLow_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x55), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the inverted APD low value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_InvertApdLow_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x55), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock divider value for the LSSI ORX1 data source in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the clock divider value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_LssiOrx1DataSourceClkDivValue_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1d1), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1d0), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock divider value from the LSSI ORX1 data source
 * register for a specified instance.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved clock
 * divider value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_LssiOrx1DataSourceClkDivValue_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1d1), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1d0), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the LSSI ORX1 data source in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_LssiOrx1DataSourceClkSel_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d6), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value from a specific register for the
 * LSSI ORX1 data source.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_LssiOrx1DataSourceClkSel_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d6), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock divider value for the LSSI ORX2 data source in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the clock divider value
 * to be set.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_LssiOrx2DataSourceClkDivValue_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1d3), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1d2), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock divider value from the LSSI ORX2 data source
 * register for a specified instance.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved clock
 * divider value will be stored.
 * @return Returns the status of the last register read operation, which
 * indicates success (0) or failure (non-zero). The output value
 * contains the combined clock divider value from the two registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_LssiOrx2DataSourceClkDivValue_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1d3), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1d2), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the LSSI ORX2 data source in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value A 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_LssiOrx2DataSourceClkSel_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d6), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value from a specific register for the
 * LSSI ORX2 data source.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_LssiOrx2DataSourceClkSel_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d6), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock divider value for the LSSI ORX3 data source in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the clock divider value
 * to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_LssiOrx3DataSourceClkDivValue_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1d5), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1d4), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock divider value from the LSSI ORX3 data source
 * register for a specified instance.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved clock
 * divider value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the register read operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_LssiOrx3DataSourceClkDivValue_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1d5), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1d4), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the LSSI ORX3 data source in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_LssiOrx3DataSourceClkSel_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d6), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value from a specific register for the
 * LSSI ORX3 data source.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_LssiOrx3DataSourceClkSel_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d6), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock divider value for the LSSI RX data source in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the clock divider value
 * to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_LssiRxDataSourceClkDivValue_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1cf), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1ce), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock divider value from the LSSI RX data source
 * register for a specified instance.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * LSSI RX data source.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved clock
 * divider value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any read operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_LssiRxDataSourceClkDivValue_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1cf), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1ce), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the LSSI RX data source in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value representing the clock selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_LssiRxDataSourceClkSel_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d6), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value from a specific register for the
 * LSSI RX data source.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_LssiRxDataSourceClkSel_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d6), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the debug mode clock selection for the LSSI RX data source in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_LssiRxDataSourceDbgModeClkSel_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d6), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the debug mode clock selection value from a specific
 * register for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_LssiRxDataSourceDbgModeClkSel_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d6), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX mask strobe enable value in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map to be modified.
 * @param value A uint8_t value that indicates the mask strobe enable setting to
 * be applied.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_LssiRxMaskStrobeEnable_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d7), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI RX mask strobe enable value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_LssiRxMaskStrobeEnable_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d7), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX mask strobe value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value An 8-bit unsigned integer representing the strobe value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_LssiRxMaskStrobeValue_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1d8), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI RX mask strobe value from a specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_LssiRxMaskStrobeValue_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1d8), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reset mask for the NBDem counter 1 clock in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 8-bit unsigned integer that specifies the value to be written
 * to the reset mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_NbdemCounter1ClkResetbMask_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1cd), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_NbdemCounter1ClkResetbMask_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1cd), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO 50 MHz clock reset mask in the ADRV9001 device's RXB
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register.
 * @param value An 8-bit value to be written to the NCO 50 MHz clock reset mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_NbdemNco50ClkResetbMask_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1cd), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO 50 MHz clock reset mask value from a specific
 * register for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_NbdemNco50ClkResetbMask_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1cd), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reset mask for the NBDem resampler clock in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value A 8-bit unsigned integer that specifies the value to be written
 * to the reset mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_NbdemResamplerClkResetbMask_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1cd), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_NbdemResamplerClkResetbMask_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1cd), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR X selection force for the specified ORX1 instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific ORX1 instance
 * to configure.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * PFIR X selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_Orx1PfirXSelForce_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1da), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR X selection force value from a specific register
 * for the given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_Orx1PfirXSelForce_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1da), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR X selection value for the specified ORX1 instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific ORX1 instance
 * to configure.
 * @param value An 8-bit unsigned integer representing the PFIR X selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_Orx1PfirXSelValue_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1da), (value >> 0), 0x60, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR X selection value from a specific register for the
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved PFIR X
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_Orx1PfirXSelValue_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1da), &register_value, 0x60, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR X selection force value for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the PFIR X selection force.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_Orx2PfirXSelForce_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1db), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR X selection force value from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_Orx2PfirXSelForce_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1db), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR X selection value for the specified ORX2 instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific ORX2 instance
 * to configure.
 * @param value An 8-bit integer representing the PFIR X selection value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_Orx2PfirXSelValue_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1db), (value >> 0), 0x6, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR X selection value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved PFIR X
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_Orx2PfirXSelValue_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1db), &register_value, 0x6, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR X selection force value for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the PFIR X selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_Orx3PfirXSelForce_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1db), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR X selection force value from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_Orx3PfirXSelForce_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1db), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR X selection value for the specified ORX3 instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific ORX3 instance
 * to configure.
 * @param value An 8-bit unsigned integer representing the PFIR X selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_Orx3PfirXSelValue_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1db), (value >> 0), 0x60, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR X selection value from the specified register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved PFIR X
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_Orx3PfirXSelValue_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1db), &register_value, 0x60, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PCA gain control mode for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * PCA gain control mode.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_PcaGainControlMode_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x56), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PCA gain control mode from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved PCA gain
 * control mode will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_PcaGainControlMode_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x56), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PCA gain index offset in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the PCA gain index offset
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_PcaGainIndexOffset_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x57), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PCA gain index offset from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved PCA gain
 * index offset will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_PcaGainIndexOffset_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x57), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PCA gain step for a specified instance in the ADRV9001 NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the gain step value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_PcaGainStep_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x58), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PCA gain step value from a specific register for a given
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved PCA gain
 * step value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_PcaGainStep_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x58), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the manual gain mode for the PCA in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RXB.
 * @param value An 8-bit unsigned integer representing the gain mode value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_PcaUpdateManualGainMode_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x56), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the manual gain mode value from a specific register for a
 * given instance of the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved manual gain
 * mode value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_PcaUpdateManualGainMode_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x56), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the phase offset value from the RXB register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific RXB instance
 * from which to read the phase offset.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved phase
 * offset value will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_PhaseOffset_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x32), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x33), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain table value for a specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * gain table to be modified.
 * @param value An 8-bit unsigned integer representing the gain value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_ReadGainTable_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x34), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief This function reads a gain value from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB gain table.
 * @param value A pointer to a uint8_t variable where the read gain value will
 * be stored.
 * @return The function returns an integer status code indicating the success or
 * failure of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_ReadGainTable_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x34), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a shadow register value for a specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the shadow register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RegLoadShadow_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a4), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the shadow register value for a specified instance of the
 * RXB register map.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific RXB register
 * instance.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RegLoadShadow_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a4), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reset value for the RX gain index in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX block.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the reset on RX gain index.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_ResetOnRxonGainIndex_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x5c), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reset value for the RX gain index from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX block.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_ResetOnRxonGainIndex_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x5c), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC ADC reset mask in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC ADC.
 * @param value A uint8_t value that specifies the reset mask to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcAdcRstMask_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd1), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC ADC reset mask value from a specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC ADC.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcAdcRstMask_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd1), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC ADC overload mask in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the overload mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcAdcovrldmask_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd2), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC overload mask value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved ADC overload
 * mask value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcAdcovrldmask_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd2), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC calibration start value in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the calibration start
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcCalStart_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd2), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC calibration start value from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC calibration.
 * @param value A pointer to a uint8_t variable where the retrieved calibration
 * start value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcCalStart_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd2), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RFDC correction data for the I channel from the
 * specified device instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC correction register.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * correction data will be stored.
 * @return Returns the status of the last read operation, where a zero indicates
 * success and a non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcCorrDinI_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x10c), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x10b), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x10a), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RFDC correction data from the specified register map
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * correction data will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcCorrDinQ_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x10f), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x10e), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x10d), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RFDC correction output I value from the specified device
 * instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC correction output.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcCorrDoutI_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xae), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xad), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xac), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RFDC correction output value from the specified device
 * instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC correction output.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcCorrDoutQ_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xb1), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xb0), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xaf), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC correction write disable field in the ADRV9001 register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC correction register.
 * @param value A uint8_t value that indicates whether to enable (1) or disable
 * (0) the RFDC correction write.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcCorrWrDisable_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x109), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC correction write disable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC correction register.
 * @param value A pointer to a uint8_t variable where the retrieved status will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcCorrWrDisable_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x109), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RFDC control state from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC control state.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcCtrlState_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xb2), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a 24-bit value from a series of registers for a specified
 * instance of the device.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, with the
 * output value containing the combined 24-bit result from the three
 * registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcDcestDoutI_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xb5), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xb4), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xb3), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a 24-bit value from a specific register map by reading three
 * consecutive registers.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumeration value indicating the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcDcestDoutQ_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xb8), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xb7), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xb6), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC decimation selection for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC decimation selection.
 * @param value An 8-bit unsigned integer representing the decimation selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcDecSel_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd2), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC decimation selection value from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC decimation selection.
 * @param value A pointer to a uint8_t variable where the retrieved decimation
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcDecSel_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd2), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RFDC ELPBCK correction output for the IA channel from
 * the specified device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC to access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * correction output will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcElpbckCorrDoutIa_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12a), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x129), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x128), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a 24-bit value from a specific register map for the RFDC
 * Elpbck correction output I/Q.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated type indicating the specific instance of the
 * RFDC register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns a status code indicating the success or failure of the read
 * operations, while the retrieved 24-bit value is stored in the
 * location pointed to by `value`.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcElpbckCorrDoutIb_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x130), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x12f), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x12e), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a 24-bit value from a specific register map for the RFDC
 * Elpbck correction output.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated type indicating the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, with the output value
 * containing the combined 24-bit result from the three register reads.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcElpbckCorrDoutQa_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12d), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x12c), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x12b), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RFDC ELPBCK correction output value from the specified
 * device instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC to access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns a status code indicating success (0) or failure (non-zero) of
 * the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcElpbckCorrDoutQb_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x133), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x132), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x131), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC ELPBCK correction value for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC to configure.
 * @param value A 32-bit unsigned integer representing the correction value to
 * be set.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcElpbckCorrIa_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf8), (value >> 16), 0x1f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xf7), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xf6), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC ELPBCK correction I value from the specified device
 * instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC to access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * correction value will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero). The retrieved correction value is stored in
 * the variable pointed to by `value`.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcElpbckCorrIa_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf8), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xf7), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xf6), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC ELBCK correction I/Q values in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC configuration.
 * @param value A 32-bit unsigned integer containing the correction values to be
 * set, split into three parts.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcElpbckCorrIb_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xfe), (value >> 16), 0x1f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xfd), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xfc), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC ELPBCK correction I value from the specified device
 * instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC to access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * correction value will be stored.
 * @return Returns the status of the read operations, where a status of zero
 * indicates success and a non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcElpbckCorrIb_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xfe), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xfd), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xfc), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC ELPBCK correction QA value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register map.
 * @param value A 32-bit unsigned integer containing the value to be set, which
 * is divided into three parts for different registers.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcElpbckCorrQa_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xfb), (value >> 16), 0x1f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xfa), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xf9), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC Elpbck correction QA value from the specified
 * device instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC to access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcElpbckCorrQa_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xfb), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xfa), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xf9), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC Elpbck correction value for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC Elpbck correction.
 * @param value A 32-bit unsigned integer representing the correction value to
 * be set.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcElpbckCorrQb_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x101), (value >> 16), 0x1f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x100), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xff), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC Elpbck correction value from the specified device
 * instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC to access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * correction value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcElpbckCorrQb_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x101), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x100), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xff), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC estimation bit selection in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcEstBitselect_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd2), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC estimation bit selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC estimation.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcEstBitselect_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd2), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC estimation bit selection in the NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcEstBitselectLoid_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe6), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific bit field value from a register and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcEstBitselectLoid_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe6), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RFDC estimation done status from a specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumeration value indicating the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved status will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcEstDone_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xb9), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC FE gain selection in the ADRV9001 device's NVS register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the gain selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcFegainSel_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a5), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC FE gain selection value from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved gain
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcFegainSel_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a5), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC FFH mode in the ADRV9001 device's NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RFDC FFH mode.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcFfhMode_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd3), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC FFH mode value from a specific register for a given
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcFfhMode_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd3), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC force AHB A register value for a specified instance of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcForceAhbA_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x18a), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcForceAhbA_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x18a), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC force AHB B register value for a specified instance in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcForceAhbB_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x18a), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcForceAhbB_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x18a), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC force FS bit selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register map.
 * @param value A uint8_t value that specifies the bit selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcForceFsBitsel_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd3), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC Force FS Bit Selection value from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcForceFsBitsel_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd3), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC IDAC value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register map.
 * @param value An 8-bit unsigned integer representing the IDAC value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcForceIdac_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd3), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC IDAC value from a specific register for a given
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved IDAC value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcForceIdac_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd3), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC forget factor in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the value to be set for
 * the RFDC forget factor.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcForgetFac_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd0), (value >> 8), 0xf, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xcf), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC forget factor value from the specified device
 * instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC whose forget factor is being retrieved.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * forget factor value will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcForgetFac_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd0), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xcf), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC freeze state in the ADRV9001 device's NVS register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value indicating the freeze state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcFreeze_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd3), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC freeze status from a specific register for a given
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved freeze
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcFreeze_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd3), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC frequency select bits in the NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RFDC frequency select bits.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcFsBitsel_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd3), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC frequency select bits from a specific register for
 * a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcFsBitsel_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd3), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC frequency select bits in the NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcFsBitselB_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd3), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC frequency select bits from a specific register for
 * a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumeration value representing the specific instance of
 * the RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcFsBitselB_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd3), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RF Digital Converter gain control value from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * RF Digital Converter.
 * @param value A pointer to a uint8_t variable where the retrieved gain control
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcGainctrl_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xba), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RF Digital Converter (RFDC) gain index from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved gain index
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcGainindex_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xba), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC gain index offset in the NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the gain index offset to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcGtIndexOffset_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x102), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC gain index offset from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcGtIndexOffset_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x102), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC calibration value in the ADRV9001 device's NVS register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcIcal_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xbb), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC calibration value from a specified register for a
 * given device instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC calibration register.
 * @param value A pointer to a uint8_t variable where the retrieved calibration
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcIcal_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xbb), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC ICAL bypass configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC configuration.
 * @param value A uint8_t value indicating the bypass setting to be applied.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcIcalBypass_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd4), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC ICAL bypass value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcIcalBypass_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd4), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC Ical index selection in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RFDC Ical index selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcIcalIndexSel_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xbb), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC Ical index selection value from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcIcalIndexSel_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xbb), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RF Digital-to-Analog Converter (IDAC) value from the
 * specified instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RF Digital-to-Analog Converter.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved IDAC
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcIdacI_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xbd), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xbc), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF Digital-to-Analog Converter (IDAC) I forced value in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the value to be set for
 * the IDAC I forced.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcIdacIForced_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd6), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xd5), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RF Digital-to-Analog Converter (IDAC) I forced value
 * from the specified instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC to access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved IDAC
 * I forced value will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcIdacIForced_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd6), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xd5), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the forced value for the RFDC IDAC I register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register map.
 * @param value A 16-bit unsigned integer representing the value to be set in
 * the RFDC IDAC I register.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcIdacIForcedB_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xda), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xd9), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC IDAC I forced B value from the specified device
 * instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC to access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcIdacIForcedB_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xda), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xd9), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RF Digital-to-Analog Converter (IDAC) value from the
 * specified instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC IDAC to access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved IDAC
 * value will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcIdacQ_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xbf), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xbe), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the forced value for the RFDC IDAC Q channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A 16-bit unsigned integer representing the value to be set for
 * the RFDC IDAC Q channel.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcIdacQForced_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd8), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xd7), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the forced IDAC value for the RF digital-to-analog converter
 * from the specified device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RF digital-to-analog converter.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved IDAC
 * value will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcIdacQForced_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd8), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xd7), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the forced value for the RF Digital-to-Analog Converter (IDAC) of
 * a specified instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RF Digital-to-Analog Converter.
 * @param value A 16-bit unsigned integer representing the value to be set for
 * the IDAC.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcIdacQForcedB_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xdc), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xdb), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the forced value of the RF Digital-to-Analog Converter
 * (IDAC) for a specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcIdacQForcedB_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xdc), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xdb), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RFDC IIR correction value from the specified device
 * instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC to access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * correction value will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero). The retrieved RFDC IIR correction value is
 * stored in the variable pointed to by `value`.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcIirCorrI_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x105), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x104), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x103), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RFDC IIR correction value from the specified instance of
 * the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC whose correction value is being retrieved.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * correction value will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcIirCorrQ_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x108), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x107), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x106), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC index offset in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RFDC index offset.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcIndexOffset_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1a6), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC index offset value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC for which the offset is being retrieved.
 * @param value A pointer to a uint8_t variable where the retrieved RFDC index
 * offset value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcIndexOffset_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1a6), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC index selection in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RFDC index selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcIndexSel_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a5), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC index selection value from a specific register for
 * a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcIndexSel_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a5), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RFDC initialization status from a specific register for
 * a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcInitDone_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc0), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC I spectrum inversion configuration for a specified
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC configuration.
 * @param value A uint8_t value indicating the desired inversion state (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcInvertISpectrum_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c7), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC I spectrum inversion setting from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcInvertISpectrum_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c7), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC Invert Q Spectrum configuration for a specified instance
 * of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC configuration.
 * @param value A uint8_t value indicating the desired configuration for the
 * RFDC Invert Q Spectrum.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcInvertQSpectrum_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c7), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC Invert Q Spectrum value from a specified register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcInvertQSpectrum_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c7), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC LOID enable field in the NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * RFDC LOID.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLoidEn_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd4), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC LOID enable status from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLoidEn_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd4), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RFDC LOID FIFO status from the specified device
 * instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumeration value representing the specific instance of
 * the RFDC.
 * @param value A pointer to a 16-bit unsigned integer where the FIFO status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLoidFifoStatus_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xf5), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xf4), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC LOID interval in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RFDC LOID interval.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLoidIntvl_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd4), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC LOID interval value from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLoidIntvl_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd4), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLoidLog0_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xec), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumeration value that specifies which instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLoidLog1_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xed), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RFDC LOID log2 value from a specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved log2 value
 * will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLoidLog2_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xee), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLoidLog3_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xef), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLoidLog4_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf0), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumeration value representing the specific instance of
 * the register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLoidLog5_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf1), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLoidLog6_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf2), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLoidLog7_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf3), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC LOID threshold value in the NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the threshold value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLoidLthld_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe7), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC LO ID threshold value from a specific register for
 * a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved threshold
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLoidLthld_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe7), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC LOID UTHLD value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLoidUthld_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe8), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC LOID UTHLD value from a specified register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLoidUthld_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe8), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RFDC LPBCK correction output value for a specified
 * instance from the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC to access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * correction output value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLpbckCorrDoutIa_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x11e), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x11d), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x11c), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RFDC LPBCK correction output for the specified instance
 * by reading multiple registers.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC to access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * correction output will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLpbckCorrDoutIb_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x124), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x123), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x122), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RFDC LPBCK correction output value from the specified
 * device instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC to access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * correction output value will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLpbckCorrDoutQa_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x121), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x120), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x11f), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RFDC LPBCK correction output value from the specified
 * device instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC to access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * correction output value will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLpbckCorrDoutQb_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x127), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x126), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x125), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC LPBCK correction I value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register map.
 * @param value A 32-bit unsigned integer containing the value to be set, which
 * is split into three parts for different registers.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLpbckCorrIa_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x18d), (value >> 16), 0x1f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x18c), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x18b), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC LPBCK correction I value from the specified device
 * instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC to access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * correction value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLpbckCorrIa_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x18d), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x18c), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x18b), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC LPBCK correction I/Q value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register map.
 * @param value A 32-bit unsigned integer containing the correction value to be
 * set.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLpbckCorrIb_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x190), (value >> 16), 0x1f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x18f), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x18e), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC LPBCK correction I value from the specified device
 * instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC to access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * correction value will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLpbckCorrIb_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x190), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x18f), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x18e), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC LPBCK correction QA value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register map.
 * @param value A 32-bit unsigned integer representing the correction value to
 * be set.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLpbckCorrQa_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x193), (value >> 16), 0x1f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x192), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x191), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC LPBCK correction QA value from the specified device
 * instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC to access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLpbckCorrQa_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x193), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x192), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x191), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC LPBCK correction value in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register map.
 * @param value A 32-bit unsigned integer containing the correction value to be
 * set.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLpbckCorrQb_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x196), (value >> 16), 0x1f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x195), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x194), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC LPBCK correction value from the specified device
 * instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC to access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * correction value will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLpbckCorrQb_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x196), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x195), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x194), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC threshold value in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the threshold value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLthld_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xdd), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC threshold value from a specific register for a
 * given instance of the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register map.
 * @param value A pointer to a uint8_t variable where the retrieved threshold
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcLthld_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xdd), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the maximum gain index for the RFDC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value An 8-bit unsigned integer representing the gain index to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcMaxGainindx_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xde), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the maximum gain index from the RFDC register for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register.
 * @param value A pointer to a uint8_t variable where the retrieved maximum gain
 * index will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcMaxGainindx_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xde), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC memory reset field in the ADRV9001 register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map to be modified.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the RFDC memory reset field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcMemrst_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd4), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC memory reset value from a specified register for a
 * given device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcMemrst_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd4), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the minimum gain index for the RF digital converter in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RF digital converter.
 * @param value An 8-bit unsigned integer representing the gain index value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcMinGainindx_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xdf), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the minimum gain index from the RFDC register for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register.
 * @param value A pointer to a uint8_t variable where the retrieved minimum gain
 * index will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcMinGainindx_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xdf), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC threshold value in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the threshold value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcMthld_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xe0), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC threshold value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved threshold
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcMthld_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xe0), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC threshold value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC threshold register.
 * @param value An 8-bit unsigned integer representing the threshold value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcNthld_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe1), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC threshold value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved threshold
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcNthld_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe1), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC operational mode in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register map.
 * @param value An 8-bit unsigned integer representing the operational mode to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcOpmode_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd4), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC operational mode from a specific register for a
 * given device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC operational mode.
 * @param value A pointer to a uint8_t variable where the retrieved operational
 * mode value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcOpmode_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd4), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RFDC ORX correlation output for a specified instance by
 * reading multiple registers.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC ORX correlation output.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * correlation output will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcOrxCorrDoutIa_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x112), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x111), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x110), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RFDC ORX correlation output I/Q data from the specified
 * device instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC ORX correlation output.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * correlation output will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero). The retrieved correlation output is stored in
 * the variable pointed to by `value`.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcOrxCorrDoutIb_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x118), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x117), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x116), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a 24-bit value from a specific register map for the RFDC ORX
 * correlation output.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns a status code indicating success (0) or failure (non-zero) of
 * the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcOrxCorrDoutQa_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x115), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x114), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x113), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RFDC ORX correlation output value from the specified
 * device instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC ORX correlation output.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * correlation output value will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcOrxCorrDoutQb_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x11b), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x11a), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x119), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC ORX correction I value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC ORX correction.
 * @param value A 32-bit unsigned integer representing the correction value to
 * be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcOrxCorrIa_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x199), (value >> 16), 0x1f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x198), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x197), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC ORX correction I value from the specified device
 * instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC ORX correction.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * correction value will be stored.
 * @return Returns the status of the last read operation, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcOrxCorrIa_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x199), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x198), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x197), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC ORX correction I bias value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer containing the value to be set, which
 * is split across multiple registers.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcOrxCorrIb_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19c), (value >> 16), 0x1f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x19b), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x19a), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC ORX correction I value from the specified device
 * instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC ORX correction register.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * correction value will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero). The final value of the RFDC ORX correction I
 * is stored in the variable pointed to by `value`.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcOrxCorrIb_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19c), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x19b), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x19a), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC ORX correlation QA register values for a specified
 * instance of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC ORX correlation QA register.
 * @param value A 32-bit unsigned integer containing the value to be set in the
 * registers.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcOrxCorrQa_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19f), (value >> 16), 0x1f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x19e), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x19d), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC ORX correlation QA value from the specified device
 * instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC ORX correlation QA to access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * correlation QA value will be stored.
 * @return Returns the status of the last read operation, with a value of 0
 * indicating success and a non-zero value indicating an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcOrxCorrQa_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19f), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x19e), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x19d), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC ORX correction Qb value in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC ORX correction register.
 * @param value A 32-bit unsigned integer containing the value to be set in the
 * RFDC ORX correction registers.
 * @return Returns the status of the last write operation, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcOrxCorrQb_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a2), (value >> 16), 0x1f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1a1), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1a0), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC ORX correction value from the device's register
 * map.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumeration value representing the specific instance of
 * the RFDC ORX correction register.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * correction value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcOrxCorrQb_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a2), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1a1), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1a0), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC pause/resume mode in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register map.
 * @param value A uint8_t value indicating the desired pause/resume state (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcPauseResumeMode_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xeb), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC pause/resume mode value from a specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcPauseResumeMode_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xeb), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC soft reset value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register map.
 * @param value An 8-bit unsigned integer representing the soft reset value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcSoftRst_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd4), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC soft reset status from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved soft reset
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcSoftRst_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd4), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC SPI access selection in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RFDC SPI access selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcSpiAccessSel_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc7), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC SPI access selection value from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcSpiAccessSel_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc7), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC SPI access selection for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register map.
 * @param value An 8-bit value to be written to the register, indicating the SPI
 * access selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcSpiAccessSelB_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc7), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC SPI access selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcSpiAccessSelB_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc7), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC SPI address in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RFDC SPI address.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcSpiAddr_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc8), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC SPI address from a specified register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcSpiAddr_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc8), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC SPI data in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure used for communication.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register map.
 * @param value A 64-bit integer value to be written to the register map.
 * @return Returns an integer status code indicating the success or failure of
 * the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcSpiDataIn_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint64_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xce), (value >> 40));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xcd), (value >> 32));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xcc), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xcb), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xca), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xc9), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 48-bit value from a series of registers by reading them
 * sequentially.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumeration value representing the specific instance of
 * the RFDC.
 * @param value A pointer to a 64-bit integer where the retrieved value will be
 * stored.
 * @return Returns the status of the last register read operation, with a value
 * of 0 indicating success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcSpiDataIn_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint64_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xce), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xcd), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xcc), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xcb), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xca), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xc9), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a 48-bit value from a series of registers by reading them
 * sequentially.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated type indicating the specific instance of the
 * register map.
 * @param value A pointer to a 64-bit integer where the retrieved value will be
 * stored.
 * @return Returns the status of the last register read operation, where a value
 * of zero indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcSpiDataOut_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint64_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xc6), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xc5), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xc4), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xc3), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xc2), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xc1), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC SPI read value in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcSpiRd_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc7), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Reads a specific register value from the RFDC SPI and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t where the read register value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcSpiRd_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc7), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific RFDC SPI register value for a given instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific RFDC register
 * instance to be accessed.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcSpiWr_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc7), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the RFDC SPI and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcSpiWr_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc7), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC start configuration in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that specifies the RFDC start configuration to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcStart_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd1), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC start value from a specific register for a given
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved RFDC start
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcStart_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd1), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC update mode in the ADRV9001 device's NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the update mode to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcUpdateMode_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xeb), (value >> 0), 0x6, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC update mode from a specified register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcUpdateMode_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xeb), &register_value, 0x6, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC threshold value in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the threshold value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcUthld_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xe2), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC threshold value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved threshold
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcUthld_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xe2), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC VI scaling value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register map.
 * @param value A 16-bit unsigned integer representing the scaling value to be
 * set.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any of the write operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcViScaling_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe5), (value >> 8), 0xf, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xe4), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC VI scaling value from the specified device
 * instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC to access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * scaling value will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcViScaling_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe5), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xe4), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC threshold value in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the threshold value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcWthld_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xe3), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC threshold value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved threshold
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcWthld_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xe3), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDCO LOID bypass configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcoLoidBypass_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a4), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDCO LOID bypass value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RfdcoLoidBypass_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a4), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI default mode for a specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RSSI default mode.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiDefaultMode_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x10), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI default mode value from a specified register for a
 * given device instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved RSSI value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiDefaultMode_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x10), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI delay value in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the RSSI delay value to
 * be set.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any of the write operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiDelay_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf), (value >> 8), 0x7, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xd), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI delay value from the specified instance of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved RSSI
 * delay value will be stored.
 * @return Returns the status of the read operations, with `*value` containing
 * the combined RSSI delay value from two registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiDelay_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xd), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI measurement enable state in the ADRV9001 device's RXB
 * NVS register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RXB instance to
 * configure.
 * @param value A uint8_t value indicating the desired state for RSSI
 * measurement enable (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiEnableMeas_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x11), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI measurement enable status from a specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiEnableMeas_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x11), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI input selection for a specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for which the RSSI input selection is being
 * set.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RSSI input selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiInputSelect_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf), (value >> 0), 0x60, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI input selection value from a specified register for
 * a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved RSSI input
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiInputSelect_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf), &register_value, 0x60, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI log shift value in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RSSI log shift.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiLogshift_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x10), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI log shift value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved RSSI log
 * shift value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiLogshift_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x10), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI measurement duration for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the RSSI measurement
 * duration to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiMeasurementDuration0_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x7), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI measurement duration from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved RSSI
 * measurement duration will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiMeasurementDuration0_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x7), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI measurement duration for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the RSSI measurement
 * duration value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiMeasurementDuration1_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x7), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI measurement duration from a specific register in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved RSSI
 * measurement duration will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiMeasurementDuration1_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x7), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI measurement duration for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the duration value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiMeasurementDuration2_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x8), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI measurement duration from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved RSSI
 * measurement duration will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiMeasurementDuration2_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x8), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI measurement duration for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the duration value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiMeasurementDuration3_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x8), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI measurement duration from a specific register in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved RSSI
 * measurement duration will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiMeasurementDuration3_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x8), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI mode select field in the NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RSSI mode select field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiModeSelect_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x10), (value >> 0), 0x1c, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI mode selection value from a specified register for
 * a given device instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved RSSI mode
 * selection value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiModeSelect_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x10), &register_value, 0x1c, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI offset value in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the RSSI offset value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiOffset_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x11), (value >> 0), 0xfe, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI offset value from a specified register for a given
 * device instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved RSSI offset
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiOffset_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x11), &register_value, 0xfe, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RSSI preamble value from the specified register map
 * instance.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved RSSI
 * preamble value will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiPreamble_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2), &register_value, 0x4, 0x2);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RSSI symbol value from a specified register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved RSSI
 * symbol value will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiSymbol_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x0), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2), &register_value, 0x1, 0x0);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI wait time in the ADRV9001 device's NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the RSSI wait time to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the operations performed.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiWaitTime_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf), (value >> 8), 0x18, 0x3);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xe), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI wait time value from the specified instance of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved RSSI
 * wait time will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiWaitTime_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf), &register_value, 0x18, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xe), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI weighted multiplier for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RSSI weighted multiplier.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiWeightedMultiplier0_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x9), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI weighted multiplier value from a specified register
 * for a given device instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiWeightedMultiplier0_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x9), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI weighted multiplier for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RSSI weighted multiplier.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiWeightedMultiplier1_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xa), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the weighted multiplier value from a specific register for
 * the given instance of the device.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved weighted
 * multiplier value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiWeightedMultiplier1_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xa), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI weighted multiplier for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RSSI weighted multiplier.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiWeightedMultiplier2_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xb), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the weighted multiplier value from a specific register for
 * the given instance of the device.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved weighted
 * multiplier value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiWeightedMultiplier2_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xb), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI weighted multiplier for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RSSI weighted multiplier.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiWeightedMultiplier3_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xc), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI weighted multiplier value from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RssiWeightedMultiplier3_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xc), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX Band A enable state in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map to modify.
 * @param value A uint8_t value indicating the enable state to set (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RxBandAEnable_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xaa), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RX Band A enable status from a specific register for the
 * given device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX Band A register.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RxBandAEnable_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xaa), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reset mask for the RxDpGainComp9 register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the reset mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RxDpGainComp9ResetbMask_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1cd), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RxDpGainComp9ResetbMask_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1cd), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the front-end gain value from a specific register for a
 * given instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved gain value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RxFeGain_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x2d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the analog digital delay value from the RX gain calibration
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX gain calibration.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved delay
 * value will be stored.
 * @return Returns the status of the read operations, with *value containing the
 * combined 16-bit delay value from two registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RxGdcalAnaDigDelay_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x20), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1f), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX NBWB selection in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NBWB selection.
 * @param value A uint8_t value representing the selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RxNbwbSel_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xaa), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided variable.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumeration value indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RxNbwbSel_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xaa), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX NCO 13 clock reset value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RX NCO 13 clock reset.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RxNco13ClkReset_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1cc), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO13 clock reset value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock reset
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RxNco13ClkReset_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1cc), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX NCO 13 clock reset mask in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RxNco13ClkResetbMask_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1cd), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxNco13ClkResetbMask` field from a
 * specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RxNco13ClkResetbMask_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1cd), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR X selection force value in the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RxPfirXSelForce_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1da), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR X selection force value from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RxPfirXSelForce_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1da), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR X selection value in the RX register map for the
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer representing the PFIR X selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RxPfirXSelValue_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1da), (value >> 0), 0x6, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR X selection value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved PFIR X
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RxPfirXSelValue_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1da), &register_value, 0x6, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX TIA profile in the ADRV9001 device's NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX TIA profile.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RX TIA profile.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RxTiaProfile_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x59), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RX TIA profile value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX TIA profile
 * instance to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RxTiaProfile_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x59), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX TIA profile value in the ADRV9001 device's NVS register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX TIA profile.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RX TIA profile.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RxTiaProfileVal_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x59), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RX TIA profile value from a specific register for the
 * given device instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX TIA profile.
 * @param value A pointer to a uint8_t variable where the retrieved profile
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RxTiaProfileVal_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x59), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RXFE valid delay for a specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit unsigned integer representing the delay value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RxfeValidDelay_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3c), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RXFE valid delay value from a specific register for a
 * given instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value A pointer to a uint8_t variable where the retrieved RXFE valid
 * delay value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RxfeValidDelay_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3c), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RXFE valid override value in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that specifies the RXFE valid override to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RxfeValidOverride_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x53), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RXFE valid override value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RxfeValidOverride_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x53), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain compensation input selection for a specified instance in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the gain compensation input selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RxfuncGainCompInSel_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a8), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RX function gain compensation input selection value from
 * a specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX function.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RxfuncGainCompInSel_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a8), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the slicer input selection for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * slicer input selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RxfuncSlicerInSel_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a8), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the slicer input selection value from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_RxfuncSlicerInSel_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a8), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the slicer position offset in the NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the slicer position
 * offset to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SlicerPositionOffset_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xab), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the slicer position offset from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved slicer
 * position offset will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SlicerPositionOffset_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xab), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific register in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the specified register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare0_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1aa), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare0_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1aa), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare1_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1ab), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the Software Spare 1 register from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare1_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1ab), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare10_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1b4), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare10_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1b4), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific register in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the specified register.
 * @return Returns an integer status code indicating the result of the register
 * write operation, where a value of 0 typically indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare11_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1b5), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare11_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1b5), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific register in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the specified register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare12_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1b6), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare12_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1b6), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Software Spare 13 register for a specified
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare13_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1b7), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumeration value that specifies which instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare13_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1b7), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific register in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the specified register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare14_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1b8), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare14_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1b8), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Software Spare 15 register for a specified
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare15_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1b9), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare15_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1b9), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Software Spare 16 register for a specified
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare16_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1ba), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the Software Spare 16 register from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare16_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1ba), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific register in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the specified register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare17_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1bb), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value from a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare17_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1bb), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Software Spare 18 register for a specified
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare18_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1bc), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare18_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1bc), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Software Spare 19 register for a specified
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare19_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1bd), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare19_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1bd), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific register in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the specified register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare2_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1ac), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare2_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1ac), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific register in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the specified register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare3_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1ad), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the ADRV9001 device
 * and stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare3_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1ad), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific register in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the specified register.
 * @return Returns an integer status code indicating the result of the register
 * write operation, where a value of 0 typically indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare4_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1ae), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the ADRV9001 device
 * and stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare4_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1ae), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Software Spare 5 register for a specified
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare5_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1af), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare5_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1af), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Software Spare 6 register for a specified
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare6_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1b0), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare6_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1b0), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Software Spare 7 register for a specified
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare7_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1b1), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare7_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1b1), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Software Spare 8 register for a specified
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare8_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1b2), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare8_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1b2), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Software Spare 9 register for a specified
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare9_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1b3), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SoftwareSpare9_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1b3), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the freeze mask for the RFDC LNAP in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that specifies the freeze mask to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SpiRfdcLnapFreezeMask_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xaa), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the freeze mask value from a specific register for the RFDC
 * LNAP in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved freeze mask
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_SpiRfdcLnapFreezeMask_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xaa), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the TIA control value from the RXB register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific RXB instance to
 * read from.
 * @param value A pointer to a uint8_t variable where the retrieved TIA control
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_TiaControl_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x30), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TIA valid override value in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that specifies the TIA valid override to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_TiaValidOverride_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x53), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the TIA valid override value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_TiaValidOverride_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x53), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain index for a specified instance of the RXB register map
 * using a value from another channel.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXB register map.
 * @param value An 8-bit unsigned integer representing the gain index value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_UseGainIndexFromAnotherChannel_Set(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x41), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain index from a specified channel's register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved gain index
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRxb_UseGainIndexFromAnotherChannel_Get(void *device,
    adrv9001_BfNvsRegmapRxb_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x41), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


#endif // __ADRV9001_BF_NVS_REGMAP_RXB_H__