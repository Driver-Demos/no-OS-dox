/**
 * \file
 * \brief BitField accessors for nvs_regmap_core_1
 *
 * Autogenerated with yoda-gen 1.1.0. Do not modify
 *
 * \copyright Copyright (c) 2020 Analog Devices, Inc. All Rights Reserved.
 * This software is proprietary to Analog Devices, Inc. and its licensors.
 */

 #ifndef __ADRV9001_BF_NVS_REGMAP_CORE_1_H__
 #define __ADRV9001_BF_NVS_REGMAP_CORE_1_H__

#include "adrv9001_bf_hal.h"



/***************************************************************************//**
 * @brief Sets the value of the Analog Spare 0 register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AnalogSpare0_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x197), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AnalogSpare0_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x197), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Analog Spare 1 register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AnalogSpare1_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x198), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AnalogSpare1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x198), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Analog Spare 10 register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns the status of the register write operation, indicating
 * success or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AnalogSpare10_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x1a1), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value from a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AnalogSpare10_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1a1), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Analog Spare 11 register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AnalogSpare11_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x1a2), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AnalogSpare11_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1a2), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Analog Spare 12 register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AnalogSpare12_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x1a3), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value from a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AnalogSpare12_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1a3), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `AnalogSpare13` register in the `adrv9001`
 * device.
 *
 * @param device A pointer to the device structure representing the `adrv9001`
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the `AnalogSpare13` register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AnalogSpare13_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x1a4), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value from a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AnalogSpare13_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1a4), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Analog Spare 14 register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AnalogSpare14_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x1a5), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value from a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AnalogSpare14_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1a5), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Analog Spare 2 register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AnalogSpare2_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x199), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AnalogSpare2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x199), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Analog Spare 3 register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AnalogSpare3_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x19a), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AnalogSpare3_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x19a), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Analog Spare 4 register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AnalogSpare4_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x19b), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value from a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AnalogSpare4_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x19b), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Analog Spare 5 register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AnalogSpare5_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x19c), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value from a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AnalogSpare5_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x19c), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Analog Spare 6 register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AnalogSpare6_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x19d), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value from a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AnalogSpare6_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x19d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Analog Spare 8 register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the Analog Spare 8 register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AnalogSpare8_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x19f), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AnalogSpare8_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x19f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `AnalogSpare9` register in the `adrv9001`
 * device.
 *
 * @param device A pointer to the device structure representing the `adrv9001`
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the `AnalogSpare9` register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AnalogSpare9_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x1a0), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AnalogSpare9_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1a0), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief The `adrv9001_NvsRegmapCore1_AnalogSpareReadback0_Get` function reads
 * a specific register value from a device and stores it in the provided
 * value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a `uint8_t` variable where the read register value
 * will be stored.
 * @return The function returns an integer status code indicating the success or
 * failure of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AnalogSpareReadback0_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x19e), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Reads a specific register value from the device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the read register value
 * will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AnalogSpareReadback1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1a6), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ARM clock auto-align configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * ARM clock auto-align.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ArmClkAutoAlign_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1e0), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ArmClkAutoAlign_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1e0), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ARM clock divider value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock divider value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ArmClkDivValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x1df), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ARM clock divider value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * divider value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ArmClkDivValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1df), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ARM clock load bypass configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * ARM clock load bypass.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ArmClkLoadBypass_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1e0), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ARM clock load bypass value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock load
 * bypass value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ArmClkLoadBypass_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1e0), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ARM IRQ extended enable register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that specifies the enable state for the ARM IRQ
 * extended functionality.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ArmIrqExtendEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1e2), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the extended IRQ enable status from a specific register of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved IRQ enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ArmIrqExtendEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1e2), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the IRQ extend mode for the ADRV9001 device by writing a
 * specified value to a specific register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the IRQ extend mode register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ArmIrqExtendMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1e2), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the extended mode value from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ArmIrqExtendMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1e2), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the IRQ extend ratio for the ADRV9001 device by writing a
 * specified value to a specific register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the IRQ extend ratio to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ArmIrqExtendRatio_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1e1), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the extended ratio value from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ArmIrqExtendRatio_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1e1), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ARM clock to reference clock switch enable state in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to set for the
 * ARM clock reference clock switch.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Armclk2RefClkSwitchEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1f2), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Armclk2RefClkSwitchEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1f2), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low line termination value for the auxiliary channel in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the low line termination
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Aux1LoLineRTerm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x15f), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low line termination value from a specific register of
 * the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved low line
 * termination value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Aux1LoLineRTerm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x15f), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the auxiliary low line receive buffer power down state for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the power down state to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Aux1LoLineRcvBufPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x15f), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific value from a hardware register and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Aux1LoLineRcvBufPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x15f), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias power down for the auxiliary low line termination in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the bias power down value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Aux1LoLineTermBiasPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x15f), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias power-down status of the auxiliary line termination
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved bias
 * power-down status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Aux1LoLineTermBiasPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x15f), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the auxiliary low line termination enable state for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the termination enable state to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Aux1LoLineTermEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x15f), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low line termination enable status from a specific
 * register of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Aux1LoLineTermEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x15f), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the auxiliary low line termination value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the low line termination.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Aux2LoLineRTerm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x160), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Aux2LoLineRTerm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x160), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the auxiliary low line receive buffer power down state for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the power down state to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Aux2LoLineRcvBufPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x160), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific value from a hardware register and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used for hardware
 * communication.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Aux2LoLineRcvBufPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x160), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias power down for the auxiliary low line termination in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the bias power down value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Aux2LoLineTermBiasPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x160), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias power-down status of the auxiliary low line
 * termination from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved bias power-
 * down status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Aux2LoLineTermBiasPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x160), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the auxiliary 2 low line termination enable configuration for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Aux2LoLineTermEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x160), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the auxiliary line termination enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved line
 * termination enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Aux2LoLineTermEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x160), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the auxiliary ADC0 clock enable state in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the desired state of the auxiliary
 * ADC0 clock enable (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AuxAdc0ClockEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xb), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock enable status of the auxiliary ADC0 from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AuxAdc0ClockEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xb), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable state for the auxiliary ADC1 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the clock enable state to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the clock enable operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AuxAdc1ClockEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xb), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock enable status of the auxiliary ADC1 from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AuxAdc1ClockEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xb), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable state for the auxiliary ADC2 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the clock enable state to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the clock enable operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AuxAdc2ClockEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xb), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock enable status of the auxiliary ADC2 from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AuxAdc2ClockEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xb), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable state for the auxiliary ADC3 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock enable state to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the clock enable operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AuxAdc3ClockEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xb), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock enable status of the auxiliary ADC3 from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AuxAdc3ClockEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xb), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the auxiliary ADC clock arm selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock arm selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AuxAdcClkArmSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xc), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the auxiliary ADC clock arm selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock arm
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AuxAdcClkArmSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xc), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the auxiliary ADC clock divider value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock divider value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AuxAdcClkDiv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xa), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the auxiliary ADC clock divider value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * divider value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AuxAdcClkDiv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the calibration output value from the auxiliary PLL of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved calibration
 * output value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AuxPllCpCalOut_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1c0), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the high range value of the auxiliary PLL charge pump from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AuxPllCpOverRangeHigh_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1c1), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the low range value of the auxiliary PLL charge pump from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AuxPllCpOverRangeLow_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1c1), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the lock status of the auxiliary PLL from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved PLL lock
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AuxPllLock_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1c1), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the VCO ALC word output from the auxiliary PLL register of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved VCO
 * ALC word output will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AuxPllVcoAlcWordOut_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1bf), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1be), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the VCO calibration status from a specific register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the calibration status
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AuxPllVcoCalInProgress_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1c1), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the VCO comparator output value from a specific register of
 * the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved VCO
 * comparator output will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AuxPllVcoCompOut_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1c1), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the coarse band output frequency value from the auxiliary
 * PLL VCO register of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * frequency value will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AuxPllVcoFreqCoarseBandOut_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1bd), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1bc), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the fine band output frequency value from the auxiliary PLL
 * VCO register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved frequency
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AuxPllVcoFreqFineBandOut_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1bb), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the VCO DAC output value from the auxiliary PLL register of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved VCO
 * DAC output value will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_AuxPllVcoTcDacOut_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1ba), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1b9), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock test driver mode by writing a specified value to a
 * hardware register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_CkTestDriMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x192), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_CkTestDriMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x192), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the clock test register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the clock test power-down register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_CkTestPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x192), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific bit field from a hardware register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_CkTestPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x192), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the calibration output value from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration output value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ClkPllCpCalOut_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1b7), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the high over-range value from the Clock Phase-Locked Loop
 * (PLL) control register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved high over-
 * range value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ClkPllCpOverRangeHigh_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1b8), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the low range value of the Clock Phase-Locked Loop (PLL)
 * Charge Pump from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ClkPllCpOverRangeLow_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1b8), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the PLL lock status from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the PLL lock status will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ClkPllLock_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1b8), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the calibration output value from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration output value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ClkPllLpCpCalOut_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1ae), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the high over-range value from the PLL configuration
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved high over-
 * range value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ClkPllLpCpOverRangeHigh_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1af), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the low over-range value from the PLL configuration
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved low over-
 * range value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ClkPllLpCpOverRangeLow_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1af), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the lock status of the low-power phase-locked loop (PLL)
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved lock
 * status will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ClkPllLpLock_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1af), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a 16-bit value from two specific registers of a device by
 * reading their contents.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ClkPllLpVcoAlcWordOut_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1ad), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1ac), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the VCO calibration status from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the calibration status
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ClkPllLpVcoCalInProgress_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1af), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the VCO compensation output value from a specific register
 * of the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved VCO
 * compensation output value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ClkPllLpVcoCompOut_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1af), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the coarse band output frequency from the PLL VCO register
 * of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * frequency value will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ClkPllLpVcoFreqCoarseBandOut_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1ab), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1aa), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the fine band output frequency value from the PLL VCO
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved frequency
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ClkPllLpVcoFreqFineBandOut_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1a9), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the output value of the DAC from the PLL VCO register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved DAC
 * output value will be stored.
 * @return Returns the status of the last read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ClkPllLpVcoTcDacOut_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1a8), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1a7), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the VCO ALC word output from the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved VCO
 * ALC word output will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ClkPllVcoAlcWordOut_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1b6), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1b5), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the VCO calibration status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the calibration status
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ClkPllVcoCalInProgress_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1b8), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the VCO comparator output value from a specific register in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved VCO
 * comparator output value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ClkPllVcoCompOut_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1b8), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the coarse band output frequency value from the PLL VCO
 * register of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * frequency value will be stored.
 * @return Returns the status of the read operations, with `*value` containing
 * the combined frequency value from the two registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ClkPllVcoFreqCoarseBandOut_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1b4), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1b3), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the fine band output frequency value from the VCO PLL
 * register of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved frequency
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ClkPllVcoFreqFineBandOut_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1b2), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the VCO DAC output value from the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved VCO
 * DAC output value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operations failed.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ClkPllVcoTcDacOut_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1b1), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1b0), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output multiplexer selection for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the multiplexer selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ControlOutMuxSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x8), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided output variable.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ControlOutMuxSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x8), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LDO bypass configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * LDO bypass configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ConverterLdoBypass_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x190), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LDO bypass setting from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved LDO bypass
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ConverterLdoBypass_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x190), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the thermal shutdown configuration for the LDO converter in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the thermal shutdown setting to be
 * applied.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ConverterLdoDisThermalShutdown_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x191), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the thermal shutdown status of the LDO converter from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved thermal
 * shutdown status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ConverterLdoDisThermalShutdown_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x191), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the filter bypass configuration for the LDO converter in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the filter bypass setting
 * to be applied.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ConverterLdoFilterBypass_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x191), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the filter bypass status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved filter
 * bypass status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ConverterLdoFilterBypass_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x191), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LDO current limit increment value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the new current limit
 * increment value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ConverterLdoIlimitInc_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x190), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LDO current limit increment value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved increment
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ConverterLdoIlimitInc_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x190), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the LDO status from a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved LDO status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ConverterLdoStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x190), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the thermal shutdown configuration for the LDO converter in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the thermal shutdown
 * configuration value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ConverterLdoThermalShutdown0c_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x191), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the thermal shutdown status of the LDO converter from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved thermal
 * shutdown status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ConverterLdoThermalShutdown0c_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x191), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output voltage selection for the LDO converter in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired output
 * voltage selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ConverterLdoVoutSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x190), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the output voltage selection from the LDO converter by
 * reading a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved voltage
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ConverterLdoVoutSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x190), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output voltage trim value for the LDO converter in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the trim value to be set
 * for the LDO output voltage.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ConverterLdoVoutTrim_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x191), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LDO output voltage trim value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved trim value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ConverterLdoVoutTrim_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x191), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the debug core control output value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the debug core control output.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_DebugCoreControlOut_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x9), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided output variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_DebugCoreControlOut_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x9), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the digital device clock divider source selection in the ADRV9001
 * device using SPI.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock divider source
 * selection value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_DigDevClkDivSourceSelFromSpi_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x194), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the digital device clock divider source selection from a
 * specific register via SPI.
 *
 * @param device A pointer to the device structure used for SPI communication.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * divider source selection will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_DigDevClkDivSourceSelFromSpi_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x194), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the digital device clock divide ratio difference receiver value
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the divide ratio
 * difference receiver value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_DigDevclkDivideRatioDiffRcv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x195), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the digital device clock divide ratio difference from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_DigDevclkDivideRatioDiffRcv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x195), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the divide ratio for the digital device clock oscillator receiver
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the divide ratio to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_DigDevclkDivideRatioOscRcv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x195), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the digital device clock divide ratio from a specific
 * register and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock divide
 * ratio will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_DigDevclkDivideRatioOscRcv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x195), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the MCS reset bit for the digital device clock divider in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the MCS reset bit.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_DigDevclkDividerMcsResetb_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x194), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_DigDevclkDividerMcsResetb_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x194), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock divide ratio for the digital device in the ADRV9001
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired clock divide
 * ratio.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_DigDeviceClkDivideRatio_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x152), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the digital device clock divide ratio from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * divide ratio will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_DigDeviceClkDivideRatio_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x152), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves 12 bytes of efuse feature data from a device by reading
 * specific registers.
 *
 * @param device A pointer to the device structure from which the efuse data is
 * to be read.
 * @param value A pointer to an array of 12 bytes where the retrieved efuse
 * feature data will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_EfuseFeatureData_Get(void *device,
    uint8_t (*value)[12])
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x23), &register_value);
    (*value)[0] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x22), &register_value);
    (*value)[1] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x21), &register_value);
    (*value)[2] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x20), &register_value);
    (*value)[3] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1f), &register_value);
    (*value)[4] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1e), &register_value);
    (*value)[5] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1d), &register_value);
    (*value)[6] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1c), &register_value);
    (*value)[7] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1b), &register_value);
    (*value)[8] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1a), &register_value);
    (*value)[9] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x19), &register_value);
    (*value)[10] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x18), &register_value);
    (*value)[11] = register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the efuse force read value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the efuse force read register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_EfuseForceRead_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xe), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_EfuseForceRead_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xe), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the eFuse override enable value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * eFuse override.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_EfuseOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x30), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the eFuse override enable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved eFuse
 * override enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_EfuseOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x30), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets eFuse override values in the ADRV9001 device by writing to
 * specific registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to an array of 12 bytes containing the eFuse override
 * values to be written.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_EfuseOverrides_Set(void *device,
    uint8_t (*value)[12])
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x2f), (*value)[0]);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x2e), (*value)[1]);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x2d), (*value)[2]);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x2c), (*value)[3]);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x2b), (*value)[4]);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x2a), (*value)[5]);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x29), (*value)[6]);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x28), (*value)[7]);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x27), (*value)[8]);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x26), (*value)[9]);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x25), (*value)[10]);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x24), (*value)[11]);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves eFuse override values from a device's register map and
 * stores them in a provided array.
 *
 * @param device A pointer to the device structure from which the eFuse values
 * are read.
 * @param value A pointer to a 2D array where the retrieved eFuse values will be
 * stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_EfuseOverrides_Get(void *device,
    uint8_t (*value)[12])
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x2f), &register_value);
    (*value)[0] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x2e), &register_value);
    (*value)[1] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x2d), &register_value);
    (*value)[2] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x2c), &register_value);
    (*value)[3] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x2b), &register_value);
    (*value)[4] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x2a), &register_value);
    (*value)[5] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x29), &register_value);
    (*value)[6] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x28), &register_value);
    (*value)[7] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x27), &register_value);
    (*value)[8] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x26), &register_value);
    (*value)[9] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x25), &register_value);
    (*value)[10] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x24), &register_value);
    (*value)[11] = register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the programming address for the eFuse in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the programming address
 * to be set.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any of the write operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_EfuseProgAddress_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x15), (value >> 8), 0x1, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x14), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the programming address from the eFuse register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * programming address will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_EfuseProgAddress_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x15), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x14), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the eFuse programming strobe value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the eFuse programming strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_EfuseProgStrobe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x13), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the programming strobe value from the efuse register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved programming
 * strobe value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_EfuseProgStrobe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x13), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO programming value for the efuse in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the efuse GPIO.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_EfuseProgUseGpio_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x13), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_EfuseProgUseGpio_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x13), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the eFuse programming start value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the eFuse.
 * @return Returns an integer status code indicating the success or failure of
 * the eFuse programming start operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_EfuseProgramStart_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xe), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the eFuse programming status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved eFuse
 * programming status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_EfuseProgramStart_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xe), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the eFuse read address in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the eFuse read address.
 * @return Returns an integer status code indicating the success or failure of
 * the eFuse read address write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_EfuseReadAddress_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xe), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Reads the efuse address from a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the read efuse address
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_EfuseReadAddress_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xe), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Reads eFuse data from a device and stores it in a provided value.
 *
 * @param device A pointer to the device structure from which the eFuse data
 * will be read.
 * @param value A pointer to a 32-bit unsigned integer where the read eFuse data
 * will be stored.
 * @return Returns the status of the last read operation, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_EfuseReadData_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x12), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x11), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x10), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xf), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the eFuse read start value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the eFuse read start register.
 * @return Returns an integer status code indicating the success or failure of
 * the eFuse read start value write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_EfuseReadStart_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xe), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Reads the eFuse register value and stores it in the provided value
 * pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the read eFuse value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_EfuseReadStart_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xe), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the eFuse state from a specific register and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved eFuse state
 * will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_EfuseState_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x16), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the double redundancy configuration for the eFuse in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the eFuse double redundancy configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_EfuseUseDoubleRedundancy_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x17), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the double redundancy eFuse setting from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved eFuse value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_EfuseUseDoubleRedundancy_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x17), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the redundancy oring value for the efuse in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the redundancy oring
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_EfuseUseRedundancyOring_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x17), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the redundancy oring value from the efuse register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved redundancy
 * oring value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_EfuseUseRedundancyOring_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x17), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FlexSp0 clock enable register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that specifies the clock enable state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_FlexSp0ClkEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1f3), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the FlexSp0 clock enable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_FlexSp0ClkEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1f3), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FlexSp1 clock enable register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the FlexSp1 clock enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_FlexSp1ClkEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1f3), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the FlexSp1 clock enable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_FlexSp1ClkEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1f3), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FlexSp2 clock enable register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the FlexSp2 clock enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_FlexSp2ClkEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1f3), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the FlexSp2 clock enable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * enable status will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_FlexSp2ClkEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1f3), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FlexSp3 clock enable register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the FlexSp3 clock enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_FlexSp3ClkEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1f3), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the FlexSp3 clock enable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_FlexSp3ClkEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1f3), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ARM clock force value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * ARM clock.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ForceArmClk_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1f2), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ARM clock status from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved ARM clock
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ForceArmClk_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1f2), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the digital device clock divider source selection in the ADRV9001
 * device via SPI.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock divider source
 * selection value.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ForceDigDevClkDivSourceSelFromSpi_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x194), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the digital device clock divider source selection from a
 * specific register via SPI.
 *
 * @param device A pointer to the device structure used for communication.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ForceDigDevClkDivSourceSelFromSpi_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x194), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reference clock configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the reference clock register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ForceRefClk_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1f2), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reference clock value from a specific register in the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved reference
 * clock value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ForceRefClk_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1f2), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reference clock configuration in the ADRV9001 device's
 * register map using a value from SPI.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the reference clock configuration register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ForceRefclkClcnfgFromSpi_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x194), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific configuration value from a device's register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ForceRefclkClcnfgFromSpi_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x194), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA0 abort register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the DMA0 abort register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0Abort_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xb6), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to DMA abort status
 * from the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0Abort_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xb6), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA0 abort flag from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved abort flag
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0AbortFlag_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xc2), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the AHB error status from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved AHB error
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0AhbError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xc3), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA0 block base offset address in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the base offset address
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0BlockBaseOffsetAddr_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xbf), (value >> 8), 0xf, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0xc0), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the base offset address for DMA0 block from the device's
 * register map.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved base
 * offset address will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operations failed.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0BlockBaseOffsetAddr_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xbf), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xc0), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA0 configuration index mode for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the DMA0 configuration index mode.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0ConfigIndexMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xb5), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA0 configuration index mode from a specific register
 * and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0ConfigIndexMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xb5), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the continuous index mode for DMA0 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0ContinuousIndexMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xb5), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to DMA continuous
 * index mode from the device.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0ContinuousIndexMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xb5), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the current index of DMA0 from the ADRV9001 device by
 * reading multiple registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved DMA0
 * current index will be stored.
 * @return Returns the status of the last read operation, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0CurrIndex_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xd1), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xd2), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xd3), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xd4), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the current block address from the DMA register by reading
 * multiple consecutive registers.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved block
 * address will be stored.
 * @return Returns the status of the last read operation, with a value of 0
 * indicating success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0CurrentBlockAddr_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xcd), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xce), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xcf), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xd0), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the current index address of DMA0 from the ADRV9001 device
 * by reading multiple registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint32_t variable where the retrieved index
 * address will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0CurrentIndexAddr_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xc5), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xc6), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xc7), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xc8), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the current profile address from the DMA register by reading
 * multiple consecutive registers.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * profile address will be stored.
 * @return Returns the status of the last read operation, with the output value
 * containing the combined profile address from the four registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0CurrentProfileAddr_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xc9), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xca), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xcb), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xcc), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA0 enable state in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A `uint8_t` value representing the desired state to enable or
 * disable DMA0.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0Enable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xb6), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA0 enable status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved DMA0
 * enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0Enable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xb6), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the end-of-transfer flag from a specific DMA register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved end-of-
 * transfer flag will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0EndOfTransferFlag_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xc2), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA0 error flag from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved error flag
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0ErrorFlag_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xc2), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA0 field type error value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved field type
 * error value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0FieldTypeError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xc4), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the General DMA0 Genbus error status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved error status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0GenbusError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xc3), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA0 ignore Tx/Rx match configuration for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0IgnoreTxrxMatch_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xb5), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0IgnoreTxrxMatch_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xb5), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the maximum number of words for DMA0 in the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the maximum number of
 * words to set for DMA0.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0MaxNumberOfWord_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0xc1), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the maximum number of words for DMA0 from a specific
 * register and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved maximum
 * number of words will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0MaxNumberOfWord_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xc1), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the maximum word count error from the DMA register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved maximum word
 * count error will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0MaxWordCountError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xc3), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the next receive value for DMA0 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the next receive operation.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0NextRx_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xb7), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the next receive value from the DMA register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0NextRx_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xb7), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the next RX mismatch error value from a specific register in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved mismatch
 * error value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0NextRxMismatchError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xc3), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the next skip value for the DMA0 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the next skip value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0NextSkip_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xb7), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the next skip value from the DMA register for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved skip value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0NextSkip_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xb7), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the next transmission value for the DMA in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the next transmission.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0NextTx_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xb7), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the next transmission value from the DMA register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved transmission
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0NextTx_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xb7), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the next transmission mismatch error value from a specific
 * register in the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved mismatch
 * error value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0NextTxMismatchError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xc3), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA0 register map offset address for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0RegmapOffsetAddr_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xb8), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the offset address from a specific DMA register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0RegmapOffsetAddr_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xb8), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA0 start table address in the ADRV9001 device by writing to
 * specific registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the start table address
 * to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0StartTableAddr_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0xb9), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0xba), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0xbb), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0xbc), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the start table address for DMA0 by reading multiple
 * registers and combining their values.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a 32-bit unsigned integer where the combined
 * register values will be stored.
 * @return Returns the status of the last register read operation, with a value
 * of 0 indicating success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0StartTableAddr_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xb9), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xba), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xbb), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xbc), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA0 state from a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved DMA0 state
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0State_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xd5), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA0 status from a specific register and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved DMA0 status
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0Status_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xc2), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA0 stop configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the DMA0 stop register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0Stop_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xb6), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA0 stop status from a specific register and stores it
 * in the provided value.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved DMA0 stop
 * status will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0Stop_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xb6), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA0 stop flag from a specific register and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved DMA0 stop
 * flag will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0StopFlag_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xc2), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the base offset address for DMA0 table in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the base offset address
 * to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0TableBaseOffsetAddr_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xbd), (value >> 8), 0xf, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0xbe), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the base offset address for DMA0 table from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved base
 * offset address will be stored.
 * @return Returns the status of the read operations, where a status of zero
 * indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0TableBaseOffsetAddr_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xbd), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xbe), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the unexpected next RX error status from a specific register
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved error status
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0UnexpectedNextRxError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xc3), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the unexpected next skip error value from a specific
 * register in the device.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved error
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0UnexpectedNextSkipError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xc3), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the unexpected next transmission error status from a
 * specific register of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved error
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma0UnexpectedNextTxError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xc3), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA1 abort register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer that specifies the value to be written
 * to the DMA1 abort register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1Abort_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xd7), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA1 abort status from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1Abort_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xd7), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA1 abort flag from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved abort flag
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1AbortFlag_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xe3), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the AHB error status from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1AhbError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xe4), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the base offset address for DMA1 block in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the base offset address
 * to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1BlockBaseOffsetAddr_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xe0), (value >> 8), 0xf, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0xe1), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the base offset address for DMA1 block from the ADRV9001
 * device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved base
 * offset address will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1BlockBaseOffsetAddr_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xe0), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xe1), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA1 configuration index mode for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the DMA1 configuration index mode.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1ConfigIndexMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xd6), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA configuration index mode from a specific register
 * and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1ConfigIndexMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xd6), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the continuous index mode for DMA1 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1ContinuousIndexMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xd6), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1ContinuousIndexMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xd6), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the current index of the DMA1 from the ADRV9001 device by
 * reading multiple registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved DMA1
 * current index will be stored.
 * @return Returns the status of the last register read operation, where a
 * status of 0 indicates success and a non-zero value indicates an
 * error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1CurrIndex_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xf2), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xf3), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xf4), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xf5), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the current block address from the DMA register by reading
 * multiple consecutive registers.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved block
 * address will be stored.
 * @return Returns the status of the last register read operation, with the
 * retrieved block address stored in the variable pointed to by value.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1CurrentBlockAddr_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xee), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xef), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xf0), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xf1), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the current index address of DMA1 from the ADRV9001 device
 * by reading multiple registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved DMA1
 * current index address will be stored.
 * @return Returns the status of the last register read operation, where a
 * status of 0 indicates success and a non-zero value indicates an
 * error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1CurrentIndexAddr_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xe6), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xe7), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xe8), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xe9), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the current DMA profile address from a device by reading
 * multiple registers.
 *
 * @param device A pointer to the device structure from which the DMA profile
 * address is to be read.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved DMA
 * profile address will be stored.
 * @return Returns the status of the last read operation, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1CurrentProfileAddr_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xea), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xeb), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xec), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xed), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA1 enable register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that indicates whether to enable (1) or disable
 * (0) DMA1.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1Enable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xd7), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA1 enable status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved DMA1
 * enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1Enable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xd7), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the end-of-transfer flag from a specific DMA register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved end-of-
 * transfer flag will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1EndOfTransferFlag_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xe3), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA1 error flag from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved error flag
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1ErrorFlag_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xe3), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA1 field type error value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved field type
 * error value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1FieldTypeError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xe5), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the General DMA1 General Bus Error status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved error status
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1GenbusError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xe4), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA ignore TX/RX match configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the DMA ignore TX/RX match register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1IgnoreTxrxMatch_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xd6), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA ignore TX/RX match status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1IgnoreTxrxMatch_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xd6), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the maximum number of words for DMA1 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the maximum number of
 * words to set for DMA1.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1MaxNumberOfWord_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0xe2), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the maximum number of words for DMA1 from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved maximum
 * number of words will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1MaxNumberOfWord_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xe2), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the maximum word count error from the DMA register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved maximum word
 * count error will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1MaxWordCountError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xe4), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the next receive value for the DMA in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the next receive operation.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1NextRx_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xd8), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the next receive value from the DMA register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1NextRx_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xd8), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the next RX mismatch error value from a specific register in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved mismatch
 * error value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1NextRxMismatchError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xe4), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the next skip value for the DMA in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the next skip value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1NextSkip_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xd8), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the next skip value from a specific DMA register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved skip value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1NextSkip_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xd8), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the next transmission value for the DMA in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the next transmission.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1NextTx_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xd8), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the next transmission value from the DMA register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved transmission
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1NextTx_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xd8), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the next transmission mismatch error value from a specific
 * register in the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved mismatch
 * error value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1NextTxMismatchError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xe4), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA1 register map offset address for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1RegmapOffsetAddr_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xd9), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the offset address from a specific DMA register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1RegmapOffsetAddr_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xd9), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA start table address in the ADRV9001 device by writing to
 * specific registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the DMA start table
 * address to be set.
 * @return Returns the status of the last register write operation, indicating
 * success (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1StartTableAddr_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0xda), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0xdb), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0xdc), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0xdd), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the start table address for DMA1 by reading multiple
 * registers and combining their values.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a 32-bit unsigned integer where the combined
 * register values will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any read operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1StartTableAddr_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xda), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xdb), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xdc), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xdd), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA1 state from a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved DMA1 state
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1State_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xf6), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA1 status from a specific register and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved DMA1 status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1Status_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xe3), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA1 stop register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the DMA1 stop register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1Stop_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xd7), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA stop status from a specific register and stores it
 * in the provided value.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved DMA stop
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1Stop_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xd7), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA1 stop flag from a specific register and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved DMA1 stop
 * flag will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1StopFlag_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xe3), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the base offset address for DMA1 table in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the base offset address
 * to be set.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1TableBaseOffsetAddr_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xde), (value >> 8), 0xf, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0xdf), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the base offset address for DMA1 table from the device's
 * register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a `uint16_t` variable where the retrieved base
 * offset address will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1TableBaseOffsetAddr_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xde), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xdf), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the unexpected next RX error status from a specific register
 * in the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved error
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1UnexpectedNextRxError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xe4), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the unexpected next skip error value from a specific
 * register in the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved error
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1UnexpectedNextSkipError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xe4), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the unexpected next transmission error status from a
 * specific register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved error status
 * will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma1UnexpectedNextTxError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xe4), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA2 abort register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the DMA2 abort register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2Abort_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xf8), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA2 abort status from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2Abort_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xf8), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA2 abort flag from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved abort flag
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2AbortFlag_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x104), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA to AHB error status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved error status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2AhbError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x105), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA2 block base offset address in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the base offset address
 * to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2BlockBaseOffsetAddr_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x101), (value >> 8), 0xf, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x102), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the base offset address for DMA2 block from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved base
 * offset address will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2BlockBaseOffsetAddr_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x101), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x102), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA2 configuration index mode for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the DMA2 configuration index mode.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2ConfigIndexMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xf7), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA2 configuration index mode from a specific register
 * and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2ConfigIndexMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xf7), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the continuous index mode for DMA2 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the DMA2 continuous index mode register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2ContinuousIndexMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xf7), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA2 continuous index mode value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2ContinuousIndexMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xf7), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the current index of the DMA2 register by reading multiple
 * consecutive registers and combining their values.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the combined
 * register values will be stored.
 * @return Returns the status of the last read operation, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2CurrIndex_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x113), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x114), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x115), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x116), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the current block address from the DMA register by reading
 * multiple consecutive registers.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved block
 * address will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2CurrentBlockAddr_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x10f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x110), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x111), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x112), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the current index address from the DMA2 register by reading
 * multiple consecutive registers.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved index
 * address will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero). The retrieved index address is stored in the
 * variable pointed to by 'value'.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2CurrentIndexAddr_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x107), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x108), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x109), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x10a), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the current DMA2 profile address from a device by reading
 * multiple registers.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * profile address will be stored.
 * @return Returns the status of the last read operation, with the combined
 * profile address stored in the variable pointed to by 'value'.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2CurrentProfileAddr_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x10b), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x10c), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x10d), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x10e), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA2 enable register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that indicates the desired state to set for the
 * DMA2 enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2Enable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xf8), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA2 enable status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved DMA2
 * enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2Enable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xf8), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA2 end-of-transfer flag from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2EndOfTransferFlag_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x104), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA2 error flag from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved error flag
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2ErrorFlag_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x104), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA2 field type error value from a specific register.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved field type
 * error value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2FieldTypeError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x106), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the General DMA2 General Bus Error status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved error status
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2GenbusError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x105), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA ignore transmit/receive match configuration for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the DMA configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2IgnoreTxrxMatch_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xf7), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA2 ignore TX/RX match value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2IgnoreTxrxMatch_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xf7), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the maximum number of words for DMA2 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the maximum number of
 * words to set for DMA2.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2MaxNumberOfWord_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x103), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the maximum number of words for DMA2 from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved maximum
 * number of words will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2MaxNumberOfWord_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x103), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA2 maximum word count error status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved error
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2MaxWordCountError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x105), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the next receive value for the DMA in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the next receive operation.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2NextRx_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xf9), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the next receive value from the DMA register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2NextRx_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xf9), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the next RX mismatch error value from a specific register in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved mismatch
 * error value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2NextRxMismatchError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x105), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the next skip value for the DMA2 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the next skip value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2NextSkip_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xf9), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the next skip value from the DMA register for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved skip value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2NextSkip_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xf9), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the next transmission value for the DMA in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the next transmission.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2NextTx_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xf9), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the next transmission value from the DMA register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved transmission
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2NextTx_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xf9), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA2 next transmission mismatch error status from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved mismatch
 * error value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2NextTxMismatchError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x105), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA2 register map offset address for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2RegmapOffsetAddr_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xfa), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA2 register offset address from the device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2RegmapOffsetAddr_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xfa), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA2 start table address in the ADRV9001 device by writing to
 * specific registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the start table address
 * to be set.
 * @return Returns 0 on success or a negative error code if any of the register
 * write operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2StartTableAddr_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0xfb), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0xfc), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0xfd), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0xfe), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA2 start table address from a device by reading
 * multiple registers.
 *
 * @param device A pointer to the device structure from which the DMA2 start
 * table address is to be read.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * address will be stored.
 * @return Returns the status of the last read operation, with the DMA2 start
 * table address stored in the variable pointed to by value.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2StartTableAddr_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xfb), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xfc), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xfd), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xfe), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA2 state from a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved DMA2 state
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2State_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x117), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA2 status from a specific register and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved DMA2 status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2Status_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x104), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA2 stop register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the DMA2 stop register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2Stop_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xf8), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA2 stop status from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2Stop_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xf8), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA2 stop flag from a specific register and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved DMA2 stop
 * flag will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2StopFlag_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x104), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the base offset address for DMA2 table in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the value to be set as
 * the base offset address.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2TableBaseOffsetAddr_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xff), (value >> 8), 0xf, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x100), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the base offset address for the DMA2 table from the device's
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved base
 * offset address will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2TableBaseOffsetAddr_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xff), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x100), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the unexpected next RX error status from a specific register
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2UnexpectedNextRxError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x105), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA2 unexpected next skip error status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved error status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2UnexpectedNextSkipError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x105), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the unexpected next transmission error status from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved error
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma2UnexpectedNextTxError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x105), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA3 abort register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the DMA3 abort register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3Abort_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x119), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA3 abort status from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3Abort_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x119), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA3 abort flag from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved abort flag
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3AbortFlag_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x125), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the AHB error status from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3AhbError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x126), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA3 block base offset address in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the base offset address
 * to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3BlockBaseOffsetAddr_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x122), (value >> 8), 0xf, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x123), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the base offset address for DMA3 block from the device's
 * register map.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved base
 * offset address will be stored.
 * @return Returns the status of the read operations, with `*value` containing
 * the combined base offset address if successful.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3BlockBaseOffsetAddr_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x122), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x123), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA3 configuration index mode for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the DMA3 configuration index mode.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3ConfigIndexMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x118), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA3 configuration index mode from a specific register
 * and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3ConfigIndexMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x118), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the continuous index mode for DMA3 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the DMA3 continuous index mode.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3ContinuousIndexMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x118), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to DMA3 continuous
 * index mode from the device.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3ContinuousIndexMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x118), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the current index of DMA3 from the ADRV9001 device by
 * reading multiple registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved DMA3
 * current index will be stored.
 * @return Returns the status of the last register read operation, with the DMA3
 * current index stored in the variable pointed to by 'value'.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3CurrIndex_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x134), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x135), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x136), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x137), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the current block address from the DMA3 register by reading
 * multiple consecutive registers.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved block
 * address will be stored.
 * @return Returns the status of the last register read operation, with the
 * output value containing the combined block address from the four
 * registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3CurrentBlockAddr_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x130), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x131), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x132), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x133), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the current index address from the DMA3 register by reading
 * multiple bytes from a device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved index
 * address will be stored.
 * @return Returns the status of the last read operation, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3CurrentIndexAddr_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x128), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x129), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x12a), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x12b), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the current DMA3 profile address from a device by reading
 * multiple registers.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * profile address will be stored.
 * @return Returns the status of the last register read operation, with a value
 * of 0 indicating success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3CurrentProfileAddr_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x12c), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x12d), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x12e), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x12f), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA3 enable register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value indicating the enable state for DMA3, where a
 * non-zero value typically enables it.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3Enable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x119), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA3 enable status from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved DMA3 enable
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3Enable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x119), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA3 end-of-transfer flag from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved end-of-
 * transfer flag will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3EndOfTransferFlag_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x125), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA3 error flag from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved error flag
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3ErrorFlag_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x125), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA3 field type error value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved field type
 * error value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3FieldTypeError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x127), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA3 General Bus Error status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3GenbusError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x126), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA3 ignore TX/RX match configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3IgnoreTxrxMatch_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x118), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA3 ignore TX/RX match value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3IgnoreTxrxMatch_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x118), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the maximum number of words for DMA3 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the maximum number of
 * words to set for DMA3.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3MaxNumberOfWord_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x124), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the maximum number of words for DMA3 from a specific
 * register and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved maximum
 * number of words will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3MaxNumberOfWord_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x124), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA3 maximum word count error status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved error
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3MaxWordCountError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x126), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the next receive value for DMA3 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the next receive operation.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3NextRx_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x11a), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the next receive value from the DMA register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for accessing hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3NextRx_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x11a), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the next RX mismatch error value from a specific register in
 * the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved mismatch
 * error value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3NextRxMismatchError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x126), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the next skip value for DMA3 in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the next skip value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3NextSkip_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x11a), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the next skip value from the DMA3 register and stores it in
 * the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved skip value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3NextSkip_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x11a), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the next transmission value for DMA3 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the next transmission.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3NextTx_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x11a), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the next transmission value from the DMA register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved transmission
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3NextTx_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x11a), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA3 next transmission mismatch error status from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved mismatch
 * error value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3NextTxMismatchError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x126), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA3 register map offset address for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the DMA3 register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3RegmapOffsetAddr_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x11b), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA3 register offset address from the device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3RegmapOffsetAddr_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x11b), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA3 start table address in the ADRV9001 device by writing to
 * specific registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the start table address
 * to be set.
 * @return Returns the status of the last register write operation, where a non-
 * zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3StartTableAddr_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x11c), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x11d), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x11e), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x11f), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA3 start table address from a device by reading
 * multiple registers.
 *
 * @param device A pointer to the device structure from which the DMA3 start
 * table address is to be read.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * address will be stored.
 * @return Returns the status of the last read operation, with the output value
 * containing the combined address from the four registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3StartTableAddr_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x11c), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x11d), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x11e), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x11f), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA3 state from a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved DMA3 state
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3State_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x138), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA3 status from a specific register and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved DMA3 status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3Status_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x125), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA3 stop register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the DMA3 stop register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3Stop_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x119), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA3 stop status from a specific register and stores it
 * in the provided value.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved DMA3 stop
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3Stop_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x119), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA3 stop flag from a specific register and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved DMA3 stop
 * flag value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3StopFlag_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x125), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the base offset address for DMA3 table in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the value to be set as
 * the base offset address.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3TableBaseOffsetAddr_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x120), (value >> 8), 0xf, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x121), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the base offset address for DMA3 from the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved base
 * offset address will be stored.
 * @return Returns the status of the read operations, with `*value` containing
 * the combined base offset address from two registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3TableBaseOffsetAddr_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x120), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x121), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the unexpected next RX error status from a specific register
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3UnexpectedNextRxError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x126), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA3 unexpected next skip error status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3UnexpectedNextSkipError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x126), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the unexpected next transmission error status from a
 * specific register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved error status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GeneralDma3UnexpectedNextTxError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x126), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the golden counter division factor in the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the division factor to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GoldenCounterDivFactor_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x1ef), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the golden counter division factor from a specific register
 * and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved golden
 * counter division factor will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GoldenCounterDivFactor_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1ef), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the golden counter enable value in the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the golden counter enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GoldenCounterEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1f0), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the golden counter enable register from the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GoldenCounterEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1f0), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the golden counter out-of-sync status in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the golden counter out-of-sync register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GoldenCounterOutOfSync_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1f1), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the golden counter out-of-sync status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GoldenCounterOutOfSync_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1f1), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the calibration error status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved calibration
 * error status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpIntArmCalibrationErrorStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa6), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the ARM error status from a specific register and stores it
 * in the provided value.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved error status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpIntArmErrorStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa6), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the interrupt status from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved interrupt
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpIntArmMonitorInterruptStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa6), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the system error status from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved system error
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpIntArmSystemErrorStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa6), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the lock status of the auxiliary PLL from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved PLL lock
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpIntAuxPllLockStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa5), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the PLL lock status from a specific register and stores it
 * in the provided value.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the PLL lock status will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpIntClkPllLockStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa5), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the lock status of the low-power phase-locked loop (PLL)
 * from a specific register.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved PLL lock
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpIntClkPllLpLockStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa6), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the status of the Flex Stream Processing Error 0 from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpIntFlexStreamProcError0Status_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa4), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the status of the Flex Stream Processing Error 1 from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpIntFlexStreamProcError1Status_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa4), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the status of the Flex Stream Processing Error from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved status
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpIntFlexStreamProcError2Status_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa4), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the status of the Flex Stream Processing Error 3 from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved status will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpIntFlexStreamProcError3Status_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa4), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the interrupt status from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved interrupt
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpIntForceGpInterruptStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa6), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the MCS status from a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved MCS status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpIntMcsLssiRx1McsStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa5), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the LSSI RX2 MCS status from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved status will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpIntMcsLssiRx2McsStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa5), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the second status from the MCS register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved status value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpIntMcsSecondStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa5), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the MCS status from a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved MCS status
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpIntMcsStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa5), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the PLL lock status from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the PLL lock status will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpIntRf1PllLockStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa5), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the PLL lock status from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the PLL lock status will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpIntRf2PllLockStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa5), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the BBIC status from a specific register and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved BBIC status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpIntRxdpIntfErrorToBbicStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa3), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief This function reads a specific register value from a device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the read register value
 * will be stored.
 * @return The function returns an integer status code indicating the success or
 * failure of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpIntRxdpIntfReadRequestToBbicStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa3), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the error status from a specific register in the device and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved error status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpIntStreamProcErrorStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa4), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the PA protection error status from a specific register in
 * the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved PA
 * protection error status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpIntTx1PaProtectionErrorStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa6), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the PA protection error status from a specific register of
 * the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved error status
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpIntTx2PaProtectionErrorStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa6), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the BBIC status from a specific register and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved BBIC status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpIntTxdpIntfErrorToBbicStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa3), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the BBIC status from a specific register and stores it in
 * the provided value.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved status will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpIntTxdpIntfWriteRequestToBbicStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa3), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bypass device clock interrupt for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the device register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpInterruptBypassDevClk_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x9c), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the device clock bypass interrupt status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * bypass interrupt status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpInterruptBypassDevClk_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x9c), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the device clock extend configuration for the ADRV9001 by writing
 * a specified value to a specific register.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the device's register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpInterruptDevClkExtend_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x9d), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpInterruptDevClkExtend_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x9d), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the level-sensitive flag from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved flag value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpInterruptLevelSensitiveFlag_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa2), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the sensitive mode for the GP interrupt in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * GP interrupt sensitive mode.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpInterruptSensitiveMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x9c), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the interrupt sensitive mode value from a specific register
 * of the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpInterruptSensitiveMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x9c), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the thermal shutdown configuration for the GP LDO in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the thermal shutdown setting to be
 * applied.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpLdoDisThermalShutdown1_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x196), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the thermal shutdown status of the GP LDO from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved thermal
 * shutdown status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpLdoDisThermalShutdown1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x196), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the thermal shutdown configuration for the GP LDO in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the thermal shutdown register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpLdoDisThermalShutdown2_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x196), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the thermal shutdown status of the GP LDO from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved thermal
 * shutdown status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpLdoDisThermalShutdown2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x196), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GP LDO current limit increment value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the new current limit
 * increment value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpLdoIlimitInc1_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x196), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GP LDO current limit increment value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved increment
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpLdoIlimitInc1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x196), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GP LDO current limit increment value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the new current limit
 * increment value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpLdoIlimitInc2_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x196), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpLdoIlimitInc2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x196), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the thermal shutdown configuration for the GP LDO in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the thermal shutdown
 * configuration value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpLdoThermalShutdown0c1_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x196), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the thermal shutdown status of the GP LDO from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved thermal
 * shutdown status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpLdoThermalShutdown0c1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x196), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the thermal shutdown configuration for the GP LDO in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the thermal shutdown
 * configuration value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpLdoThermalShutdown0c2_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x196), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the thermal shutdown status of the GP LDO from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved thermal
 * shutdown status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpLdoThermalShutdown0c2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x196), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration error mask in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the calibration error
 * mask value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskArmCalibrationError_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xa1), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration error mask from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved calibration
 * error mask will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskArmCalibrationError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa1), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ARM force interrupt mask in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the interrupt mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskArmForceInterrupt_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xa1), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `GpMaskArmForceInterrupt` register from the
 * device.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskArmForceInterrupt_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa1), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ARM monitor interrupt mask in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * interrupt mask.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskArmMonitorInterrupt_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xa1), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the masked interrupt value from a specific register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved masked
 * interrupt value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskArmMonitorInterrupt_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa1), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ARM system error mask in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the ARM system error mask.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskArmSystemError_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xa1), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the masked system error value from a specific register of
 * the device.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved masked
 * system error value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskArmSystemError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa1), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the auxiliary synthesizer lock mask in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the lock mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskAuxSynthLock_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xa0), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the auxiliary synthesizer lock status from a specific
 * register and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved synthesizer
 * lock status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskAuxSynthLock_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa0), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock synthesizer lock mask in the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the clock synthesizer lock mask.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskClkSynthLock_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xa0), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock synthesizer lock status from a specific register
 * and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * synthesizer lock status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskClkSynthLock_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa0), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low-power lock state of the clock synthesizer in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskClkSynthLpLock_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xa1), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskClkSynthLpLock_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa1), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the mask for Flex Stream 0 error in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the error mask.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskFlexStream0Error_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x9f), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the error status from the Flex Stream 0 register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved error status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskFlexStream0Error_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x9f), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the mask for Flex Stream 1 error in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskFlexStream1Error_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x9f), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to Flex Stream 1
 * error and stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskFlexStream1Error_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x9f), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the mask for Flex Stream 2 error in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskFlexStream2Error_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x9f), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskFlexStream2Error_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x9f), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the mask for Flex Stream 3 error in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the error mask.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskFlexStream3Error_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x9f), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the error status from the Flex Stream 3 register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved error status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskFlexStream3Error_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x9f), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GP Mask MCS register value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GP Mask MCS register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskMcs_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xa0), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a masked value from a specific register in the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved masked
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskMcs_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa0), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the mask for the LSSI RX1 MCS in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskMcsLssiRx1Mcs_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xa0), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific masked value from a hardware register and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved masked
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskMcsLssiRx1Mcs_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa0), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the mask for the MCS LSSI RX2 configuration in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskMcsLssiRx2Mcs_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xa0), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific masked value from a hardware register and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure used for hardware
 * communication.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskMcsLssiRx2Mcs_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa0), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the second mask for the MCS in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskMcsSecond_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xa0), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific masked value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved masked
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskMcsSecond_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa0), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PA protection channel 1 error mask in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the PA protection channel 1 error mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskPaProtectionCh1Error_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xa1), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PA protection error status for channel 1 from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved error status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskPaProtectionCh1Error_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa1), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PA protection channel 2 error mask in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the PA protection channel 2 error mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskPaProtectionCh2Error_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xa1), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PA protection channel 2 error mask value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved error mask
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskPaProtectionCh2Error_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa1), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF2 synthesizer lock mask in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RF2 synthesizer lock mask.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskRf2SynthLock_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xa0), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the synthesizer lock status from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the synthesizer lock
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskRf2SynthLock_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa0), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF synthesizer lock mask in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RF synthesizer lock mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskRfSynthLock_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xa0), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RF Synth Lock status from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved RF Synth
 * Lock status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskRfSynthLock_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa0), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC mask for RXDP interface errors in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the BBIC mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskRxdpIntfErrorToBbic_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x9e), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskRxdpIntfErrorToBbic_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x9e), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC read request mask for the RXDP interface in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskRxdpIntfReadRequestToBbic_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x9e), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief This function reads a specific register value from a device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the read register value
 * will be stored.
 * @return The function returns an integer status code indicating the success or
 * failure of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskRxdpIntfReadRequestToBbic_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x9e), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the stream error mask in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the stream error mask.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskStreamError_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x9f), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the stream error mask value from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved stream
 * error mask value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskStreamError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x9f), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC mask for TXDP interface errors in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskTxdpIntfErrorToBbic_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x9e), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific error value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved error value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskTxdpIntfErrorToBbic_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x9e), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific bit in the BBIC register by writing a value to the
 * device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskTxdpIntfWriteRequestToBbic_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x9e), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskTxdpIntfWriteRequestToBbic_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x9e), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the watchdog timeout value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the timeout value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskWatchdogTimeout_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xa1), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the watchdog timeout value from a specific register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved watchdog
 * timeout value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_GpMaskWatchdogTimeout_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa1), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LO1 Enable Mux Termination value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the LO1 Enable Mux Termination.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Lo1EnMuxTerm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x161), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Lo1EnMuxTerm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x161), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LO1 Mux R Term value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the LO1 Mux R Term.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Lo1MuxRTerm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x161), (value >> 0), 0x6, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Lo1MuxRTerm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x161), &register_value, 0x6, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias for the LO1 PD mux term in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the bias value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Lo1PdMuxTermBias_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x161), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias value from a specific register for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved bias value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Lo1PdMuxTermBias_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x161), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LO2 enable mux termination value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the LO2 enable mux termination.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Lo2EnMuxTerm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x162), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Lo2EnMuxTerm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x162), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LO2 Mux R Term value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Lo2MuxRTerm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x162), (value >> 0), 0x6, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Lo2MuxRTerm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x162), &register_value, 0x6, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias for the LO2 power down multiplexer in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the bias value to be set
 * for the LO2 power down multiplexer.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Lo2PdMuxTermBias_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x162), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias value from a specific register for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved bias value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Lo2PdMuxTermBias_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x162), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS mode enable value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the CMOS mode enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_McsCmosModeEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x15e), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS mode enable status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved CMOS mode
 * enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_McsCmosModeEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x15e), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS smitt trigger value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_McsCmosSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x15e), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_McsCmosSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x15e), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS delay value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the LVDS delay value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_McsLvdsDelay_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x15e), (value >> 0), 0x1c, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS delay value from a specific register of the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved LVDS delay
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_McsLvdsDelay_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x15e), &register_value, 0x1c, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS polarity inversion configuration for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the polarity inversion
 * setting to be applied.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_McsLvdsPnInv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x15e), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS polarity inversion setting from a specific register
 * of the device.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved polarity
 * inversion value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_McsLvdsPnInv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x15e), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the on-chip termination for the LVDS receiver in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the termination value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_McsLvdsRxOnchipTerm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x15e), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the on-chip termination value for the LVDS receiver from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved termination
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_McsLvdsRxOnchipTerm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x15e), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC power-down mode in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired ADC power-
 * down state.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ModeAdcPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x193), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC power-down mode status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved ADC power-
 * down mode status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ModeAdcPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x193), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the ADC thermal mode value from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved ADC thermal
 * mode value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_ModeAdcTherm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x193), &register_value, 0x1e, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO analog direction control register for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the value to be written
 * to the GPIO analog direction control register.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_NvsGpioAnalogDirectionControlIe_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x159), (value >> 8), 0xf, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x158), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO analog direction control value from the device's
 * register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_NvsGpioAnalogDirectionControlIe_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x159), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x158), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO analog direction control output enable by writing to
 * specific hardware registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 16-bit unsigned integer that specifies the value to be written
 * to the GPIO control registers.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_NvsGpioAnalogDirectionControlOe_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x157), (value >> 8), 0xf, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x156), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO analog direction control output value from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint16_t variable where the retrieved GPIO analog
 * direction control output value will be stored.
 * @return Returns the status of the read operations, with *value containing the
 * combined GPIO analog direction control output value from two
 * registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_NvsGpioAnalogDirectionControlOe_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x157), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x156), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Reads a 16-bit value from two specific registers using SPI
 * communication.
 *
 * @param device A pointer to the device structure used for communication.
 * @param value A pointer to a 16-bit unsigned integer where the read value will
 * be stored.
 * @return Returns the status of the read operations, where a zero indicates
 * success and a non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_NvsGpioAnalogSpiRead_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x15d), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x15c), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO analog SPI source configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the value to be written
 * to the GPIO analog SPI source.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_NvsGpioAnalogSpiSource_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x15b), (value >> 8), 0xf, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x15a), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 16-bit value from two consecutive registers of a device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, which indicates
 * success or failure of the register reads.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_NvsGpioAnalogSpiSource_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x15b), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x15a), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LDO (Low Drop-Out) converter value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the LDO converter.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PdConverterLdo_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x18f), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LDO converter value from a specific register in the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved LDO
 * converter value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PdConverterLdo_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x18f), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the active shield state for the digital reference clock in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the state to set for the active
 * shield (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PdDigRefclkActiveShield_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x194), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the digital reference clock active shield status from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PdDigRefclkActiveShield_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x194), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the digital clock power down state for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the desired power down state for
 * the digital clock.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PdDigclk_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x194), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the digital clock power-down status from a specific register
 * of the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PdDigclk_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x194), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Hready field in the AHB register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the Hready field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgChannel2AhbHready_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1fc), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the HREADY status from a specific register and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved HREADY
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgChannel2AhbHready_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1fc), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the HRESP field in the AHB register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the HRESP field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgChannel2AhbHresp_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1fc), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgChannel2AhbHresp_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1fc), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power enable state for channel 2 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the power enable state to
 * be set for channel 2.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgChannel2PowerEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1fd), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power enable status of channel 2 from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved power enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgChannel2PowerEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1fd), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power gating selection for channel 2 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the power gating
 * selection value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgChannel2PowerGatingSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1fc), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power gating selection value for channel 2 from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved power
 * gating selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgChannel2PowerGatingSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1fc), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power isolation disable state for channel 2 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the power isolation
 * disable state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgChannel2PowerIsoDis_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1fd), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power isolation disable status for channel 2 from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgChannel2PowerIsoDis_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1fd), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power reset state for channel 2 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the power reset state to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgChannel2PowerResetb_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1fd), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power reset status of channel 2 from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved power reset
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgChannel2PowerResetb_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1fd), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power scan latch enable state for channel 2 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A `uint8_t` value representing the state to set for the power
 * scan latch (0 or 1).
 * @return Returns an `int32_t` status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgChannel2PowerScanLatchEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1fd), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power scan latch enable status from a specific register
 * for a given device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device from which the register value will be read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgChannel2PowerScanLatchEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1fd), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the boot wait timer value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the timer value to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonArmBootWaitTimerValue_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x1f9), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x1f8), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the boot wait timer value from the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved timer
 * value will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the register read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonArmBootWaitTimerValue_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1f9), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1f8), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-up wait timer value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the power-up wait timer
 * value to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonPowerupWaitTimerValue_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x1f7), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x1f6), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power-up wait timer value from the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved timer
 * value will be stored.
 * @return Returns the status of the register read operations, where a value of
 * 0 indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonPowerupWaitTimerValue_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1f7), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1f6), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-up enable state for the AHB bridge in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the power-up enable state
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonTimerPowerupAhbBridgeEnEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1f4), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonTimerPowerupAhbBridgeEnEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1f4), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-up arm run enable state in the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonTimerPowerupArmRunEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1f4), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power-up arm run enable status from a specific register
 * of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonTimerPowerupArmRunEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1f4), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the early reset enable value for the power-up timer in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * early reset enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonTimerPowerupEarlyResetbEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1f4), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `PgMonTimerPowerupEarlyResetbEnable` field
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonTimerPowerupEarlyResetbEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1f4), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-up enable/disable state of the page monitor timer in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the power-up
 * enable/disable state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonTimerPowerupEnDisable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1f4), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power-up enable/disable status from a specific register
 * of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonTimerPowerupEnDisable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1f4), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-up isolation disable value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonTimerPowerupIsoDisEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1f4), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power-up isolation disable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonTimerPowerupIsoDisEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1f4), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reference clock enable value in the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonTimerPowerupRefClkEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1f4), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reference clock enable status from a specific register
 * of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved reference
 * clock enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonTimerPowerupRefClkEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1f4), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reference clock enable selection for the power-up timer in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the reference clock enable selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonTimerPowerupRefClkEnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1f4), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reference clock enable selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonTimerPowerupRefClkEnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1f4), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-up reset disable state for the page monitor timer in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to set for the
 * power-up reset disable state.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonTimerPowerupResetbDisable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1f4), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonTimerPowerupResetbDisable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1f4), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the boot ready status in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonitorArmBootReady_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1fa), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the boot readiness status from a specific register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved boot
 * readiness status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonitorArmBootReady_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1fa), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the boot ready selection value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonitorArmBootReadySel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1fa), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the boot ready selection value from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonitorArmBootReadySel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1fa), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power clear state of the AHB SPI bridge in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonitorPowerClearAhbSpiBridge_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1f5), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the ADRV9001 device and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonitorPowerClearAhbSpiBridge_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1f5), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the sleep latch power enable state in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the power enable state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonitorPowerEnableSleepLatch_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1f5), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power enable sleep latch value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonitorPowerEnableSleepLatch_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1f5), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power mode enable state for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the power mode enable state to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonitorPowerModeEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1f5), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power mode enable status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved power mode
 * enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonitorPowerModeEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1f5), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the power state from a specific register and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved power state
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonitorPowerState_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1fb), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the power status from a specific register and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved power status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_PgMonitorPowerStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1fb), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the realignment clock counter clear value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the realignment clock counter clear register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RealignClkCounterClear_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1e9), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the realigned clock counter clear value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RealignClkCounterClear_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1e9), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the realignment clock counter enable status in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to set for the
 * realignment clock counter enable.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RealignClkCounterEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1e9), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the realignment clock counter enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RealignClkCounterEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1e9), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock divider value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the clock divider value
 * to be set.
 * @return Returns the status of the last write operation, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RealignClkDivValue_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1e8), (value >> 24), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x1e7), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x1e6), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x1e5), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves and combines clock division values from multiple registers
 * into a single 32-bit value.
 *
 * @param device A pointer to the device context used for register access.
 * @param value A pointer to a 32-bit integer where the combined clock division
 * value will be stored.
 * @return Returns the status of the last register read operation, indicating
 * success (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RealignClkDivValue_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1e8), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1e7), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1e6), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1e5), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI clock counter clear value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the LSSI clock counter clear register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RealignRx1AnaLssiClkCounterClear_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1ee), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI clock counter clear value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * counter clear value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RealignRx1AnaLssiClkCounterClear_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1ee), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI clock counter enable state for the RX1 analog section of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the enable state for the
 * LSSI clock counter.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RealignRx1AnaLssiClkCounterEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1ee), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI clock counter enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * counter enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RealignRx1AnaLssiClkCounterEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1ee), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI clock divider value for the RX1 analog subsystem in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the clock divider value
 * to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RealignRx1AnaLssiClkDivValue_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x1eb), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x1ea), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI clock divider value for the RX1 analog subsystem by
 * reading two registers.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved clock
 * divider value will be stored.
 * @return Returns the status of the last register read operation, indicating
 * success or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RealignRx1AnaLssiClkDivValue_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1eb), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1ea), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI clock counter clear value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the LSSI clock counter clear register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RealignRx2AnaLssiClkCounterClear_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1ee), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RealignRx2AnaLssiClkCounterClear_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1ee), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI clock counter enable state in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the enable state for the LSSI clock
 * counter.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RealignRx2AnaLssiClkCounterEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1ee), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI clock counter enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * counter enable status will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RealignRx2AnaLssiClkCounterEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1ee), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI clock divider value for the RX2 analog subsystem in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the clock divider value
 * to be set.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the register write operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RealignRx2AnaLssiClkDivValue_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x1ed), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x1ec), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI clock divider value for the RX2 analog subsystem
 * from the device's register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved clock
 * divider value will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the register read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RealignRx2AnaLssiClkDivValue_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1ed), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1ec), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reference clock configuration in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the reference clock configuration register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RefclkClcnfg_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xb2), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reference clock configuration value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved reference
 * clock configuration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RefclkClcnfg_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xb2), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the forced value for the reference clock receiver enable in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the reference clock receiver enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RefclkClkRxEnValueForced_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xb2), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the forced value of the RX enable clock from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RefclkClkRxEnValueForced_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xb2), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the internal divider value for the reference clock in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the divider value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RefclkInternalDivValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x1dd), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the internal divider value for the reference clock from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved divider
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RefclkInternalDivValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1dd), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the internal reference clock enable state for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the enable state of the internal
 * reference clock (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RefclkInternalEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1e4), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the internal reference clock enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved reference
 * clock status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RefclkInternalEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1e4), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the forced value for the reference clock multiplexer in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the reference clock multiplexer.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RefclkMuxValueForced_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xb2), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the forced reference clock multiplexer value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * multiplexer value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RefclkMuxValueForced_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xb2), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reference clock or clock 184 enable bit in the ADRV9001
 * device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RefclkOrClk184ClkEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1e3), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RefclkOrClk184ClkEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1e3), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the forced value for the reference clock oscillator amplifier
 * enable in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the oscillator amplifier enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RefclkOscAmpEnValueForced_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xb2), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the forced value of the reference clock oscillator amplifier
 * enable setting from a specific register.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RefclkOscAmpEnValueForced_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xb2), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reference clock pad divider value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the divider value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RefclkPadDivValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x1de), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reference clock pad divider value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved divider
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RefclkPadDivValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1de), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output enable state of the reference clock pad in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the desired output enable state for
 * the reference clock pad.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RefclkPadOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1dc), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reference clock pad output enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RefclkPadOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1dc), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reference clock RF configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the reference clock RF register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RefclkRf_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xb4), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reference clock RF value from a specific register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved reference
 * clock RF value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RefclkRf_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xb4), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reference clock configuration for the ADRV9001 device using
 * SPI.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that specifies the configuration to be set for
 * the reference clock.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RefclkUseSpiForClkRxEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xb3), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reference clock configuration from a specific register
 * and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RefclkUseSpiForClkRxEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xb3), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the oscillator amplifier enable state in the ADRV9001 device
 * using SPI.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the enable state to be set
 * for the oscillator amplifier.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RefclkUseSpiForOscAmpEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xb3), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the oscillator amplifier enable status from a specific
 * register using SPI.
 *
 * @param device A pointer to the device structure used for communication.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RefclkUseSpiForOscAmpEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xb3), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reference clock multiplexer configuration using SPI for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the reference clock multiplexer.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RefclkUseSpiForRefclkMux_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xb3), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reference clock multiplexer value from a specific
 * register using SPI.
 *
 * @param device A pointer to the device structure used for communication.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RefclkUseSpiForRefclkMux_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xb3), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fine enable value for RF1 in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1EnFineM_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x16b), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the fine enable status of RF1 from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1EnFineM_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x16b), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fine enable value for RF1 in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1EnFineP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x16b), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1EnFineP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x16b), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF1 external low divider reset value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RF1 external low divider reset register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloDivReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x16c), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloDivReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x16c), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DC bias for the RF1 external low-frequency input by writing
 * to a specific register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloEnInputDcBias_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x16c), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DC bias value from a specific register for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved DC bias
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloEnInputDcBias_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x16c), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF1 external low input stage enable value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloEnInputStageM_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x16d), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the external low-frequency enable status from a specific
 * register of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloEnInputStageM_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x16d), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF1 external low-frequency input stage configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the configuration value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloEnInputStageMFbres_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x16d), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloEnInputStageMFbres_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x16d), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF1 external low input stage enable value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloEnInputStageP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x16e), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloEnInputStageP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x16e), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF1 external low enable input stage PF BRES configuration in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloEnInputStagePFbres_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x16e), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloEnInputStagePFbres_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x16e), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the external low termination resistance for RF1 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the termination resistance register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloEnTermRes_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x16c), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the external low termination resistance setting from a
 * specific register of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloEnTermRes_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x16c), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias for the external low-frequency amplifier in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the bias value to be set
 * for the external low-frequency amplifier.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloInAmpBias_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x16c), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias value for the external low-frequency amplifier from
 * a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved bias value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloInAmpBias_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x16c), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the external LO input division ratio for RF1 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the division ratio to be
 * set.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloInDivRatio_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x170), (value >> 8), 0x1, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x16f), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the external local oscillator input division ratio from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * division ratio will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operations failed.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloInDivRatio_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x170), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x16f), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the divide mode for the RF1 external LO in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the divide mode register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloInDivideMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x171), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the external low frequency oscillator divide mode setting
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved divide
 * mode value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloInDivideMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x171), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF1 external LO input driver mode in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloInDriverMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x171), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RF1 external LO input value in driver mode from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloInDriverMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x171), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF1 external low-pass filter bypass configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the bypass configuration
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloInFiltByp_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x171), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the external low-pass filter bypass status from a specific
 * register of the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved filter
 * bypass status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloInFiltByp_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x171), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF1 external low input power down state in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the power down state to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloInPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x171), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RF1 external low input power down status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved status will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloInPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x171), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF1 external low input swap configuration in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloInSwapInputPn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x171), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided output variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloInSwapInputPn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x171), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF1 external low interrupt high register value for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloIntLoHiR_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x171), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloIntLoHiR_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x171), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the external low output division ratio for RF1 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the division ratio to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloOutDivRatio_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x173), (value >> 8), 0x1, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x172), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the external local oscillator output division ratio from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the output division
 * ratio will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloOutDivRatio_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x173), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x172), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reset value for the external LO output divider in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the reset value to be set
 * for the external LO output divider.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloOutDivReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x174), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the external local oscillator output divider reset status
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloOutDivReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x174), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the external low output buffer in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the desired power-down
 * state (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloOutInbufPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x174), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloOutInbufPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x174), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF1 external low output power down state in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired power down
 * state.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloOutPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x174), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the external low output power down status from a specific
 * register of the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved status will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1ExtloOutPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x174), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low buffer power down state for RF1 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the power down state to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1LoBufPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x174), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low buffer power down status from a specific register of
 * the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved low buffer
 * power down status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1LoBufPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x174), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF1 LOGEN divider ratio in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the divider ratio to be
 * set.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any of the write operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1LogenDivRatio_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x176), (value >> 8), 0x1, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x175), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the logarithmic divider ratio from the RF1 register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * divider ratio will be stored.
 * @return Returns the status of the read operations, with *value containing the
 * combined logarithmic divider ratio from two registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1LogenDivRatio_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x176), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x175), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the divide mode for the RF1 log amplifier in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the divide mode to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1LogenDivideMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x177), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the log enable divide mode value from a specific register of
 * the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved log enable
 * divide mode value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1LogenDivideMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x177), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the RF1 log amplifier input buffer in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value indicating the desired power-down state (0 or 1)
 * for the RF1 log amplifier input buffer.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1LogenInbufPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x177), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1LogenInbufPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x177), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF1 Log Enable Power Down state in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the power down state to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1LogenPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x177), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RF1 Log Enable Power Down status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved status
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1LogenPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x177), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the RF1 Logarithmic Amplifier Quad
 * Divider in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the power-down state to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1LogenQuadDivPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x177), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1LogenQuadDivPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x177), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF1 Log Enable Reset register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RF1 Log Enable Reset register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1LogenReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x177), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RF1 LOGEN reset status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1LogenReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x177), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the high range voltage for the VCO buffer in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the VCO buffer high range register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1LogenVcoBufHighR_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x177), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the high register value of the VCO buffer from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1LogenVcoBufHighR_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x177), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF1 power down external low input value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RF1 power down external low input.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1PdExtloIn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x177), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1PdExtloIn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x177), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the PLL charge pump calibration output value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved calibration
 * output value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1PllCpCalOut_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1c9), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the high range value of the RF PLL charge pump from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1PllCpOverRangeHigh_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1ca), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the low range value of the RF PLL charge pump from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1PllCpOverRangeLow_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1ca), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the PLL lock status from a specific register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the PLL lock status will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1PllLock_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1ca), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the VCO ALC word output from the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved VCO
 * ALC word output will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1PllVcoAlcWordOut_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1c8), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1c7), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the VCO calibration status from a specific register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the calibration status
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1PllVcoCalInProgress_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1ca), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the VCO compensation output value from a specific register
 * of the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved VCO
 * compensation output value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1PllVcoCompOut_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1ca), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the coarse band output frequency value from the RF PLL VCO
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * frequency value will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1PllVcoFreqCoarseBandOut_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1c6), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1c5), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the fine band output frequency value from the RF PLL VCO
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved frequency
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1PllVcoFreqFineBandOut_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1c4), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the VCO DAC output value from the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved VCO
 * DAC output value will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1PllVcoTcDacOut_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1c3), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1c2), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF1 selection clock inversion bit in the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RF1 selection clock inversion bit.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1SelCkmInvB_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x178), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1SelCkmInvB_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x178), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF1 selection clock inversion bit in the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1SelCkpInvB_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x178), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific bit field from a hardware register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1SelCkpInvB_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x178), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the coarse RF selection value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the coarse RF selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1SelCoarseM_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x179), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the coarse RF selection value from a specific register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1SelCoarseM_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x179), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the coarse selection value for RF1 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the coarse selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1SelCoarseP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x17a), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the coarse selection value for RF1 from a specific register
 * in the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved coarse
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1SelCoarseP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x17a), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF1 selection for the external LO input in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the RF1 selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1SelExtloIn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x171), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RF1 selection external low input value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1SelExtloIn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x171), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fine selection value for RF1 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the fine selection value
 * to be set.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1SelFineM_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x17b), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the fine selection value for RF1 from the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved fine
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1SelFineM_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x17b), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fine selection value for RF1 in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the fine selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1SelFineMB_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x17b), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1SelFineMB_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x17b), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fine selection value for RF1 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the fine selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1SelFineP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x17c), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the fine selection value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1SelFineP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x17c), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fine selection for RF1 in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the fine selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1SelFinePB_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x17c), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf1SelFinePB_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x17c), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fine enable value for RF2 in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RF2 enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2EnFineM_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x17d), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2EnFineM_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x17d), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fine power enable register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2EnFineP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x17d), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2EnFineP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x17d), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF2 external low divider reset value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RF2 external low divider reset register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloDivReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x17e), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloDivReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x17e), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DC bias for the RF2 external low input by writing a specified
 * value to a hardware register.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloEnInputDcBias_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x17e), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DC bias value from a specific register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved DC bias
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloEnInputDcBias_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x17e), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF2 external low input stage enable value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloEnInputStageM_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x17f), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided output variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloEnInputStageM_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x17f), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF2 external low enable input stage for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloEnInputStageMFbres_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x17f), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloEnInputStageMFbres_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x17f), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF2 external low input stage enable value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloEnInputStageP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x180), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided output variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloEnInputStageP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x180), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF2 external low enable input stage PF bias value in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RF2 external low enable input stage PF bias.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloEnInputStagePFbres_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x180), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloEnInputStagePFbres_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x180), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF2 external low enable termination resistance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the termination resistance.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloEnTermRes_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x17e), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloEnTermRes_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x17e), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias for the external low input amplifier of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the bias value to be set
 * for the amplifier.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloInAmpBias_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x17e), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias value for the external low input amplifier from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved bias value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloInAmpBias_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x17e), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF2 external LO input divider ratio in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the divider ratio to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the operations performed.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloInDivRatio_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x182), (value >> 8), 0x1, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x181), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the external LO input division ratio from the ADRV9001
 * device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * division ratio will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloInDivRatio_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x182), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x181), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF2 external low input divide mode in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloInDivideMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x183), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RF2 external low input divide mode value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloInDivideMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x183), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF2 external low input driver mode configuration for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RF2 external low input driver mode.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloInDriverMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x183), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloInDriverMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x183), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF2 external low-pass filter bypass configuration for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the bypass configuration
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloInFiltByp_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x183), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloInFiltByp_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x183), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF2 external low input power down state in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the power down state to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloInPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x183), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RF2 external low input power down status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved status will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloInPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x183), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF2 external low input swap configuration in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloInSwapInputPn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x183), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided output variable.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloInSwapInputPn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x183), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF2 external low interrupt high register value for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloIntLoHiR_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x183), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloIntLoHiR_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x183), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the external low output divider ratio for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the divider ratio to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloOutDivRatio_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x185), (value >> 8), 0x1, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x184), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the external low output division ratio from the ADRV9001
 * device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * division ratio will be stored.
 * @return Returns the status of the read operations, with the output value
 * being stored in the provided pointer.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloOutDivRatio_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x185), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x184), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reset value for the RF2 external low output divider in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the reset register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloOutDivReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x186), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided output variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloOutDivReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x186), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the external low output buffer in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the power-down state to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloOutInbufPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x186), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloOutInbufPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x186), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the RF2 external low output in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the power-down state to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloOutPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x186), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2ExtloOutPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x186), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF2 low buffer power down state in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the power down state to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2LoBufPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x186), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RF2 low buffer power down status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2LoBufPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x186), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF2 LOGEN division ratio in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the division ratio to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2LogenDivRatio_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x188), (value >> 8), 0x1, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x187), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RF2 LOGEN divider ratio from the device's register map.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * divider ratio will be stored.
 * @return Returns the status of the read operations, with *value containing the
 * combined RF2 LOGEN divider ratio from two registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2LogenDivRatio_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x188), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x187), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the divide mode for the RF2 LOGEN in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the divide mode to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2LogenDivideMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x189), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RF2 LOGEN divide mode value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved divide
 * mode value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2LogenDivideMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x189), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF2 Logen input buffer power down state in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the power down state to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2LogenInbufPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x189), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2LogenInbufPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x189), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF2 Log Enable Power Down state in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the power down state to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2LogenPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x189), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RF2 Log Enable Power Down status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2LogenPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x189), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the RF2 Logen Quad Divider in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the power-down state to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2LogenQuadDivPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x189), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2LogenQuadDivPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x189), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF2 LOGEN reset value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RF2 LOGEN reset register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2LogenReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x189), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RF2 Log Enable Reset value from a specific register in
 * the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2LogenReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x189), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the high range buffer value for the VCO in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the VCO buffer.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2LogenVcoBufHighR_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x189), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the high register value of the VCO buffer from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2LogenVcoBufHighR_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x189), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF2 power-down external low input value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RF2 power-down external low input.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2PdExtloIn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x189), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2PdExtloIn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x189), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the calibration output value from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration output value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2PllCpCalOut_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1d2), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the high range value of the RF PLL charge pump from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2PllCpOverRangeHigh_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1d3), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the low range value of the RF PLL charge pump from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2PllCpOverRangeLow_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1d3), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the PLL lock status from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the PLL lock status will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2PllLock_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1d3), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the VCO ALC word output from the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved VCO
 * ALC word output will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success and a non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2PllVcoAlcWordOut_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1d1), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1d0), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the VCO calibration status from a specific register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the calibration status
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2PllVcoCalInProgress_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1d3), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the VCO compensation output value from a specific register
 * of the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved VCO
 * compensation output value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2PllVcoCompOut_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1d3), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the coarse band output frequency value from the RF PLL VCO
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * frequency value will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2PllVcoFreqCoarseBandOut_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1cf), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1ce), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the fine band output frequency value from the VCO register
 * of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved frequency
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2PllVcoFreqFineBandOut_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1cd), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the VCO DAC output value from the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved VCO
 * DAC output value will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2PllVcoTcDacOut_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1cc), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1cb), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF2 selection for the CKM inversion in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RF2 selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2SelCkmInvB_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x18a), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2SelCkmInvB_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x18a), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF2 selection clock inversion bit in the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RF2 selection clock inversion bit.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2SelCkpInvB_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x18a), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific bit field from a hardware register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2SelCkpInvB_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x18a), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the coarse RF2 selection value in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the coarse RF2 selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2SelCoarseM_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x18b), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the coarse RF selection value from a specific register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2SelCoarseM_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x18b), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the coarse RF2 selection value in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the coarse RF2 selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2SelCoarseP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x18c), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the coarse RF selection value from a specific register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved coarse RF
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2SelCoarseP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x18c), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF2 selection for the external LO input in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the RF2 selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2SelExtloIn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x183), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the external low input selection value from a specific
 * register of the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2SelExtloIn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x183), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fine selection value for RF2 in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the fine selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2SelFineM_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x18d), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the fine selection value from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2SelFineM_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x18d), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fine selection value for the RF2 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the fine selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2SelFineMB_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x18d), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2SelFineMB_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x18d), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fine selection value for the RF2 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the fine selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2SelFineP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x18e), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the fine selection value from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2SelFineP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x18e), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fine selection value for the RF2 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the fine selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2SelFinePB_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x18e), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rf2SelFinePB_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x18e), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO mask for the AGC gain change pulse in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO mask.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO mask setting operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx1AgcGainchangePulseGpioMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x149), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC gain change pulse GPIO mask from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO mask
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx1AgcGainchangePulseGpioMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x149), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC gain change pulse GPIO selection for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the AGC gain change pulse GPIO selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx1AgcGainchangePulseGpioSelect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x148), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC gain change pulse GPIO selection value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx1AgcGainchangePulseGpioSelect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x148), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO mask for manual gain lock in the ADRV9001 RX1 AGC.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO mask.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO mask setting operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx1AgcManaulGainLockGpioMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x14b), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the manual gain lock GPIO mask value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a `uint8_t` variable where the retrieved GPIO mask
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx1AgcManaulGainLockGpioMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x14b), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO selection for manual gain lock in the ADRV9001 RX1 AGC
 * register.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO selection.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO selection write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx1AgcManaulGainLockGpioSelect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x14a), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the manual gain lock GPIO selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx1AgcManaulGainLockGpioSelect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x14a), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO mask for the AGC slow loop freeze in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO mask.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx1AgcSlowloopFreezeGpioMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x147), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO mask for the AGC slow loop freeze setting from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO mask
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx1AgcSlowloopFreezeGpioMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x147), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO selection for the AGC slow loop freeze in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the GPIO selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx1AgcSlowloopFreezeGpioSelect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x146), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO selection value for the AGC slow loop freeze from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx1AgcSlowloopFreezeGpioSelect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x146), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO mask for the RX1 decgain in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO mask.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO mask setting operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx1DecgainGpioMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x141), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO mask for the Rx1 decgain from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO mask
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx1DecgainGpioMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x141), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO select for the Rx1 decgain in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO select.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO select write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx1DecgainGpioSelect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x140), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the decibel gain GPIO selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx1DecgainGpioSelect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x140), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO mask for the Rx1 increment gain in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO mask.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO mask setting operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx1IncgainGpioMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x141), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the increment gain GPIO mask value from a specific register
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO mask
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx1IncgainGpioMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x141), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO select for the Rx1 incremental gain in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO select.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx1IncgainGpioSelect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x140), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the increment gain GPIO selection value from a specific
 * register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx1IncgainGpioSelect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x140), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the RX1 LO1 input buffer in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the desired power-down
 * state (0 or 1) for the input buffer.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx1Lo1InbufPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x163), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx1Lo1InbufPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x163), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the Rx1 low 2 input buffer in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the power-down state to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx1Lo2InbufPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x163), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx1Lo2InbufPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x163), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the Rx1 LOMUX in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the power-down state to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx1LomuxPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x163), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RX1 LO multiplex power-down register from
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx1LomuxPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x163), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the coefficient selection for the Rx1 magnitude 13-tap filter in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the coefficient selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx1Mag13tapsCoeffSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x154), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific coefficient selection value from a hardware
 * register.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved coefficient
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx1Mag13tapsCoeffSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x154), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low selection value for the Rx1 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the Rx1 selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx1SelLo2_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x167), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx1SelLo2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x167), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO mask for the AGC gain change pulse in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx2AgcGainchangePulseGpioMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x14f), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC gain change pulse GPIO mask from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved GPIO mask
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx2AgcGainchangePulseGpioMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x14f), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO selection for the AGC gain change pulse in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO selection.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO selection write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx2AgcGainchangePulseGpioSelect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x14e), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC gain change pulse GPIO selection value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx2AgcGainchangePulseGpioSelect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x14e), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO mask for manual gain lock in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO mask.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO mask setting operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx2AgcManaulGainLockGpioMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x151), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO mask for the manual gain lock of the Rx2 AGC from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO mask
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx2AgcManaulGainLockGpioMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x151), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO select for manual gain lock in the ADRV9001 RX2 AGC.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO select register.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx2AgcManaulGainLockGpioSelect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x150), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the manual gain lock GPIO selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx2AgcManaulGainLockGpioSelect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x150), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO mask for the slow loop freeze of the RX2 AGC in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO mask.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx2AgcSlowloopFreezeGpioMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x14d), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO mask for the AGC slow loop freeze setting from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO mask
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx2AgcSlowloopFreezeGpioMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x14d), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO selection for the slow loop freeze of the AGC in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the GPIO selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO selection write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx2AgcSlowloopFreezeGpioSelect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x14c), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO selection value for the Rx2 AGC slow loop freeze
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx2AgcSlowloopFreezeGpioSelect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x14c), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO mask for the RX2 decimation gain in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx2DecgainGpioMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x143), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO mask for the RX2 decgain from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO mask
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx2DecgainGpioMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x143), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO select for the Rx2 decgain in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO select.
 * @return Returns an integer status code indicating the result of the write
 * operation, where 0 typically indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx2DecgainGpioSelect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x142), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO select value for the Rx2 decgain from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO select
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx2DecgainGpioSelect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x142), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO mask for the Rx2 increment gain in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO mask.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO mask setting operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx2IncgainGpioMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x143), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the increment gain GPIO mask value from a specific register
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO mask
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx2IncgainGpioMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x143), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO select for the Rx2 incremental gain in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO select.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx2IncgainGpioSelect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x142), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the increment gain GPIO selection value from a specific
 * register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved GPIO
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation from the register.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx2IncgainGpioSelect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x142), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state of the Rx2 Lo1 input buffer in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value indicating the desired power down state (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx2Lo1InbufPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x164), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx2Lo1InbufPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x164), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the Rx2 low-frequency input buffer in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the power-down state to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx2Lo2InbufPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x164), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx2Lo2InbufPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x164), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the Rx2 Lomux in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the power-down state to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx2LomuxPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x164), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power-down status of the Rx2 Lomux from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved power-down
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx2LomuxPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x164), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the coefficient selection for the Rx2 magnitude 13 taps in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the coefficient selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx2Mag13tapsCoeffSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x154), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the 13-tap coefficient selection value from a specific
 * register for the Rx2 channel.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved coefficient
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx2Mag13tapsCoeffSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x154), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the register map for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx2SelLo2_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x168), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the lower 8 bits of the Rx2 selection register from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Rx2SelLo2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x168), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the constant delay value for the RXADC capacitor in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the constant delay value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RxadcCapConstDelay_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RXADC capacitor constant delay value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved capacitor
 * constant delay value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RxadcCapConstDelay_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RXADC calibration start value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the calibration start
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RxadcCcalStart_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x0), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RXADC calibration start value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved calibration
 * start value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RxadcCcalStart_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x0), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the measured value from the RXADC G register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the measured value
 * will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RxadcGMeasured_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x7), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x6), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the ADC N1 count from the device's register map.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved ADC
 * N1 count will be stored.
 * @return Returns the status of the read operations, with `*value` containing
 * the combined ADC N1 count from two registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RxadcN1Count_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x3), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x2), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the ADC N2 count from the device's register map.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved ADC
 * N2 count will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RxadcN2Count_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x5), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x4), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the RXADC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the power-down state to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RxadcPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x0), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power-down status of the RXADC from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved RXADC
 * power-down status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RxadcPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x0), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RXADC calibration start value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the calibration start
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RxadcRcalStart_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x0), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value from the RXADC register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved calibration
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RxadcRcalStart_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x0), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RXTIA shift selection in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the shift selection value
 * to be written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RxtiaShiftSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x153), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RXTIA shift selection value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved RXTIA shift
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_RxtiaShiftSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x153), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC stream error configuration in the SPI register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the error configuration
 * value to be set.
 * @return Returns the status of the last write operation, which indicates
 * success (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp0BbicStreamErrorToSpi_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x53), (value >> 16), 0x7f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x52), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x51), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit error value from the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved error
 * value will be stored.
 * @return Returns the status of the last read operation, which indicates
 * success (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp0BbicStreamErrorToSpi_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x53), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x52), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x51), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the BBIC stream status from the ADRV9001 device by reading
 * multiple registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * stream status will be stored.
 * @return Returns the status of the last read operation, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp0BbicStreamStatus_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x50), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x4f), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x4e), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the completed stream number from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the completed stream
 * number will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp0CompletedStreamNum_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x40), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ECC data parity error status in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the parity error status
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp0EccDataParityError_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x4d), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ECC data parity error status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved parity error
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp0EccDataParityError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x4d), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ECC disable register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that indicates whether ECC should be disabled
 * (1) or enabled (0).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp0EccDisable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x4d), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ECC disable status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved ECC disable
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp0EccDisable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x4d), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the IRQ sensitivity for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the IRQ sensitivity value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp0IrqSensitivity_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x4d), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the IRQ sensitivity setting from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure that contains the necessary
 * context for the operation.
 * @param value A pointer to a `uint8_t` variable where the retrieved IRQ
 * sensitivity value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp0IrqSensitivity_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x4d), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the last stream number in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the last stream number to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp0LastStreamNum_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x3f), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the last stream number from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the last stream number
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp0LastStreamNum_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x3f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the memory response mask for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the memory response mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp0MemHrespMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x4d), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the memory response mask value from a specific register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp0MemHrespMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x4d), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the ADRV9001 device register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp0Select_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x3b), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp0Select_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x3b), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the stream base value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the stream base value to
 * be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp0StreamBase_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x3e), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x3d), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 16-bit value from two consecutive hardware registers.
 *
 * @param device A pointer to the device structure used for hardware
 * communication.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp0StreamBase_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x3e), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x3d), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the stream error status in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the stream error status
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp0StreamError_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x4c), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the stream error status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved stream
 * error value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp0StreamError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x4c), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the stream processing address in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp0StreamProcAddr_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x41), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp0StreamProcAddr_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x41), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves data from two specific registers and combines them into a
 * single 16-bit value.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a 16-bit unsigned integer where the combined
 * register values will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the register read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp0StreamProcData_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x43), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x42), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the read enable value for the ADRV9001 device's stream processing
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp0StreamProcRden_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x41), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp0StreamProcRden_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x41), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the stream reset value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * stream reset.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp0StreamReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x3c), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the stream reset status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp0StreamReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x3c), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets debug data for the stream processor by writing parts of a 64-bit
 * value to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 64-bit unsigned integer that contains the debug data to be
 * written to the registers.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp0StreamprocDebugData_Set(void *device,
    uint64_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x4b), (value >> 56));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x4a), (value >> 48));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x49), (value >> 40));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x48), (value >> 32));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x47), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x46), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x45), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x44), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves debug data from a series of registers and combines them into
 * a single 64-bit value.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a 64-bit integer where the combined register values
 * will be stored.
 * @return Returns the status of the last register read operation, with a value
 * of 0 indicating success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp0StreamprocDebugData_Get(void *device,
    uint64_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x4b), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x4a), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x49), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x48), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x47), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x46), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x45), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x44), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC stream error value in the SPI register map for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the error value to be set
 * in the SPI registers.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp1BbicStreamErrorToSpi_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x6b), (value >> 16), 0x7f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x6a), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x69), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a stream error value from the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * stream error value will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero). The `value` pointer contains the combined
 * stream error value from the three registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp1BbicStreamErrorToSpi_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x6b), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x6a), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x69), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the BBIC stream status from the ADRV9001 device by reading
 * specific registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * stream status will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp1BbicStreamStatus_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x68), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x67), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x66), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the completed stream number from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the completed stream
 * number will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp1CompletedStreamNum_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x58), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ECC data parity error status in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the parity error status
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp1EccDataParityError_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x65), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ECC data parity error status from a specific register of
 * the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved parity
 * error value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp1EccDataParityError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x65), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ECC disable register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value indicating the ECC disable state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp1EccDisable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x65), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ECC disable status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved ECC
 * disable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp1EccDisable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x65), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the IRQ sensitivity for the SP1 register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the IRQ sensitivity value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp1IrqSensitivity_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x65), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the IRQ sensitivity value from a specific register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved IRQ
 * sensitivity value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp1IrqSensitivity_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x65), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the last stream number in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the last stream number to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp1LastStreamNum_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x57), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the last stream number from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device context used for reading the register.
 * @param value A pointer to a uint8_t variable where the last stream number
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp1LastStreamNum_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x57), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the HRESP mask for the SP1 memory in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the HRESP mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp1MemHrespMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x65), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific masked response value from a hardware register.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp1MemHrespMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x65), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns the status of the write operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp1Select_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x3b), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp1Select_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x3b), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the base stream value for the ADRV9001 device by writing to
 * specific registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the value to be set in
 * the stream base.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp1StreamBase_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x56), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x55), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 16-bit value from two consecutive hardware registers.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp1StreamBase_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x56), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x55), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the stream error status in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the stream error status
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp1StreamError_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x64), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the stream error status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved stream
 * error value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp1StreamError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x64), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the stream processing address in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp1StreamProcAddr_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x59), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp1StreamProcAddr_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x59), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves data from two specific registers and combines them into a
 * single 16-bit value.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a 16-bit unsigned integer where the combined
 * register values will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any read operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp1StreamProcData_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x5b), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x5a), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the read enable value for the SP1 stream processing in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the read enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp1StreamProcRden_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x59), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp1StreamProcRden_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x59), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the stream reset value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the stream reset register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp1StreamReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x54), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the stream reset status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp1StreamReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x54), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets debug data for the `Sp1Streamproc` by writing parts of a 64-bit
 * value to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 64-bit unsigned integer that contains the debug data to be
 * written to the registers.
 * @return Returns the status of the last register write operation, where a non-
 * zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp1StreamprocDebugData_Set(void *device,
    uint64_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x63), (value >> 56));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x62), (value >> 48));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x61), (value >> 40));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x60), (value >> 32));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x5f), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x5e), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x5d), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x5c), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves debug data from a series of registers and combines them into
 * a single 64-bit value.
 *
 * @param device A pointer to the device context used for register access.
 * @param value A pointer to a 64-bit integer where the combined register values
 * will be stored.
 * @return Returns the status of the last register read operation, with a value
 * of 0 indicating success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp1StreamprocDebugData_Get(void *device,
    uint64_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x63), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x62), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x61), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x60), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x5f), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x5e), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x5d), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x5c), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC stream error configuration in the SPI register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the value to be written
 * to the SPI registers.
 * @return Returns the status of the last write operation, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp2BbicStreamErrorToSpi_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x83), (value >> 16), 0x7f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x82), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x81), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit error status from the ADRV9001 device's SPI
 * registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved error
 * status will be stored.
 * @return Returns the status of the last read operation, which indicates
 * success (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp2BbicStreamErrorToSpi_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x83), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x82), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x81), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the BBIC stream status from the ADRV9001 device by reading
 * multiple registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * stream status will be stored.
 * @return Returns the status of the last operation (0 for success, non-zero for
 * failure) and updates the `value` pointer with the combined 24-bit
 * stream status.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp2BbicStreamStatus_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x80), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x7f), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x7e), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the completed stream number from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device context used for reading the register.
 * @param value A pointer to a uint8_t variable where the completed stream
 * number will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp2CompletedStreamNum_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x70), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ECC data parity error status in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the parity error register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp2EccDataParityError_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x7d), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ECC data parity error status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved parity
 * error value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp2EccDataParityError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x7d), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ECC disable configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that indicates the ECC disable setting to be
 * applied.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp2EccDisable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x7d), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ECC disable status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved ECC
 * disable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp2EccDisable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x7d), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the IRQ sensitivity for the SP2 register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the IRQ sensitivity value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp2IrqSensitivity_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x7d), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the IRQ sensitivity setting from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved IRQ
 * sensitivity value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp2IrqSensitivity_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x7d), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the last stream number in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the last stream number to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp2LastStreamNum_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x6f), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the last stream number from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the last stream number
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp2LastStreamNum_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x6f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the memory response mask for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the memory response mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp2MemHrespMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x7d), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp2MemHrespMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x7d), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SP2 selection value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the SP2 selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp2Select_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x3b), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific value from a hardware register and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp2Select_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x3b), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SP2 stream base register values for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the value to be written
 * to the SP2 stream base registers.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp2StreamBase_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x6e), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x6d), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 16-bit value from two consecutive hardware registers.
 *
 * @param device A pointer to the device structure used for hardware
 * communication.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the register read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp2StreamBase_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x6e), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x6d), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the stream error status in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the stream error status
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp2StreamError_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x7c), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the stream error status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved stream
 * error value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp2StreamError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x7c), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SP2 stream processing address in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp2StreamProcAddr_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x71), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp2StreamProcAddr_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x71), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves data from two specific registers and combines their values
 * into a single output.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a 16-bit unsigned integer where the combined
 * register values will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any read operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp2StreamProcData_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x73), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x72), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the read enable value for the SP2 stream processing in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the read enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp2StreamProcRden_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x71), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp2StreamProcRden_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x71), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SP2 stream reset value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the SP2 stream reset register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp2StreamReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x6c), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the SP2 stream
 * reset from the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp2StreamReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x6c), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets debug data for the SP2 stream processor by writing parts of a
 * 64-bit value to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 64-bit unsigned integer value that will be split and written
 * to multiple registers.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp2StreamprocDebugData_Set(void *device,
    uint64_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x7b), (value >> 56));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x7a), (value >> 48));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x79), (value >> 40));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x78), (value >> 32));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x77), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x76), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x75), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x74), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves debug data from a series of registers and combines them into
 * a single 64-bit value.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a 64-bit integer where the combined register values
 * will be stored.
 * @return Returns the status of the last register read operation, with a value
 * of 0 indicating success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp2StreamprocDebugData_Get(void *device,
    uint64_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x7b), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x7a), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x79), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x78), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x77), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x76), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x75), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x74), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SPI register values for the BBIC stream error in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer containing the value to be written to
 * the SPI registers.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp3BbicStreamErrorToSpi_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x9b), (value >> 16), 0x7f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x9a), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x99), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit error value from specific registers of a device and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved error
 * value will be stored.
 * @return Returns the status of the last read operation, which indicates
 * success (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp3BbicStreamErrorToSpi_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x9b), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x9a), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x99), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the stream status from the ADRV9001 device by reading
 * specific registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * stream status will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp3BbicStreamStatus_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x98), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x97), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x96), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the completed stream number from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the completed stream
 * number will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp3CompletedStreamNum_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x88), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ECC data parity error status in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the parity error status
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp3EccDataParityError_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x95), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ECC data parity error status from a specific register of
 * the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved parity
 * error value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp3EccDataParityError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x95), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ECC disable configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value indicating the ECC disable setting to be
 * applied.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp3EccDisable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x95), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ECC disable status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved ECC disable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp3EccDisable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x95), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the IRQ sensitivity for the ADRV9001 device by writing a
 * specified value to a specific register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the IRQ sensitivity value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp3IrqSensitivity_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x95), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the IRQ sensitivity setting from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved IRQ
 * sensitivity value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp3IrqSensitivity_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x95), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the last stream number in the ADRV9001 NVS register.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the last stream number to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp3LastStreamNum_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x87), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the last stream number from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved stream
 * number will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp3LastStreamNum_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x87), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the HRESP mask for the SP3 memory in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * as the HRESP mask.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp3MemHrespMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x95), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp3MemHrespMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x95), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp3Select_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x3b), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware
 * communication.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp3Select_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x3b), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SP3 stream base register values for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the value to be written
 * to the SP3 stream base registers.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp3StreamBase_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x86), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x85), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 16-bit value from two consecutive registers in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, which
 * indicates success (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp3StreamBase_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x86), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x85), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SP3 stream error status in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the stream error register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp3StreamError_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x94), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the stream error status from a specific register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved stream error
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp3StreamError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x94), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SP3 stream processing address in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the SP3 stream processing address.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp3StreamProcAddr_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x89), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp3StreamProcAddr_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x89), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves data from two specific registers and combines their values
 * into a single output.
 *
 * @param device A pointer to the device context used for register access.
 * @param value A pointer to a 16-bit unsigned integer where the combined
 * register values will be stored.
 * @return Returns the status of the last register read operation, which
 * indicates success (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp3StreamProcData_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x8b), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x8a), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the read enable value for the SP3 stream processing in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the read enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp3StreamProcRden_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x89), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp3StreamProcRden_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x89), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the stream reset value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the stream reset register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp3StreamReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x84), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the stream reset status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp3StreamReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x84), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets debug data for the SP3 stream processor by writing parts of a
 * 64-bit value to specific registers.
 *
 * @param device A pointer to the device context used for register access.
 * @param value A 64-bit integer value to be split and written to multiple
 * registers.
 * @return Returns the status of the last register write operation, where a non-
 * zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp3StreamprocDebugData_Set(void *device,
    uint64_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x93), (value >> 56));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x92), (value >> 48));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x91), (value >> 40));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x90), (value >> 32));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x8f), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x8e), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x8d), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x8c), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 64-bit debug data value from a series of hardware
 * registers.
 *
 * @param device A pointer to the device context from which the debug data is to
 * be read.
 * @param value A pointer to a 64-bit integer where the retrieved debug data
 * will be stored.
 * @return Returns 0 on success or a non-zero error code if any register read
 * operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Sp3StreamprocDebugData_Get(void *device,
    uint64_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x93), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x92), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x91), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x90), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x8f), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x8e), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x8d), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x8c), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the automatic increment value in the ADRV9001 register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * automatic increment.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SpAutoIncr_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x31), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in a
 * provided variable.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SpAutoIncr_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x31), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SPI bus address in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the SPI bus address to be
 * set.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any of the write operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SpBusAddr_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x35), (value >> 26), 0x3f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x34), (value >> 18));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x33), (value >> 10));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x32), (value >> 2));
    if (0 != status) return status;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x3a), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 40-bit address from a series of registers and fields in
 * the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * address will be stored.
 * @return Returns the status of the last read operation, with a value of 0
 * indicating success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SpBusAddr_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x35), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x34), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x33), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x32), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x3a), &register_value, 0x3, 0x0);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the device's register map with a given value.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SpBusResponse_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x31), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SpBusResponse_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x31), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SPI bus size for the ADRV9001 device by writing a specified
 * value to a specific register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired SPI bus size.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SpBusSize_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x31), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the size of the SPI bus from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved SPI bus size
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SpBusSize_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x31), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the status of a specific register and stores its value in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SpBusWaiting_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x31), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the legacy mode value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the legacy mode value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SpLegacyMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x31), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SpLegacyMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x31), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the main clock enable register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the clock enable state to be set (0
 * or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SpMainClkEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x1f3), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the main clock enable status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SpMainClkEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x1f3), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief The `adrv9001_NvsRegmapCore1_SpMemWriteData_Set` function writes a
 * 32-bit value to a series of hardware registers.
 *
 * @param device A pointer to the device context used for writing to the
 * hardware registers.
 * @param value A 32-bit unsigned integer that contains the data to be written
 * to the registers.
 * @return The function returns an integer status code indicating the success
 * (0) or failure (non-zero) of the last register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SpMemWriteData_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x39), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x38), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x37), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x36), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Reads data from a series of registers and combines them into a single
 * 32-bit value.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a 32-bit unsigned integer where the combined
 * register values will be stored.
 * @return Returns the status of the last register read operation, with the
 * combined register values stored in the location pointed to by the
 * value parameter.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SpMemWriteData_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x39), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x38), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x37), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x36), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the register map of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SpRdWrb_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x31), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief The `adrv9001_NvsRegmapCore1_SpRdWrb_Get` function reads a specific
 * register value from a device and stores it in the provided pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a `uint8_t` variable where the read register value
 * will be stored.
 * @return The function returns an `int32_t` status code indicating the success
 * or failure of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SpRdWrb_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x31), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output selection for the GPIO RX1 channel control in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the output selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioRx1ChanControlOutSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x144), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO RX1 channel control output selection value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioRx1ChanControlOutSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x144), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a value from a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioRx1In_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xb0), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output selection for the GPIO RX1 main control in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioRx1MainControlOutSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x144), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioRx1MainControlOutSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x144), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO output value for the RX1 channel in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO output.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioRx1Out_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0xac), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a value from a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioRx1Out_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xac), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output selection for the GPIO RX2 channel control in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO RX2 channel control output selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioRx2ChanControlOutSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x144), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioRx2ChanControlOutSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x144), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a value from a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioRx2In_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xb1), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output selection for the GPIO RX2 main control in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioRx2MainControlOutSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x144), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioRx2MainControlOutSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x144), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO output value for the RX2 channel in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO output.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioRx2Out_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0xad), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a value from a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioRx2Out_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xad), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output selection for the GPIO transmission channel in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the output selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioTx1ChanControlOutSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x144), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the output selection value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved output
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioTx1ChanControlOutSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x144), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a value from a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioTx1In_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xae), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output selection for the main control of the SSI CMOS GPIO
 * Tx1 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioTx1MainControlOutSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x144), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioTx1MainControlOutSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x144), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO output value for the SSI CMOS interface in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO output.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioTx1Out_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0xa9), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO output value from a specific register and stores it
 * in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved GPIO
 * output value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioTx1Out_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xa9), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO selection for the reference clock in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the GPIO selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioTx1RefclkGpioSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x145), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO selection value for the reference clock from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioTx1RefclkGpioSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x145), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioTx1RefclkIn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xab), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reference clock output for the GPIO TX1 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the reference clock output.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioTx1RefclkOut_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xa8), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reference clock output value from a specific register
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved reference
 * clock output value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioTx1RefclkOut_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa8), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the channel control output selection for the GPIO transmit
 * interface of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the control register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioTx2ChanControlOutSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x144), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided output variable.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioTx2ChanControlOutSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x144), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a value from a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioTx2In_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xaf), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output selection for the GPIO transmit control of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the control register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioTx2MainControlOutSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x144), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioTx2MainControlOutSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x144), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO output value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO output.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioTx2Out_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0xaa), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a value from a specific register and stores it in the
 * provided output variable.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioTx2Out_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0xaa), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO selection for the reference clock in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the GPIO selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioTx2RefclkGpioSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x145), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO selection value for the reference clock from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioTx2RefclkGpioSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x145), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioTx2RefclkIn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xab), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reference clock output for the GPIO Tx2 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the reference clock output.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioTx2RefclkOut_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xa8), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiCmosGpioTx2RefclkOut_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa8), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SSI RX1 port disable register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer that specifies the value to write to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiRx1PortDisable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xa7), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SSI RX1 port disable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved status will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiRx1PortDisable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa7), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SSI RX2 port disable register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to write to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiRx2PortDisable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xa7), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SSI RX2 port disable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved status will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiRx2PortDisable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa7), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Disables the SSI Tx1 port by writing a specified value to a hardware
 * register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register, determining the state of the SSI Tx1 port.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiTx1PortDisable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xa7), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SSI Tx1 port disable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved status will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiTx1PortDisable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa7), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SSI Tx2 port disable register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that specifies the disable state to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiTx2PortDisable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xa7), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SSI Tx2 port disable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved status will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SsiTx2PortDisable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xa7), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO0 pin selection in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO0 pin selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_StreamProcGpio0PinSelect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x13a), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO0 pin selection value from a specific register in
 * the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO0 pin
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_StreamProcGpio0PinSelect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x13a), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pin selection for the ADRV9001 device by writing a
 * specified value to a specific register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO pin selection register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_StreamProcGpio1PinSelect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x13a), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO pin selection value from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO pin
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_StreamProcGpio1PinSelect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x13a), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO2 pin selection in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO2 pin selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_StreamProcGpio2PinSelect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x13b), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO2 pin selection value from a specific register in
 * the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO2 pin
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_StreamProcGpio2PinSelect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x13b), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO3 pin selection in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO3 pin selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_StreamProcGpio3PinSelect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x13b), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_StreamProcGpio3PinSelect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x13b), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pin mask for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the GPIO pin mask value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO pin mask setting operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_StreamProcGpioPinMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x139), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO pin mask value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO pin
 * mask will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_StreamProcGpioPinMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x139), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the spare register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SwSpareRegister0_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x1d4), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific spare register from the device and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SwSpareRegister0_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1d4), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the spare register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SwSpareRegister1_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x1d5), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific spare register from the device and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SwSpareRegister1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1d5), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the spare register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SwSpareRegister2_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x1d6), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register from the device and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SwSpareRegister2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1d6), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 3 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the spare register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SwSpareRegister3_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x1d7), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific spare register from the device and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SwSpareRegister3_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1d7), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 4 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the spare register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SwSpareRegister4_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x1d8), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific spare register from the device and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SwSpareRegister4_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1d8), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 5 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the spare register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SwSpareRegister5_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x1d9), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific spare register from the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SwSpareRegister5_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1d9), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 6 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the spare register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SwSpareRegister6_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x1da), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific spare register from the device and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SwSpareRegister6_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1da), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 7 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the spare register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SwSpareRegister7_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x200 + 0x1db), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 7 from the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SwSpareRegister7_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x200 + 0x1db), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the digital path power-down state for the SYSREF signal in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value indicating the desired power-down state for the
 * digital path.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SysrefForcePdDigpath_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x194), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the digital path power-down status from a specific register
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved power-down
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_SysrefForcePdDigpath_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x194), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the temperature sensor clock arm selection in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock arm selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_TempSenseClkArmSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xc), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the temperature sensor clock arm selection value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock arm
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_TempSenseClkArmSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xc), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the temperature sensor clock divider value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock divider value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_TempSenseClkDiv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xd), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the temperature sensor clock divider value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * divider value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_TempSenseClkDiv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xd), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the temperature sensor clock enable register for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the temperature sensor clock enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_TempSenseClkEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0xc), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the temperature sensor clock enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_TempSenseClkEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0xc), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the Tx1 low-frequency input buffer in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value indicating the desired power-down state (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx1Lo1InbufPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x165), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx1Lo1InbufPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x165), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the Tx1 Lo2 input buffer in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the power-down state to be
 * set.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx1Lo2InbufPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x165), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx1Lo2InbufPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x165), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 Lomux power down state in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the power down state to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx1LomuxPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x165), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx1LomuxPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x165), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the coefficient selection for the Tx1 magnitude 13-tap filter in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the coefficient selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx1Mag13tapsCoeffSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x154), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the coefficient selection value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved coefficient
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx1Mag13tapsCoeffSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x154), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 Mag21 taps bank selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx1Mag21tapsBankSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x155), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx1Mag21tapsBankSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x155), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1SelLo2 register value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the Tx1SelLo2 register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx1SelLo2_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x169), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx1SelLo2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x169), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO mask for the Tx1 TPC decrement attenuator in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx1TpcDecrAttenGpioMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x13d), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO mask value for the Tx1 TPC decrement attenuator
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO mask
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx1TpcDecrAttenGpioMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x13d), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO select value for the Tx1 TPC decrement attenuator in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO select field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx1TpcDecrAttenGpioSelect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x13c), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO select value for the Tx1 TPC decrement attenuator
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO select
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx1TpcDecrAttenGpioSelect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x13c), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO mask for the Tx1 TPC increment attenuator in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO mask.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO mask setting operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx1TpcIncrAttenGpioMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x13d), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO mask value for the Tx1 TPC increment attenuator
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO mask
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx1TpcIncrAttenGpioMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x13d), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO select for the Tx1 TPC increment attenuator in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO select.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx1TpcIncrAttenGpioSelect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x13c), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO select value for the Tx1 TPC increment attenuator
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO select
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx1TpcIncrAttenGpioSelect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x13c), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the Tx2 low IF input buffer in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the desired power-down
 * state (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx2Lo1InbufPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x166), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx2Lo1InbufPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x166), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state of the Tx2 low input buffer in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the power down state to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx2Lo2InbufPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x166), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx2Lo2InbufPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x166), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 Lomux power down state in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the power down state to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx2LomuxPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x166), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx2LomuxPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x166), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the coefficient selection for the Tx2 magnitude 13-tap filter in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the coefficient selection
 * value to be written.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx2Mag13tapsCoeffSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x154), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the coefficient selection value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved coefficient
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx2Mag13tapsCoeffSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x154), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bank selection for the Tx2 Mag21 taps in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx2Mag21tapsBankSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x155), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx2Mag21tapsBankSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x155), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 selection low register value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the Tx2 selection low register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx2SelLo2_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x16a), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx2SelLo2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x16a), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO mask for the Tx2 TPC decrement attenuator in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO mask.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO mask setting operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx2TpcDecrAttenGpioMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x13f), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO mask value for the Tx2 TPC decrement attenuator
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO mask
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx2TpcDecrAttenGpioMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x13f), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO select for the Tx2 TPC decrement attenuator in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO select field.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx2TpcDecrAttenGpioSelect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x13e), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO select value for the Tx2 TPC decrement attenuator
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO select
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx2TpcDecrAttenGpioSelect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x13e), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO mask for the Tx2 TPC increment attenuator in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx2TpcIncrAttenGpioMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x13f), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO mask value for the Tx2 TPC increment attenuator
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved GPIO mask
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx2TpcIncrAttenGpioMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x13f), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO select for the Tx2 TPC increment attenuator in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO select.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx2TpcIncrAttenGpioSelect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x13e), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO select value for the Tx2 TPC increment attenuator
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO select
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_Tx2TpcIncrAttenGpioSelect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x13e), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxMag21 taps A coefficient selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the coefficient selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_TxMag21tapsACoeffSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x154), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_TxMag21tapsACoeffSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x154), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxMag21 tap B coefficient selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_TxMag21tapsBCoeffSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x154), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_TxMag21tapsBCoeffSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x154), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the coefficient selection for the TxMag21 taps in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the coefficient selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_TxMag21tapsCCoeffSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x154), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the TxMag21 tap coefficient selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved coefficient
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_TxMag21tapsCCoeffSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x154), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DC coefficient selection for the Tx Mag 21 taps in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_TxMag21tapsDCoeffSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x200 + 0x154), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore1_TxMag21tapsDCoeffSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x200 + 0x154), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


#endif // __ADRV9001_BF_NVS_REGMAP_CORE_1_H__