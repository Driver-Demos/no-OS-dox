/**
 * \file
 * \brief BitField accessors for analog_tx_mem_map
 *
 * Autogenerated with yoda-gen 1.2.0. Do not modify
 *
 * \copyright Copyright (c) 2020 Analog Devices, Inc. All Rights Reserved.
 * This software is proprietary to Analog Devices, Inc. and its licensors.
 */

 #ifndef __ADRV9001_BF_ANALOG_TX_MEM_MAP_H__
 #define __ADRV9001_BF_ANALOG_TX_MEM_MAP_H__

#include "adrv9001_bf_hal.h"

/***************************************************************************//**
 * @brief The `adrv9001_BfAnalogTxMemMap_e` is an enumeration that defines
 * memory map addresses for analog transmit channels in the ADRV9001
 * device. It provides symbolic names for specific memory locations
 * associated with the analog transmit functionality, allowing for easier
 * reference and manipulation of these addresses in the code. This
 * enumeration is part of the bitfield accessors for the analog transmit
 * memory map, facilitating the configuration and control of the analog
 * transmit paths in the device.
 *
 * @param ADRV9001_BF_TX1_ANA Represents the memory map address for the first
 * analog transmit channel.
 * @param ADRV9001_BF_TX2_ANA Represents the memory map address for the second
 * analog transmit channel.
 ******************************************************************************/
typedef enum adrv9001_BfAnalogTxMemMap_e
{
    ADRV9001_BF_TX1_ANA    =   0x3800,
    ADRV9001_BF_TX2_ANA    =   0x3a00
} adrv9001_BfAnalogTxMemMap_e;

/***************************************************************************//**
 * @brief The `analogTxMemMapInstances` is a static constant array of type
 * `adrv9001_BfAnalogTxMemMap_e`, which is an enumeration representing
 * different analog transmit memory map instances. It contains two
 * elements: `ADRV9001_BF_TX1_ANA` and `ADRV9001_BF_TX2_ANA`, which
 * correspond to specific memory map addresses for the analog transmit
 * paths in the ADRV9001 device.
 *
 * @details This array is used to reference specific analog transmit memory map
 * instances for operations such as register and field reads or writes
 * in the ADRV9001 device.
 ******************************************************************************/
static const adrv9001_BfAnalogTxMemMap_e analogTxMemMapInstances[] = {
    ADRV9001_BF_TX1_ANA,
    ADRV9001_BF_TX2_ANA
};

/***************************************************************************//**
 * @brief Sets a spare memory register for the analog transmit path in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value indicating which analog transmit memory
 * map instance to modify.
 * @param value An 8-bit value to be written to the specified register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_AnalogTxMemSpare_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x71), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the spare memory value from the analog transmit memory map.
 *
 * @param device A pointer to the device context used for communication.
 * @param instance An enumerated value representing the specific analog transmit
 * memory map instance.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_AnalogTxMemSpare_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x71), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the auxiliary DAC temperature sensor observation bit for the
 * specified analog transmit memory map instance.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value representing the specific analog transmit
 * memory map instance (e.g., `ADRV9001_BF_TX1_ANA` or
 * `ADRV9001_BF_TX2_ANA`).
 * @param value A `uint8_t` value that indicates whether to enable or disable
 * the temperature sensor observation (active high).
 * @return Returns an `int32_t` status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_AuxDacTempSensorObs_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x70), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the observed temperature sensor value from the auxiliary DAC
 * of the specified analog transmit memory map instance.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific analog transmit
 * memory map instance (e.g., ADRV9001_BF_TX1_ANA or
 * ADRV9001_BF_TX2_ANA).
 * @param value A pointer to a `uint8_t` where the retrieved temperature sensor
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_AuxDacTempSensorObs_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x70), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the auxiliary DAC test mode enable bit in the analog transmit
 * memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value A uint8_t value that indicates whether to enable or disable the
 * test mode (1 to enable, 0 to disable).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_AuxDacTestModeEn_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6f), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the auxiliary DAC test mode enable status from the specified
 * analog transmit memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_AuxDacTestModeEn_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6f), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration tone driver attenuation for a specified analog
 * transmit memory map instance.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value representing the specific analog transmit
 * memory map instance (e.g., `ADRV9001_BF_TX1_ANA` or
 * `ADRV9001_BF_TX2_ANA`).
 * @param value An 8-bit unsigned integer representing the attenuation value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_CalToneDriverAttn_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x55), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration tone driver attenuation value from the
 * specified analog transmit memory map instance.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value representing the specific analog transmit
 * memory map instance (e.g., `ADRV9001_BF_TX1_ANA` or
 * `ADRV9001_BF_TX2_ANA`).
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * attenuation value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation, where a value of 0 typically indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_CalToneDriverAttn_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x55), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the analog tone driver input buffer.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which instance of the analog TX
 * memory map to modify.
 * @param value A uint8_t value indicating the desired power down state (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_CalToneDriverInbufPd_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x55), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the calibration tone driver input
 * buffer.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific instance of the
 * analog TX memory map.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_CalToneDriverInbufPd_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x55), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the calibration tone driver in the
 * analog transmit memory map.
 *
 * @param device A pointer to the device context that is used for communication
 * with the hardware.
 * @param instance An enumerated value indicating which instance of the analog
 * transmit memory map to configure.
 * @param value A uint8_t value that indicates the desired power down state (0
 * or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_CalToneDriverPd_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x55), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the calibration tone driver in the
 * analog transmit memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value indicating which instance of the analog
 * transmit memory map to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved power down
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_CalToneDriverPd_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x55), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LDO bypass configuration for the analog transmitter.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific analog
 * transmitter instance (e.g., TX1 or TX2).
 * @param value A uint8_t value indicating the desired bypass setting for the
 * LDO.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_ConverterLdoBypass_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x60), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LDO bypass status from the analog transmit memory map.
 *
 * @param device A pointer to the device context used for communication.
 * @param instance An enumerator indicating which instance of the analog
 * transmit memory map to access.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_ConverterLdoBypass_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x60), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the thermal shutdown disable bit for the converter LDO in the
 * analog transmit memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value A uint8_t value that indicates whether to enable or disable the
 * thermal shutdown feature.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_ConverterLdoDisThermalShutdown_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x61), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the thermal shutdown status of the converter LDO for a
 * specified analog transmit memory map instance.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value representing the specific analog transmit
 * memory map instance (e.g., `ADRV9001_BF_TX1_ANA` or
 * `ADRV9001_BF_TX2_ANA`).
 * @param value A pointer to a `uint8_t` variable where the retrieved thermal
 * shutdown status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_ConverterLdoDisThermalShutdown_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x61), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the filter bypass configuration for the converter LDO in the
 * analog transmit memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value A uint8_t value indicating whether to enable or disable the
 * filter bypass.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_ConverterLdoFilterBypass_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x61), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the filter bypass status of the converter LDO in the analog
 * transmit memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved filter
 * bypass status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_ConverterLdoFilterBypass_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x61), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the current limit increment for the LDO converter in the analog
 * transmit memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * current limit increment.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_ConverterLdoIlimitInc_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x60), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the increment value for the LDO current limit from the
 * analog transmit memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_ConverterLdoIlimitInc_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x60), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the status of the converter LDO from the analog transmit
 * memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which instance of the analog
 * transmit memory map to access.
 * @param value A pointer to a uint8_t where the retrieved status will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_ConverterLdoStatus_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x60), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the thermal shutdown configuration for the LDO converter in the
 * ADRV9001 analog transmit memory map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value A 8-bit unsigned integer representing the value to set for the
 * thermal shutdown configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_ConverterLdoThermalShutdown0c_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x61), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the thermal shutdown status of the converter LDO for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved thermal
 * shutdown status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_ConverterLdoThermalShutdown0c_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x61), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output voltage selection for the converter LDO in the analog
 * transmit memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value An 8-bit unsigned integer representing the desired output
 * voltage selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_ConverterLdoVoutSel_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x60), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the output voltage selection for the converter LDO in the
 * analog transmit memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value A pointer to a `uint8_t` where the retrieved output voltage
 * selection will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_ConverterLdoVoutSel_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x60), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output voltage trim for the converter LDO in the ADRV9001
 * analog transmit memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific analog transmit
 * memory map instance (e.g., TX1 or TX2).
 * @param value An 8-bit unsigned integer representing the trim value to set for
 * the output voltage.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_ConverterLdoVoutTrim_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x61), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LDO voltage trim value from the analog transmit memory
 * map.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved trim value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_ConverterLdoVoutTrim_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x61), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low source transmit (Tx) enable bit in the analog transmit
 * memory map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value representing the specific analog transmit
 * memory map instance (e.g., Tx1 or Tx2).
 * @param value A uint8_t value that indicates whether to enable (1) or disable
 * (0) the low source transmit.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_EnableLoSourceTx_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4a), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the Enable Low Source Transmit setting from the
 * analog transmit memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific analog transmit
 * memory map instance.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_EnableLoSourceTx_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4a), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bypass resistance for the IDIST bias in the analog transmit
 * memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which instance of the analog
 * transmit memory map to modify.
 * @param value A uint8_t value representing the bypass resistance setting.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_IdistBypassBiasRes_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bypass bias resistor value for the IDIST in the analog
 * transmit memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_IdistBypassBiasRes_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low offset and low phase detector filter configuration for
 * the analog transmit memory map.
 *
 * @param device A pointer to the device context that is used for the operation.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the low offset and low phase detector filter.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_LoOffsetLoPhaseDetFilter_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4a), (value >> 0), 0xe, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low offset and low phase detector filter value from the
 * analog transmit memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value indicating which instance of the analog
 * transmit memory map to access.
 * @param value A pointer to a `uint8_t` where the retrieved filter value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_LoOffsetLoPhaseDetFilter_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4a), &register_value, 0xe, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AC coupling enable bit for the low offset low phase detector
 * filter in the analog transmit memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value A uint8_t value that indicates whether to enable or disable AC
 * coupling (1 to enable, 0 to disable).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_LoOffsetLoPhaseDetFilterAcCoupleEn_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4a), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the AC coupling enable bit for the low offset
 * low phase detector filter in the analog transmit memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_LoOffsetLoPhaseDetFilterAcCoupleEn_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4a), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low offset and low phase detector power down bit in the
 * analog transmit memory map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value A 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_LoOffsetLoPhaseDetPd_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4a), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low offset and low phase detector power down status from
 * the analog transmit memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_LoOffsetLoPhaseDetPd_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4a), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state of the LDO (Low Dropout Regulator) for the
 * analog transmitter.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmitter memory map.
 * @param value A uint8_t value indicating the desired power down state (0 for
 * active, 1 for power down).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_PdConverterLdo_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the LDO converter for the specified
 * analog transmit instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific analog transmit
 * instance (e.g., TX1 or TX2).
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_PdConverterLdo_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias resistor bypass for the IDist block in the analog
 * transmit memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value A uint8_t value that indicates whether to enable or disable the
 * bias resistor bypass.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_PdIDist_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `PdIDist` field from the analog transmit
 * memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerator of type `adrv9001_BfAnalogTxMemMap_e` that
 * specifies which instance of the analog transmit memory map to
 * access.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_PdIDist_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state of the TX mixer LO delay buffer.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which instance of the analog TX
 * memory map to modify.
 * @param value A uint8_t value that indicates whether to power down (1) or
 * power up (0) the LO delay buffer.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_PdTxLoDelayBuffer_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the TX mixer LO delay buffer.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog TX memory map instance
 * to access.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_PdTxLoDelayBuffer_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the override for the TX mixer LO delay buffer power down.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog TX memory map.
 * @param value A uint8_t value that indicates whether to enable or disable the
 * override for the LO delay buffer.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_PdTxLoDelayBufferOverride_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the override value for the TX mixer LO delay buffer.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog TX memory map instance
 * to access.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_PdTxLoDelayBufferOverride_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the override selection for the TX mixer LO delay buffer.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating the specific analog TX memory map
 * instance.
 * @param value A uint8_t value to set the override selection.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_PdTxLoDelayBufferOverrideSelect_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the override selection status for the TX mixer LO delay
 * buffer.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value indicating which instance of the analog
 * TX memory map to access.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_PdTxLoDelayBufferOverrideSelect_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the configuration for the analog transmit baseband filter
 * capacitors.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog transmit memory map
 * instance to configure.
 * @param value A 16-bit unsigned integer representing the configuration value
 * for the capacitors.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxAbbfCg_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1f), (value >> 2));
    if (0 != status) return status;

    status = adi_bf_hal_Field_Write(device, (instance + 0x20), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx ABBF capacitor gain settings from the analog transmit
 * memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific analog transmit
 * instance (e.g., Tx1 or Tx2).
 * @param value A pointer to a `uint16_t` variable where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxAbbfCg_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Field_Read(device, (instance + 0x20), &register_value, 0x3, 0x0);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the decay value for the ABBF peak detectors in the analog
 * transmit memory map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the analog
 * transmit memory map is being accessed.
 * @param value An 8-bit unsigned integer representing the decay value to be set
 * for the ABBF peak detectors.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxAbbfPeakdetDecay_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1e), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the decay value of the ABBF peak detector from the specified
 * analog transmit memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific analog transmit
 * memory map instance (e.g., TX1 or TX2).
 * @param value A pointer to a `uint8_t` where the retrieved decay value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxAbbfPeakdetDecay_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1e), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the auxiliary low buffer in the analog
 * transmit memory map.
 *
 * @param device A pointer to the device context that is used for communication
 * with the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value A uint8_t value indicating the desired power down state (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxAuxLoBufPd_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the auxiliary low buffer in the
 * analog transmit memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerator indicating which instance of the analog
 * transmit memory map to access.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxAuxLoBufPd_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the debug configuration for the TX BBF block in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating which instance of the analog
 * TX memory map to configure.
 * @param value A 16-bit unsigned integer representing the debug configuration
 * value to set.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the operations performed.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxBbfDebug_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x22), (value >> 8), 0x1f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x21), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the debug information for the TX BBF block.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerator indicating which instance of the analog TX
 * memory map to access.
 * @param value A pointer to a `uint16_t` variable where the retrieved debug
 * value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operations failed.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxBbfDebug_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x22), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x21), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power control for the TX BBF block.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog TX memory map instance
 * to configure.
 * @param value A uint8_t value representing the power control setting.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxBbfPowCtrlB_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x22), (value >> 0), 0xe0, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power control setting for the TX BBF block.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog TX memory map instance
 * to access.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxBbfPowCtrlB_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x22), &register_value, 0xe0, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the spare register value for the analog transmit memory map.
 *
 * @param device A pointer to the device context used for communication.
 * @param instance An enumerator indicating which analog transmit memory map
 * instance to modify.
 * @param value The 8-bit value to be written to the spare register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxBbfSpare_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x23), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the spare value from the analog transmit memory map for a
 * specified instance.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific analog transmit
 * memory map instance.
 * @param value A pointer to a `uint8_t` where the retrieved spare value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxBbfSpare_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x23), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the Tx synthesizer.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog Tx memory map instance
 * to modify.
 * @param value A uint8_t value indicating the power down state to set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxCmCorrPd_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx correction power down status from the analog transmit
 * memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxCmCorrPd_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down override for the Tx mixer correction.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog Tx memory map.
 * @param value A uint8_t value that indicates whether to enable or disable the
 * power down override.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxCmCorrPdOverride_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx correction power down override status from the analog
 * transmit memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxCmCorrPdOverride_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down override selection for the Tx mixer.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific analog Tx
 * memory map instance.
 * @param value A uint8_t value indicating the power down override selection.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxCmCorrPdOverrideSelect_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down override selection status for the Tx
 * synthesizer.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog Tx memory map instance
 * to access.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxCmCorrPdOverrideSelect_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 common mode voltage for the analog transmit path.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value indicating which instance of the analog
 * transmit memory map is being accessed.
 * @param value A uint8_t value representing the common mode voltage setting to
 * be applied.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxCmloBias_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x40), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the TxCmloBias value from the specified analog transmit
 * memory map instance.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog transmit memory map
 * instance to access.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxCmloBias_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x40), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 common mode voltage and correction DAC values for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value A 16-bit unsigned integer representing the value to be set for
 * the DAC.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxCmloDacI_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x3c), (value >> 4));
    if (0 != status) return status;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3d), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx1 CMLO DAC I value from the specified device instance.
 *
 * @param device A pointer to the device context used for communication.
 * @param instance An enumerated value representing the specific analog transmit
 * instance.
 * @param value A pointer to a `uint16_t` where the retrieved DAC value will be
 * stored.
 * @return Returns the status of the read operations, with the final DAC I value
 * stored in the provided `value` pointer.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxCmloDacI_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x3c), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3d), &register_value, 0xf, 0x0);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the latch bit for the DAC in the TxCMLO register.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which instance of the analog
 * transmit memory map to modify.
 * @param value A uint8_t value to set the latch bit.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxCmloDacLatchb_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x40), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the TxCmloDacLatchb register for a specified
 * analog transmit instance.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value representing the specific analog transmit
 * instance (e.g., ADRV9001_BF_TX1_ANA or ADRV9001_BF_TX2_ANA).
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxCmloDacLatchb_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x40), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxCmlo DAC Q value in the ADRV9001 analog transmit memory
 * map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog transmit memory map
 * instance to modify.
 * @param value A 16-bit unsigned integer representing the value to set for the
 * TxCmlo DAC Q.
 * @return Returns an integer status code indicating success (0) or an error
 * code.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxCmloDacQ_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x3e), (value >> 4));
    if (0 != status) return status;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3f), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the TxCmlo DAC Q setting from the analog
 * transmit memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value A pointer to a `uint16_t` where the retrieved DAC Q value will
 * be stored.
 * @return Returns an `int32_t` status code indicating the success or failure of
 * the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxCmloDacQ_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x3e), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3f), &register_value, 0xf, 0x0);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxCmloSel2xDiode configuration in the analog transmit memory
 * map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating the specific instance of the analog
 * transmit memory map.
 * @param value A uint8_t value representing the configuration to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxCmloSel2xDiode_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x40), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `TxCmloSel2xDiode` field from the analog
 * transmit memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxCmloSel2xDiode_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x40), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the configuration for the Tx CMLO selection in the analog
 * transmit memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which instance of the analog
 * transmit memory map is being configured.
 * @param value A uint8_t value representing the configuration to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxCmloSel2xMixer_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x40), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `TxCmloSel2xMixer` setting from the
 * specified device instance.
 *
 * @param device A pointer to the device context from which the value is to be
 * read.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxCmloSel2xMixer_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x40), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx LO common mode voltage for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerator of type `adrv9001_BfAnalogTxMemMap_e`
 * indicating which instance of the analog Tx memory map to
 * configure.
 * @param value An 8-bit unsigned integer representing the desired common mode
 * voltage setting.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoCm_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3b), (value >> 0), 0xe0, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx LO common mode voltage setting from the specified
 * device instance.
 *
 * @param device A pointer to the device context that is used to access the
 * hardware.
 * @param instance An enumerated value indicating which analog Tx memory map
 * instance to access.
 * @param value A pointer to a `uint8_t` where the retrieved common mode voltage
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoCm_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3b), &register_value, 0xe0, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the Tx1 LO delay correction DAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog Tx memory map instance
 * to modify.
 * @param value A uint8_t value indicating the desired power down state (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoDelayCorrPd_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the Tx1 LO delay correction DAC.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value indicating which instance of the analog
 * Tx memory map to access.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoDelayCorrPd_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down override for the TX mixer LO delay correction.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog TX memory map instance
 * to modify.
 * @param value A uint8_t value indicating the power down state to set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoDelayCorrPdOverride_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down override status for the TX mixer LO delay
 * correction.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which instance of the analog TX
 * memory map to access.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoDelayCorrPdOverride_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down override for the TX mixer LO delay buffer.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type indicating which instance of the analog TX
 * memory map is being accessed.
 * @param value A 8-bit unsigned integer that specifies the value to set for the
 * power down override.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoDelayCorrPdOverrideSelect_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx LO Delay Correction Power Down Override Select status
 * from the device.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * analog Tx memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoDelayCorrPdOverrideSelect_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias resistor bypass for the Tx LO delay DAC.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog Tx memory map.
 * @param value A uint8_t value that indicates whether to bypass the bias
 * resistor (1) or not (0).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoDelayDacBiasResBypass_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x11), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias resistor bypass status for the Tx LO delay DAC.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * analog Tx memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoDelayDacBiasResBypass_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x11), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DAC resolution for the TX LO delay.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog TX memory map instance
 * to modify.
 * @param value The value to set for the DAC resolution.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoDelayDacRes_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x11), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DAC resolution value for the TX LO delay from the
 * specified device instance.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog TX memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved DAC
 * resolution value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoDelayDacRes_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x11), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bypass mode for the Tx Low Dropout Regulator (LDO) in the
 * ADRV9001 analog transmit memory map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value A uint8_t value indicating whether to enable or disable the
 * bypass mode.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoLdoBypass_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6c), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bypass status of the Tx Low Dropout Regulator (LDO) for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerator of type `adrv9001_BfAnalogTxMemMap_e` that
 * specifies which instance of the analog transmit memory map to
 * access.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoLdoBypass_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6c), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bypass state for the low-pass filter in the Tx LDO of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating which instance of the analog
 * Tx memory map to configure.
 * @param value A uint8_t value indicating the desired bypass state (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoLdoFilterBypass_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6d), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bypass status of the low-pass filter in the Tx LDO.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog Tx memory map instance
 * to access.
 * @param value A pointer to a uint8_t where the retrieved filter bypass status
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoLdoFilterBypass_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6d), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the Tx Low Dropout Regulator (LDO) in
 * the ADRV9001 analog transmit memory map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value A uint8_t value that indicates the desired power down state (0
 * for active, 1 for power down).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoLdoPd_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6c), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the Tx Low Dropout Regulator (LDO)
 * for a specified analog transmit instance.
 *
 * @param device A pointer to the device context that is used to access the
 * hardware.
 * @param instance An enumerator of type `adrv9001_BfAnalogTxMemMap_e` that
 * specifies which analog transmit instance to access.
 * @param value A pointer to a `uint8_t` where the retrieved power down status
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoLdoPd_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6c), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the status of the Tx Low Dropout Regulator (LDO) for the
 * specified analog transmit instance.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerator indicating which analog transmit instance to
 * query.
 * @param value A pointer to a `uint8_t` where the retrieved status will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoLdoStatus_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6c), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output voltage selection for the Tx Low Dropout Regulator
 * (LDO) in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating which analog transmit memory
 * map instance to configure.
 * @param value An 8-bit unsigned integer representing the desired output
 * voltage selection.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoLdoVoutSel_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6c), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the voltage selection for the Tx Low Dropout Regulator (LDO)
 * in the ADRV9001 analog transmit memory map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value indicating which instance of the analog
 * transmit memory map is being accessed.
 * @param value A pointer to a `uint8_t` variable where the retrieved voltage
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoLdoVoutSel_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6c), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the voltage trim for the Tx low dropout regulator.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog Tx memory map instance
 * to modify.
 * @param value An 8-bit unsigned integer representing the trim value to set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoLdoVoutTrim_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6d), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the trim value for the Tx low dropout regulator output
 * voltage.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific analog Tx
 * memory map instance.
 * @param value A pointer to a uint8_t where the retrieved trim value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoLdoVoutTrim_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6d), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `TxLoLineRTerm` field in the analog transmit memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which instance of the analog
 * transmit memory map to modify.
 * @param value A `uint8_t` value to set for the `TxLoLineRTerm` field.
 * @return Returns an `int32_t` indicating the success or failure of the write
 * operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoLineRTerm_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the TxLoLineR termination setting from the
 * specified device instance.
 *
 * @param device A pointer to the device context from which the value is to be
 * read.
 * @param instance An enumerator of type `adrv9001_BfAnalogTxMemMap_e` that
 * specifies which instance of the analog transmit memory map to
 * access.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoLineRTerm_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the TX low line receive buffer.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog TX memory map instance
 * to configure.
 * @param value A uint8_t value indicating the desired power down state (0 for
 * active, 1 for power down).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoLineRcvBufPd_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the low line receiver buffer in the
 * analog transmit memory map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerator of type `adrv9001_BfAnalogTxMemMap_e` that
 * specifies which instance of the analog transmit memory map to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved power down
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoLineRcvBufPd_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias power down state for the Tx low line termination.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog Tx memory map instance
 * to configure.
 * @param value A uint8_t value representing the desired bias power down state.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoLineTermBiasPd_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the TxLoLineTermBiasPd value from the specified analog
 * transmit memory map instance.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific analog transmit
 * memory map instance (e.g., ADRV9001_BF_TX1_ANA or
 * ADRV9001_BF_TX2_ANA).
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation, with the retrieved value stored in the provided
 * pointer.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoLineTermBiasPd_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the line termination enable state for the TX low frequency path.
 *
 * @param device A pointer to the device context that is used for communication
 * with the hardware.
 * @param instance An enumerated value indicating which instance of the analog
 * TX memory map to modify.
 * @param value A uint8_t value that specifies whether to enable or disable the
 * line termination (1 to enable, 0 to disable).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoLineTermEnable_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the status of the low line termination enable setting for
 * the specified analog transmit instance.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific analog transmit
 * instance (e.g., `ADRV9001_BF_TX1_ANA` or
 * `ADRV9001_BF_TX2_ANA`).
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxLoLineTermEnable_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias resistor calibration value for the transmit path of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating which instance of the analog
 * transmit memory map to modify.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxPdAmpBiasResCal_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x3a), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias resistor calibration value for the transmit path of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerator value indicating which instance of the analog
 * transmit memory map to access.
 * @param value A pointer to a uint8_t variable where the retrieved calibration
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxPdAmpBiasResCal_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x3a), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down mode for the digital mixer in the analog transmit
 * memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value A 1-bit value indicating whether to enable or disable the power
 * down mode.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxPdDmEn_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down mode for the digital mixer in the analog
 * transmit memory map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxPdDmEn_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low noise selection for the transmit path in the ADRV9001
 * analog transmit memory map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value A uint8_t value that indicates the low noise selection to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxPdLowNoiseSel_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6), (value >> 0), 0x6, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low noise selection value for the transmit power down
 * configuration.
 *
 * @param device A pointer to the device context used for communication.
 * @param instance An enumerated value representing the specific analog transmit
 * memory map instance.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxPdLowNoiseSel_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6), &register_value, 0x6, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the programmable OTA bias for the transmit path in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating which analog transmit memory
 * map instance to configure.
 * @param value An 8-bit unsigned integer representing the bias value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxPdProgOtaBias_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6), (value >> 0), 0x18, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the programmed OTA bias value from the analog transmit
 * memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific analog transmit
 * memory map instance (e.g., TX1 or TX2).
 * @param value A pointer to a `uint8_t` variable where the retrieved OTA bias
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxPdProgOtaBias_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6), &register_value, 0x18, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rin boost value for the analog transmit memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value An 8-bit unsigned integer representing the Rin boost value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxPdRinBoost_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `TxPdRinBoost` field from the analog
 * transmit memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxPdRinBoost_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx bias configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific analog Tx
 * memory map instance (e.g., ADRV9001_BF_TX1_ANA or
 * ADRV9001_BF_TX2_ANA).
 * @param value An 8-bit unsigned integer representing the desired bias
 * configuration to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxPdbias_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x36), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx Pdbias value from the analog transmit memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog transmit memory map
 * instance to access.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxPdbias_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x36), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias source for the Tx pre-distortion amplifier.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog Tx memory map instance
 * to configure.
 * @param value A uint8_t value that determines the bias source selection.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxPredistAmpBias_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x38), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias setting for the Tx pre-distortion amplifier.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog Tx memory map instance
 * to access.
 * @param value A pointer to a uint8_t where the retrieved bias value will be
 * stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxPredistAmpBias_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x38), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the manual startup bias for the Tx pre-distortion amplifier.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerator of type `adrv9001_BfAnalogTxMemMap_e` that
 * specifies which instance of the analog Tx memory map to
 * configure.
 * @param value A `uint8_t` value that specifies the bias setting for the Tx
 * pre-distortion amplifier.
 * @return Returns an `int32_t` status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxPredistAmpBiasManualStartup_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x39), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the manual startup bias setting for the Tx pre-distortion
 * amplifier.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value indicating which instance of the analog
 * Tx memory map to access.
 * @param value A pointer to a `uint8_t` where the retrieved bias value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxPredistAmpBiasManualStartup_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x39), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias for the Tx pre-distortion amplifier's PTAT start.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog Tx memory map instance
 * to configure.
 * @param value A uint8_t value representing the bias setting to be applied.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxPredistAmpBiasPtatStart_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x39), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias PTAT start value for the Tx pre-distortion
 * amplifier.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog Tx memory map instance
 * to access.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxPredistAmpBiasPtatStart_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x39), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx pre-distortion amplifier bias configuration in the analog
 * transmit memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog transmit memory map
 * instance to configure.
 * @param value A byte value representing the bias configuration to set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxPredistAmpCc_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x38), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx pre-distortion amplifier configuration from the
 * specified device instance.
 *
 * @param device A pointer to the device context that allows access to the
 * hardware.
 * @param instance An enumerated value indicating which analog Tx memory map
 * instance to access.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxPredistAmpCc_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x38), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bypass state for the Tx pre-distortion amplifier filter.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog Tx memory map instance
 * to configure.
 * @param value A uint8_t value indicating the bypass state (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxPredistAmpFilterBypass_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x38), (value >> 0), 0x60, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bypass status of the Tx pre-distortion amplifier filter.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which instance of the analog Tx
 * memory map to access.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxPredistAmpFilterBypass_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x38), &register_value, 0x60, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx pre-distortion amplifier's Rz bias source.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog Tx memory map instance
 * to configure.
 * @param value A uint8_t value representing the bias source selection.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxPredistAmpRz_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x38), (value >> 0), 0x18, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the Tx pre-distortion amplifier Rz setting from
 * the specified device instance.
 *
 * @param device A pointer to the device context that is used to access the
 * hardware.
 * @param instance An enumerated value indicating which analog Tx memory map
 * instance to access.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxPredistAmpRz_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x38), &register_value, 0x18, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the Tx pre-distortion amplifier.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog Tx memory map instance
 * to configure.
 * @param value A uint8_t value indicating the desired power down state (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxPredistPd_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the Tx pre-distortion amplifier.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog Tx memory map instance
 * to access.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxPredistPd_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx pre-distortion power down override for the specified
 * instance.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific analog Tx
 * memory map instance.
 * @param value A uint8_t value to set the power down override.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxPredistPdoverride_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx pre-distortion power down override setting from the
 * specified device instance.
 *
 * @param device A pointer to the device context that is used to access the
 * hardware.
 * @param instance An enumerator of type `adrv9001_BfAnalogTxMemMap_e` that
 * specifies which instance of the analog transmit memory map to
 * access.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxPredistPdoverride_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx pre-distortion power down override select for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific analog Tx
 * memory map instance (e.g., Tx1 or Tx2).
 * @param value A uint8_t value that indicates the power down override select
 * setting.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxPredistPdoverrideSelect_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx pre-distortion power down override selection value
 * from the analog transmit memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating the specific analog transmit memory
 * map instance.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxPredistPdoverrideSelect_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the transmit upconverter in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating which instance of the analog
 * transmit memory map to configure.
 * @param value A uint8_t value indicating the desired power down state (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxUpconvPd_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the transmit upconverter for a
 * specified instance.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value indicating which instance of the analog
 * transmit memory map to access.
 * @param value A pointer to a `uint8_t` where the retrieved power down status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxUpconvPd_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down override for the transmit upconverter.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog transmit memory map
 * instance to modify.
 * @param value A uint8_t value indicating the power down override setting.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxUpconvPdoverride_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down override setting for the transmit
 * upconverter.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog transmit memory map
 * instance to access.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxUpconvPdoverride_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down override for the transmit upconverter.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which instance of the analog
 * transmit memory map is being accessed.
 * @param value A uint8_t value that specifies the power down override setting.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxUpconvPdoverrideSelect_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down override selection for the transmit
 * upconverter.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which instance of the analog
 * transmit memory map to access.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxUpconvPdoverrideSelect_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Vcm control for the analog transmit memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog transmit memory map
 * instance to configure.
 * @param value A uint8_t value representing the Vcm control setting.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxVcmCntrl_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Vcm control value from the analog transmit memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog transmit memory map
 * instance to access.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxVcmCntrl_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the compensation capacitor control word for the input opamp in
 * the BBF biquad.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value An 8-bit unsigned integer representing the compensation
 * capacitor control setting.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxabbfCcCntA_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the compensation capacitor control word for the input opamp
 * in the BBF biquad.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating the specific instance of the analog
 * transmit memory map.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxabbfCcCntA_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxabbfCcCntB compensation capacitor control word for the
 * input opamp in the BBF biquad.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which instance of the analog Tx
 * memory map is being accessed.
 * @param value The value to set for the compensation capacitor control.
 * @return Returns the status of the write operation, where a non-zero value
 * indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxabbfCcCntB_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the compensation capacitor control word for the
 * input opamp in the BBF biquad (opamp B).
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog transmit memory map
 * instance to access.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxabbfCcCntB_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the TX baseband filter.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog TX memory map instance
 * to modify.
 * @param value A uint8_t value indicating the desired power down state (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxbbfPd_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the TX baseband filter.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which instance of the analog TX
 * memory map to access.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxbbfPd_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down override for the TX mixer LO delay buffer.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog TX memory map instance
 * to modify.
 * @param value A uint8_t value indicating the power down state to set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxbbfPdoverride_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the override value for the Tx baseband filter power down.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog Tx memory map instance
 * to access.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxbbfPdoverride_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the override selection for the TX baseband filter power down.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog TX memory map instance
 * to modify.
 * @param value A uint8_t value indicating the override selection state.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxbbfPdoverrideSelect_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the override selection value for the Tx baseband filter.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog Tx memory map instance
 * to access.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxbbfPdoverrideSelect_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx output supply voltage for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerator of type `adrv9001_BfAnalogTxMemMap_e`
 * indicating which instance of the analog transmit memory map
 * to modify.
 * @param value A `uint8_t` value that specifies the desired output supply
 * voltage level (1.8V or 1.3V).
 * @return Returns an `int32_t` status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxucLv_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x36), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx output supply voltage setting from the analog
 * transmit memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerator indicating which instance of the analog
 * transmit memory map to access.
 * @param value A pointer to a `uint8_t` where the retrieved voltage setting
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxucLv_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x36), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF cascode level for the analog transmit memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating the specific analog transmit memory
 * map instance.
 * @param value An 8-bit unsigned integer representing the RF cascode level to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxucRfcascLvl_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x36), (value >> 0), 0x18, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RF cascode level setting from the analog transmit memory
 * map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific analog transmit
 * instance (e.g., TX1 or TX2).
 * @param value A pointer to a `uint8_t` where the retrieved RF cascode level
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxucRfcascLvl_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x36), &register_value, 0x18, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the cascode control voltage for the transmit upconverter.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which analog transmit memory map
 * instance to configure.
 * @param value A uint8_t value representing the cascode control voltage to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxucVcascctrl_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x37), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the cascode control voltage setting from the analog transmit
 * memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * analog transmit memory map.
 * @param value A pointer to a `uint8_t` where the retrieved cascode control
 * voltage will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxucVcascctrl_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x37), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the cascode off voltage for the analog transmit path.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating the specific analog transmit
 * instance.
 * @param value The cascode off voltage value to be set.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxucVcascoff_Set(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x37), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the cascode off voltage setting from the analog transmit
 * memory map.
 *
 * @param device A pointer to the device context used for communication.
 * @param instance An enumerated value representing the specific analog transmit
 * instance.
 * @param value A pointer to a `uint8_t` where the retrieved cascode off voltage
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogTxMemMap_TxucVcascoff_Get(void *const device,
    adrv9001_BfAnalogTxMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x37), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


#endif // __ADRV9001_BF_ANALOG_TX_MEM_MAP_H__