/**
 * \file
 * \brief BitField accessors for adc2_mem_map
 *
 * Autogenerated with yoda-gen 1.1.0. Do not modify
 *
 * \copyright Copyright (c) 2020 Analog Devices, Inc. All Rights Reserved.
 * This software is proprietary to Analog Devices, Inc. and its licensors.
 */

 #ifndef __ADRV9001_BF_ADC2_MEM_MAP_H__
 #define __ADRV9001_BF_ADC2_MEM_MAP_H__

#include "adrv9001_bf_hal.h"

/***************************************************************************//**
 * @brief The `adrv9001_BfAdc2MemMap_e` is an enumeration that defines specific
 * memory map addresses for different ADC channels in the ADRV9001
 * device. Each enumerator corresponds to a unique address used to access
 * the I and Q channels of RX1 and RX2 ADCs, facilitating the
 * configuration and control of these channels in the device's memory
 * map.
 *
 * @param ADRV9001_BF_RX1_ADC_I Represents the memory map address for RX1 ADC I
 * channel.
 * @param ADRV9001_BF_RX1_ADC_Q Represents the memory map address for RX1 ADC Q
 * channel.
 * @param ADRV9001_BF_RX2_ADC_I Represents the memory map address for RX2 ADC I
 * channel.
 * @param ADRV9001_BF_RX2_ADC_Q Represents the memory map address for RX2 ADC Q
 * channel.
 ******************************************************************************/
typedef enum adrv9001_BfAdc2MemMap_e
{
    ADRV9001_BF_RX1_ADC_I    =   0x2200,
    ADRV9001_BF_RX1_ADC_Q    =   0x2400,
    ADRV9001_BF_RX2_ADC_I    =   0x2800,
    ADRV9001_BF_RX2_ADC_Q    =   0x2a00
} adrv9001_BfAdc2MemMap_e;


/***************************************************************************//**
 * @brief Sets the ADC cascade bias value in the ADC2 memory map.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the bias value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcCascBias_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x19), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC cascade bias value from a specified memory map
 * instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved bias value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcCascBias_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x19), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for ADC DAC1 calibration register 0.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal0_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x8), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for ADC DAC1 calibration register 0.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value that specifies which ADC instance to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal0_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x8), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for the ADC DAC1 calibration register.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies which ADC instance to configure.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal1_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x9), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for ADC DAC1 calibration 1.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies which ADC instance to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal1_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x9), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for ADC DAC1 calibration 10.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal10_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x12), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for ADC DAC1 calibration 10.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal10_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x12), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for ADC DAC1 calibration 11.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal11_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x13), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for ADC DAC1 calibration register 11.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal11_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x13), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for ADC DAC1 calibration 12.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal12_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x14), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for ADC DAC1 channel 12 from the
 * specified device.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies which ADC instance to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal12_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x14), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for ADC DAC1 calibration register 13.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal13_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x15), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for ADC DAC1 calibration 13.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal13_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x15), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for ADC DAC1 calibration register 14.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal14_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x16), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for ADC DAC1 calibration 14.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal14_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x16), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for ADC DAC1 calibration register 15.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal15_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x17), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for ADC DAC1 calibration 15.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal15_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x17), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for ADC DAC1 calibration 2.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal2_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xa), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for ADC DAC1 channel 2 from the
 * specified device.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies which ADC instance to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal2_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xa), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for ADC DAC1 calibration 3.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal3_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xb), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for ADC DAC1 calibration 3.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal3_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xb), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for ADC DAC1 calibration 4.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal4_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xc), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for ADC DAC1 calibration 4.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies which ADC instance to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal4_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xc), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for ADC DAC1 calibration register 5.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies which ADC instance to configure.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal5_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xd), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for ADC DAC1 calibration register 5.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies which ADC instance to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal5_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xd), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for ADC DAC1 calibration 6.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal6_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xe), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for ADC DAC1 calibration 6.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal6_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xe), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for ADC DAC1 calibration register 7.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies which ADC instance to configure.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal7_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xf), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for ADC DAC1 calibration register 7.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies which ADC instance to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal7_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xf), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for ADC DAC1 channel 8.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies which ADC instance to configure.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal8_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x10), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for ADC DAC1 channel 8 from the
 * specified device.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies which ADC instance to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal8_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x10), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for ADC DAC1 calibration 9.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal9_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x11), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for ADC DAC1 calibration 9.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac1Cal9_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x11), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for ADC DAC2 calibration register 0.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies which ADC instance to configure.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal0_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1c), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value from the ADC DAC2 calibration
 * register.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal0_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1c), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for the ADC DAC2 calibration register.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies which ADC instance to configure.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal1_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1d), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for DAC2 from the ADC memory map.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance to
 * access.
 * @param value A pointer to a `uint8_t` where the retrieved calibration value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal1_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for ADC DAC2 calibration 10.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal10_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x26), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for ADC DAC 2 calibration 10.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal10_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x26), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for ADC DAC2 calibration 11.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal11_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x27), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for ADC DAC 2 calibration 11.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal11_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x27), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for ADC DAC2 calibration 12.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal12_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x28), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for ADC DAC 2 from the specified
 * device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies which ADC instance to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal12_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x28), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for ADC DAC2 calibration 13.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal13_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x29), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for ADC DAC 2 calibration 13.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal13_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x29), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for ADC DAC2 calibration 14.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal14_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x2a), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for ADC DAC 2 calibration 14.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal14_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x2a), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for ADC DAC 2 calibration 15.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal15_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x2b), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for ADC DAC 2 calibration 15.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal15_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x2b), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for ADC DAC2 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies which ADC instance to configure.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal2_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1e), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value from the ADC DAC2 calibration
 * register.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal2_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1e), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for ADC DAC2 calibration 3.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal3_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1f), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for ADC DAC 2 calibration 3.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal3_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for ADC DAC2 calibration 4.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal4_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x20), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for ADC DAC 2 calibration 4.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies which ADC instance to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal4_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x20), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for ADC DAC2 calibration 5.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal5_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x21), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for ADC DAC 2 calibration 5.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal5_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x21), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for ADC DAC2 calibration 6.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal6_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x22), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for ADC DAC 2 calibration 6.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies which ADC instance to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal6_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x22), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for ADC DAC 2 calibration 7.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal7_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x23), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for ADC DAC 2 calibration 7.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal7_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x23), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for ADC DAC2 in the ADC2 memory map.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies which ADC instance to configure.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal8_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x24), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for ADC DAC 2 from the specified
 * memory map.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies which ADC instance to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal8_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x24), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration value for ADC DAC2 calibration 9.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal9_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x25), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for ADC DAC 2 calibration 9.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDac2Cal9_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x25), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC diode bias value in the ADC2 memory map.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance to
 * configure.
 * @param value An 8-bit unsigned integer representing the bias value to set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDiodeBias_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x18), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC diode bias value from a specified memory map.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value that specifies which ADC instance to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved diode bias
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcDiodeBias_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x18), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the value of the ADC Flash Calibration Count 00 from the
 * specified device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount00_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x40), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the calibration count from the ADC flash memory.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount01_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x41), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the calibration count from the ADC flash memory.
 *
 * @param device A pointer to the device structure representing the ADC.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A pointer to a `uint8_t` where the retrieved calibration count
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount02_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x42), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the Flash Calibration Count 100 from the ADC memory map.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount100_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x68), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the value of the ADC Flash Calibration Count 101 from the
 * specified device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated type indicating the specific ADC instance to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount101_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x69), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the calibration count from the ADC flash memory.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount102_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x6a), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the value of the ADC Flash Calibration Count 110 from the
 * specified device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated type indicating the specific ADC instance to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount110_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x6c), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the second byte of the ADC Flash Calibration Count 11 from
 * the specified device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated type indicating the specific ADC instance to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count byte will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount111_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x6d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the value of the ADC Flash Calibration Count 112 from the
 * specified device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the instance of the ADC.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount112_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x6e), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the calibration count from the ADC flash memory for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount120_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x70), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the second byte of the ADC Flash Calibration Count 12 from
 * the specified device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the instance of the ADC.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count byte will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount121_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x71), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the value of the ADC Flash Calibration Count 122 from the
 * specified device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount122_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x72), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the Flash Calibration Count 130 from the ADC memory map.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating the specific ADC instance.
 * @param value A pointer to a `uint8_t` where the retrieved calibration count
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount130_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x74), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the ADC Flash Calibration Count 131 from the specified
 * device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount131_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x75), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the calibration count from the ADC flash memory for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount132_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x76), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the Flash Calibration Count 140 from the ADC memory map.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating the specific ADC instance.
 * @param value A pointer to a `uint8_t` where the retrieved calibration count
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount140_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x78), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the second byte of the ADC Flash Calibration Count 141 from
 * the specified device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count byte will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount141_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x79), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the ADC Flash Calibration Count 142 from the specified
 * device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount142_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x7a), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the Flash Calibration Count 150 from the ADC memory map.
 *
 * @param device A pointer to the device structure representing the ADC.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A pointer to a `uint8_t` where the retrieved calibration count
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount150_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x7c), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the second byte of the ADC Flash Calibration Count 151 from
 * the specified device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count byte will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount151_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x7d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the ADC Flash Calibration Count 152 from the specified
 * device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount152_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x7e), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the value of the ADC Flash Calibration Count 10 from the
 * specified device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated type indicating the specific ADC instance to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount10_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x44), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the calibration count from the ADC flash memory for a
 * specific instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance to
 * access.
 * @param value A pointer to a `uint8_t` where the retrieved calibration count
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount11_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x45), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the calibration count value from the ADC flash memory.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount12_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x46), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the second byte of the ADC Flash Calibration Count from the
 * specified device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount20_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x48), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the second byte of the ADC Flash Calibration Count 2 from
 * the specified device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count byte will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount21_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x49), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the Flash Calibration Count 22 from the ADC memory map.
 *
 * @param device A pointer to the device structure representing the ADC.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A pointer to a `uint8_t` where the retrieved calibration count
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount22_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x4a), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the third byte of the ADC Flash Calibration Count from the
 * specified device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count byte will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount30_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x4c), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the calibration count from the ADC flash memory for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount31_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x4d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the 32-bit calibration count from the ADC flash memory.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A pointer to a `uint8_t` where the retrieved calibration count
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount32_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x4e), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the Flash Calibration Count 40 value from the ADC memory
 * map.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A pointer to a `uint8_t` where the retrieved calibration count
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount40_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x50), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the calibration count from the ADC flash memory for a
 * specific instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount41_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x51), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the calibration count from the ADC flash memory for a
 * specific instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount42_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x52), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the Flash Calibration Count 50 from the ADC memory map.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount50_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x54), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the Flash Calibration Count 51 value from the ADC memory
 * map.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A pointer to a `uint8_t` where the retrieved calibration count
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount51_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x55), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the Flash Calibration Count 52 from the ADC memory map.
 *
 * @param device A pointer to the device structure representing the ADC.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A pointer to a `uint8_t` where the retrieved calibration count
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount52_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x56), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the Flash Calibration Count 60 from the ADC memory map.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount60_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x58), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the calibration count from the ADC flash memory for a
 * specific instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount61_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x59), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the calibration count from the ADC flash memory for a
 * specific instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount62_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x5a), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the ADC Flash Calibration Count 70 from the specified device
 * instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount70_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x5c), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the ADC Flash Calibration Count 71 from the specified device
 * instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount71_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x5d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the ADC Flash Calibration Count 72 from the specified device
 * instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount72_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x5e), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the ADC Flash Calibration Count 80 from the specified device
 * instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount80_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x60), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the calibration count from the ADC flash memory for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount81_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x61), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the calibration count value from the ADC flash memory.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount82_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x62), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the ADC Flash Calibration Count 90 from the specified device
 * instance.
 *
 * @param device A pointer to the device structure representing the ADC device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount90_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x64), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the calibration count from the ADC flash memory.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount91_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x65), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the Flash Calibration Count 92 from the ADC memory map.
 *
 * @param device A pointer to the device structure representing the ADC.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A pointer to a `uint8_t` where the retrieved calibration count
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashCalCount92_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x66), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the offset calibration value for Comparator 0 in the ADC flash
 * memory.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp0_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the ADC Flash Comparator 0 offset calibration.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp0_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the offset calibration value for Comparator 1 in the ADC flash
 * memory.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp1_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the ADC Flash Comparator 1 from the specified
 * device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved comparator
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp1_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the offset calibration value for Comparator 10 in the ADC flash
 * memory.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp10_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the ADC Flash Comparator 10 from the specified
 * device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the instance of the ADC memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved comparator
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp10_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the offset calibration value for Comparator 11 in the ADC flash
 * memory.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp11_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the ADC Flash Comparator 11 from the specified
 * device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the instance of the ADC memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved comparator
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp11_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the offset calibration value for Comparator 12 in the ADC memory
 * map.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp12_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the ADC Flash Comparator 12 from the specified
 * device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved comparator
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp12_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the offset calibration value for Comparator 13 in the ADC flash
 * memory.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp13_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the ADC Flash Comparator 13 from the specified
 * device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved comparator
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp13_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the ADC Flash Comparator 14 in the ADC2 memory map.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the instance of the ADC memory map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the comparator.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp14_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x7), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the ADC Flash Comparator 14 from the specified
 * device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved comparator
 * value will be stored.
 * @return Returns the status of the read operation, where a value of 0
 * indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp14_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x7), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value for the ADC Flash Comparator 15 in the ADC2 memory map.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the instance of the ADC memory map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the comparator.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp15_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x7), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the ADC Flash Comparator 15 from the specified
 * device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved comparator
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp15_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x7), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC Flash Comparator 2 offset calibration value.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp2_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the ADC Flash Comparator 2 from the specified
 * device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies which ADC instance to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved comparator
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp2_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the ADC Flash Comparator 3 in the ADC2 memory map.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the comparator.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp3_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the ADC Flash Comparator 3 from the specified
 * device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies which ADC instance to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved comparator
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp3_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the ADC Flash Comparator 4 in the ADC memory map.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the comparator.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp4_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the ADC Flash Comparator 4 from the specified
 * device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved comparator
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp4_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the ADC Flash Comparator 5 in the ADC memory map.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the comparator.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp5_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the ADC Flash Comparator 5 from the specified
 * device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved comparator
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp5_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the ADC Flash Comparator 6 in the ADC2 memory map.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the comparator.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp6_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the ADC Flash Comparator 6 from the specified
 * device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the instance of the ADC memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp6_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the ADC Flash Comparator 7 in the ADC2 memory map.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the comparator.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp7_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the ADC Flash Comparator 7 from the specified
 * device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved comparator
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp7_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the ADC Flash Comparator 8 in the ADC memory map.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance
 * from the `adrv9001_BfAdc2MemMap_e` enumeration.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the comparator.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp8_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the ADC Flash Comparator 8 from the specified
 * device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies which ADC instance to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved comparator
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp8_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the comparator 9 offset calibration value in the ADC memory map.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value The 8-bit value to be set for the comparator 9 offset
 * calibration.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp9_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the ADC Flash Comparator 9 from the specified
 * device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the instance of the ADC memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved comparator
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashComp9_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the coarse Flash-DAC clock delay control for the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the delay value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashFckDelayCtrl_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Flash-DAC clock delay control value from the ADC memory
 * map.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashFckDelayCtrl_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the ADC Flash Calibration Count Done status from the
 * specified device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the instance of the ADC.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration count status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashcalCntDone_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC Flash Calibration Counter Enable bit in the ADC2 memory
 * map.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance to
 * configure.
 * @param value A uint8_t value that indicates whether to enable (1) or disable
 * (0) the Flash Calibration Counter.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashcalCnten_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC Flash Calibration Counter Enable status.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashcalCnten_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC Flash Calibration Counter Size in the ADC2 memory map.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the size to set for the
 * ADC Flash Calibration Counter.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashcalCntsize_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b), (value >> 0), 0x3e, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC Flash Calibration Counter Size from the specified
 * device instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved counter
 * size will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcFlashcalCntsize_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b), &register_value, 0x3e, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fine Flash-DAC clock delay for the ADC bias.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value of type `adrv9001_BfAdc2MemMap_e` that
 * specifies the ADC instance.
 * @param value An 8-bit unsigned integer representing the delay value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcIbiasFlashFckDelay_Set(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Flash DAC clock delay for the ADC I-bias.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc2MemMap_AdcIbiasFlashFckDelay_Get(void *device,
    adrv9001_BfAdc2MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


#endif // __ADRV9001_BF_ADC2_MEM_MAP_H__