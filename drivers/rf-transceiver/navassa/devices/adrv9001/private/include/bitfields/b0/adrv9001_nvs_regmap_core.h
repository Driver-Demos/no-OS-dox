/**
 * \file
 * \brief BitField accessors for nvs_regmap_core
 *
 * Autogenerated with yoda-gen 1.1.0. Do not modify
 *
 * \copyright Copyright (c) 2020 Analog Devices, Inc. All Rights Reserved.
 * This software is proprietary to Analog Devices, Inc. and its licensors.
 */

 #ifndef __ADRV9001_BF_NVS_REGMAP_CORE_H__
 #define __ADRV9001_BF_NVS_REGMAP_CORE_H__

#include "adrv9001_bf_hal.h"



/***************************************************************************//**
 * @brief Sets the ADC1 clock selection for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Adc1Clk1105Sel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x196), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC1 clock selection value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Adc1Clk1105Sel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x196), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC1 clock divider selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock divider
 * selection value.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Adc1ClkDiv2Sel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x18e), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC1 clock divider selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * divider selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Adc1ClkDiv2Sel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x18e), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC1 data clock selection for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Adc1DataClk1105Sel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x18e), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC1 data clock selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Adc1DataClk1105Sel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x18e), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC1 data clock divider selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired clock divider
 * selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Adc1DataClkDiv2Sel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x18e), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC1 data clock divider selection from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * divider selection will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Adc1DataClkDiv2Sel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x18e), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC1 low-pass filter high-pass bypass selection in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the selection value for
 * the ADC1 low-pass filter high-pass bypass.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Adc1LpHpbSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x194), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC1 low-pass filter high-pass filter selection value
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Adc1LpHpbSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x194), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC2 clock selection for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Adc2Clk1105Sel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x196), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC2 clock selection value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Adc2Clk1105Sel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x196), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC2 clock divider selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock divider
 * selection value.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Adc2ClkDiv2Sel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x18f), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC2 clock divider selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * divider selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Adc2ClkDiv2Sel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x18f), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC2 data clock selection for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Adc2DataClk1105Sel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x18f), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC2 data clock selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Adc2DataClk1105Sel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x18f), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC2 data clock divider selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock divider
 * selection value.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Adc2DataClkDiv2Sel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x18f), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC2 data clock divider selection from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * divider selection will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Adc2DataClkDiv2Sel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x18f), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC2 low-pass filter high-pass bypass selection in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the selection value for
 * the ADC2 low-pass filter high-pass bypass.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Adc2LpHpbSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x194), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC2 low-pass filter high-pass filter selection value
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Adc2LpHpbSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x194), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC tuner RC calibration clock divider selection in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock divider
 * selection value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AdcTunerRCCalClkDiv2Sel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x161), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC tuner RC calibration clock divider selection from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * divider selection will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AdcTunerRCCalClkDiv2Sel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x161), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC tuner RC calibration clock enable value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the ADC tuner RC calibration clock enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AdcTunerRCCalClkEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x161), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC tuner calibration clock enable status from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AdcTunerRCCalClkEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x161), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the device's register map using a provided
 * value.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AddrAscension2_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x0), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * is to be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AddrAscension2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x0), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the device register using a provided value.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the device register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AddrAscension5_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x0), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AddrAscension5_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x0), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AdiCommonSpiReserved0_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x6), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AdiCommonSpiReserved1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xd), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AHB SPI bridge enable state for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the state to set for the AHB SPI
 * bridge (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AhbSpiBridgeEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xd2), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AhbSpiBridgeEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xd2), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software reset state of the auxiliary PLL in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * PLL reset.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaAuxPllSwReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1dd), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the software reset status of the auxiliary PLL from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved PLL reset
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaAuxPllSwReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1dd), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software reset state of the analog clock PLL in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the reset value to be
 * written.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaClkPllLpSwReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1dd), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PLL low power software reset status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved PLL low
 * power software reset status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaClkPllLpSwReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1dd), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software reset state of the analog clock PLL in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the reset state to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaClkPllSwReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1dd), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PLL software reset status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved PLL
 * software reset status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaClkPllSwReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1dd), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX1 clock power down state in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the desired power down
 * state for the LSSI RX1 clock.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaLssiRx1ClkPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1b9), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock power down status of the LSSI RX1 register from
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved clock power
 * down status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaLssiRx1ClkPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1b9), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the MCS count for the LSSI RX1 register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the MCS count to be set.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any of the write operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaLssiRx1McsCount_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1c0), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x1bf), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the MCS count from the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved MCS
 * count will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaLssiRx1McsCount_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1c0), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x1bf), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the active MCS counter value from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved MCS counter
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaLssiRx1McsCounterActive_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1bd), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX1 MCS output enable field in the ADRV9001 device
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the LSSI RX1 MCS output enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaLssiRx1McsOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1c3), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaLssiRx1McsOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1c3), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock power down state for the LSSI RX2 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the desired clock power
 * down state.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaLssiRx2ClkPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1ba), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock power-down status of the LSSI RX2 from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock power-
 * down status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaLssiRx2ClkPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1ba), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the MCS count for the LSSI RX2 register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the MCS count to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaLssiRx2McsCount_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1c2), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x1c1), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the MCS count from the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved MCS
 * count will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaLssiRx2McsCount_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1c2), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x1c1), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the active MCS counter value from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved MCS counter
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaLssiRx2McsCounterActive_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1be), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX2 MCS OE register value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaLssiRx2McsOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1c4), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaLssiRx2McsOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1c4), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock power down state for the LSSI TX1 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the desired clock power
 * down state.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaLssiTx1ClkPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1bb), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock power-down status of the LSSI TX1 from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved clock power-
 * down status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaLssiTx1ClkPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1bb), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock power down state for the LSSI TX2 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired clock power
 * down state.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaLssiTx2ClkPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1bc), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI TX2 clock power down status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock power
 * down status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaLssiTx2ClkPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1bc), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software reset state of the RF PLL in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the reset value to be
 * written.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaRf1PllSwReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1dd), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PLL software reset status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved PLL
 * software reset status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaRf1PllSwReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1dd), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software reset state for the RF PLL in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the reset value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaRf2PllSwReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1dd), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PLL software reset status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved PLL software
 * reset status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaRf2PllSwReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1dd), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software reset for the ADC1 in the analog receiver 1 of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the reset value to be
 * written.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaRx1Adc1SwReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1db), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC1 software reset status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved ADC1
 * software reset status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaRx1Adc1SwReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1db), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software reset state for the ADC2 in the Analog Receiver 1 of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the reset value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaRx1Adc2ISwReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1db), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC2 I switch reset status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved ADC2 I
 * switch reset status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaRx1Adc2ISwReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1db), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC2 Q switch reset value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the ADC2 Q switch reset register.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaRx1Adc2QSwReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1db), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC2 Q switch reset status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved ADC2 Q
 * switch reset status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaRx1Adc2QSwReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1db), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC low-pass filter software reset state for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired state for the
 * ADC low-pass filter reset.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaRx1AdcLpSwReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1de), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC low power switch reset status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved ADC low
 * power switch reset status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaRx1AdcLpSwReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1de), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the analog switch reset value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * analog switch reset.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaRx1AnalogSwReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1db), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the analog switch reset status from the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved reset status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaRx1AnalogSwReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1db), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software reset state for the ADC1 in the Analog Receiver 2 of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the reset value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaRx2Adc1SwReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1db), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC1 software reset status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved ADC1
 * software reset status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaRx2Adc1SwReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1db), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software reset for the ADC2 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the reset value to be
 * written.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaRx2Adc2ISwReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1db), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC2 I switch reset status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved ADC2 I
 * switch reset status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaRx2Adc2ISwReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1db), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC2 Q switch reset value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the ADC2 Q switch reset register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaRx2Adc2QSwReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1db), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC switch reset value from a specific register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved ADC switch
 * reset value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaRx2Adc2QSwReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1db), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC low-pass filter switch reset state in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired state to set
 * for the ADC low-pass filter switch.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaRx2AdcLpSwReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1de), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC low-pass switch reset status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved ADC low-pass
 * switch reset status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaRx2AdcLpSwReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1de), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the analog switch reset value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * analog switch reset.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaRx2AnalogSwReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1db), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the analog switch reset status for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved reset status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaRx2AnalogSwReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1db), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the analog transmit switch reset value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * analog transmit switch reset.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaTx1AnalogSwReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1dc), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the analog transmit switch reset status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaTx1AnalogSwReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1dc), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software reset state for the Analog Tx1 DAC in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the reset value to be set
 * for the DAC.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaTx1DacSwReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1dc), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DAC reset status from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved DAC reset
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaTx1DacSwReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1dc), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the analog transmit switch reset value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * analog transmit switch reset.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaTx2AnalogSwReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1dc), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the analog switch reset status from the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved analog
 * switch reset status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaTx2AnalogSwReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1dc), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software reset state for the Analog Tx2 DAC in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the reset value to be set
 * for the DAC.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaTx2DacSwReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1dc), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `AnaTx2DacSwReset` register from the
 * device.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnaTx2DacSwReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1dc), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the high-speed digital clock selection for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnalogHsDigClockSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x196), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the high-speed digital clock selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnalogHsDigClockSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x196), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the Analog LVDS RX1 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnalogLvdsRx1ClockSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x196), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value for the Analog LVDS RX1 from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnalogLvdsRx1ClockSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x196), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the Analog LVDS RX2 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnalogLvdsRx2ClockSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x196), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value for the Analog LVDS RX2 from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnalogLvdsRx2ClockSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x196), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the Analog LVDS TX1 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnalogLvdsTx1ClockSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x196), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value for the LVDS transmitter 1 from
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnalogLvdsTx1ClockSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x196), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the Analog LVDS TX2 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnalogLvdsTx2ClockSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x196), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value for the LVDS transmitter 2 from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnalogLvdsTx2ClockSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x196), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the analog spare register value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the analog spare register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnalogSpare_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x1df), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AnalogSpare_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x1df), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the arbitration disable response value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the arbitration disable response.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArbDisableResp_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xd2), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the arbitration disable response value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved arbitration
 * disable response value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArbDisableResp_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xd2), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the arbitration read count in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the arbitration read
 * count to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArbRdCount_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xdb), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the arbitration read count from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved arbitration
 * read count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArbRdCount_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xdb), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the analog read count in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArbRdCountAnalog_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xdc), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the analog read count from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArbRdCountAnalog_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xdc), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ARM boot address in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the boot address to be
 * set.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmBootAddr_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0xd6), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0xd5), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0xd4), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0xd3), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ARM boot address from a device's register map by reading
 * multiple registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device from which the boot address is being read.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved boot
 * address will be stored.
 * @return Returns the status of the last register read operation, where a
 * status of 0 indicates success and any non-zero value indicates an
 * error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmBootAddr_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xd6), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xd5), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xd4), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xd3), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the arm calibration error value in the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the calibration error
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmCalibrationError_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xd0), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration error value from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration error value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmCalibrationError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xd0), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ARM clock selection in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmClkSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x192), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ARM clock selection value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmClkSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x192), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ARM clock selection and reset configuration in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmClkSelReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x192), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ARM clock selection reset value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection reset value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmClkSelReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x192), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ARM clock enable state in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A `uint8_t` value representing the desired state of the ARM
 * clock enable (0 or 1).
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmClockEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xd1), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ARM clock enable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmClockEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xd1), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ARM clock rate for the ADRV9001 device by writing a specified
 * value to a specific register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired clock rate
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmClockRate_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xd1), (value >> 0), 0x6, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ARM clock rate from a specific register and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock rate
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmClockRate_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xd1), &register_value, 0x6, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the status of multiple command registers from a device and
 * stores them in a provided array.
 *
 * @param device A pointer to the device structure from which the command status
 * will be read.
 * @param value A pointer to a 2D array where the retrieved register values will
 * be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any read operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmCmdStatus_Get(void *device,
    uint8_t (*value)[16])
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x115), &register_value);
    (*value)[0] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x114), &register_value);
    (*value)[1] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x113), &register_value);
    (*value)[2] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x112), &register_value);
    (*value)[3] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x111), &register_value);
    (*value)[4] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x110), &register_value);
    (*value)[5] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x10f), &register_value);
    (*value)[6] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x10e), &register_value);
    (*value)[7] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x10d), &register_value);
    (*value)[8] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x10c), &register_value);
    (*value)[9] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x10b), &register_value);
    (*value)[10] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x10a), &register_value);
    (*value)[11] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x109), &register_value);
    (*value)[12] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x108), &register_value);
    (*value)[13] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x107), &register_value);
    (*value)[14] = register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x106), &register_value);
    (*value)[15] = register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a command value in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the command value to be
 * set in the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmCommand_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x100), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmCommand_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x100), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the busy status of an ARM command from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved busy status
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmCommandBusy_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x100), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ARM debug enable register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that specifies the debug enable state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmDebugEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xcf), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ARM debug enable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved debug enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmDebugEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xcf), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DP capture enable register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * DP capture.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmDpCaptureEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xf2), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DP capture enable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmDpCaptureEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xf2), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the force capture value for the ARM DP in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the force capture.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmDpCaptureForce_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xf2), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value from a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmDpCaptureForce_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xf2), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture selection for the ARM DP in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the capture selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmDpCaptureSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xf2), (value >> 0), 0x6, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmDpCaptureSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xf2), &register_value, 0x6, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the capture status from a specific register and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmDpDriveCaptureDone_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xf5), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the drive capture selection for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmDpDriveCaptureSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xf5), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the drive capture selection value from a specific register
 * of the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmDpDriveCaptureSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xf5), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the driver counter limit in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the counter limit value
 * to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmDpDrvCounterLimit_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xf1), (value >> 8), 0x1f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0xf0), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the driver counter limit value from the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * counter limit value will be stored.
 * @return Returns the status of the read operations, with the 16-bit counter
 * limit value stored in the provided pointer.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmDpDrvCounterLimit_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xf1), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xf0), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the driver counter reset value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * driver counter reset.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmDpDrvCounterReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xf2), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the driver counter reset value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved counter
 * reset value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmDpDrvCounterReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xf2), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the driver counter start value in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the value to set for the
 * driver counter.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any of the write operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmDpDrvCounterStart_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xf4), (value >> 8), 0x1f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0xf3), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the Arm DP driver counter from the device's
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * counter value will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmDpDrvCounterStart_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xf4), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xf3), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DAC ADCB selection for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the selection value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmDpDrvDacAdcbSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xf2), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADCB selection value from a specific register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved ADCB
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmDpDrvDacAdcbSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xf2), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ARM DP driver enable register value for the specified device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the ARM DP driver enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmDpDrvEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xf2), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmDpDrvEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xf2), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ARM error register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the ARM error register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmError_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xcf), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ARM error status from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved ARM error
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xcf), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific command byte in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the command byte value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmExtCmdByte1_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x101), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific byte value from a register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmExtCmdByte1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x101), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific command byte in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the command byte value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmExtCmdByte2_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x102), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific byte value from a hardware register and stores it
 * in the provided pointer.
 *
 * @param device A pointer to the device structure used for hardware
 * communication.
 * @param value A pointer to a `uint8_t` variable where the retrieved byte value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmExtCmdByte2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x102), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific register value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmExtCmdByte3_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x103), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific byte value from a hardware register and stores it
 * in the provided pointer.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved byte value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmExtCmdByte3_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x103), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific register value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmExtCmdByte4_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x104), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific byte from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmExtCmdByte4_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x104), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific register value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmExtCmdByte5_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x105), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific byte value from a register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmExtCmdByte5_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x105), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ARM force reset value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the ARM force reset register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmForceReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xd1), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmForceReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xd1), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the response code from a specific register of the device and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmHrespCodeSlave_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xdd), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmHrespSysSlave_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xde), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ARM JTAG selection value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the JTAG selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmJtagSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xd0), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ARM JTAG selection value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved JTAG
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmJtagSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xd0), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ARM M3 run state in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmM3Run_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xcf), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmM3Run_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xcf), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ARM monitor interrupt value in the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the ARM monitor interrupt.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmMonitorInterrupt_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xd0), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ARM monitor interrupt value from a specific register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved interrupt
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmMonitorInterrupt_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xd0), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ARM override control value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the ARM override control register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmOverrideControl_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x16e), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ARM override control value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmOverrideControl_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x16e), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ARM stack pointer in the ADRV9001 device by writing its value
 * to multiple registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the stack pointer value
 * to be set.
 * @return Returns the status of the last register write operation, indicating
 * success (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmStackPtr_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0xda), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0xd9), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0xd8), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0xd7), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ARM stack pointer value from a device by reading
 * multiple registers.
 *
 * @param device A pointer to the device structure from which the ARM stack
 * pointer is being read.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved ARM
 * stack pointer value will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmStackPtr_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xda), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xd9), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xd8), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xd7), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ARM system error register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the ARM system error register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmSystemError_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xd0), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ARM system error value from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ArmSystemError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xd0), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a value in the NVS register map of the ADRV9001 device using an
 * auto-incrementing address.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AutoIncr_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xf6), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a value from a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AutoIncr_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xf6), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the decimation control for the auxiliary ADC 0 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the decimation control
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdc0DecimationCtl_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1cf), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the decimation control value for the auxiliary ADC 0 from
 * the device's register.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved decimation
 * control value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdc0DecimationCtl_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1cf), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the auxiliary ADC0 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the power-down state to
 * be set for the auxiliary ADC0.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdc0Pd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1cf), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power-down status of the auxiliary ADC0 from the
 * device's register.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved ADC0
 * power-down status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdc0Pd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1cf), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Reads the auxiliary ADC value from the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the read ADC value
 * will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdc0Read_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1d1), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x1d0), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reset value for the auxiliary ADC 0 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the reset value to be set
 * for the auxiliary ADC 0.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdc0Reset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1cf), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reset status of the auxiliary ADC0 from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved ADC0 reset
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdc0Reset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1cf), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the decimation control for Auxiliary ADC1 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the decimation control
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdc1DecimationCtl_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1d2), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the decimation control value for Auxiliary ADC 1 from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved decimation
 * control value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdc1DecimationCtl_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1d2), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the auxiliary ADC1 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the power-down state to
 * be set (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdc1Pd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1d2), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power-down status of the auxiliary ADC1 from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved ADC1 power-
 * down status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdc1Pd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1d2), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Reads the auxiliary ADC1 value from the device's register map.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 16-bit unsigned integer where the read ADC value
 * will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdc1Read_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1d4), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x1d3), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reset value for the auxiliary ADC1 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the reset value to be set
 * for the auxiliary ADC1.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdc1Reset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1d2), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reset status of the auxiliary ADC1 from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved ADC1 reset
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdc1Reset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1d2), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the decimation control for the auxiliary ADC by writing a
 * specified value to a hardware register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the decimation control
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdc2DecimationCtl_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1d5), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the decimation control value for the auxiliary ADC from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved decimation
 * control value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdc2DecimationCtl_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1d5), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the auxiliary ADC by writing a specified
 * value to a specific register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register, indicating the power-down state.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdc2Pd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1d5), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the auxiliary ADC2 power-down register from the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdc2Pd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1d5), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Reads the value of the auxiliary ADC channel 2 from the device's
 * register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the read ADC value
 * will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and a non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdc2Read_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1d7), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x1d6), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reset value for the auxiliary ADC2 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the reset value to be set
 * for the auxiliary ADC2.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdc2Reset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1d5), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reset status of the auxiliary ADC2 from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved ADC2 reset
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdc2Reset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1d5), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the decimation control for the auxiliary ADC3 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the decimation control
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdc3DecimationCtl_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1d8), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the decimation control value for the auxiliary ADC 3 from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved decimation
 * control value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdc3DecimationCtl_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1d8), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the auxiliary ADC3 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired power-down
 * state for the auxiliary ADC3.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdc3Pd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1d8), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the auxiliary ADC3 power-down register from the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdc3Pd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1d8), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Reads the value of the auxiliary ADC channel 3 from the device's
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 16-bit unsigned integer where the read ADC value
 * will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdc3Read_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1da), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x1d9), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reset value for the auxiliary ADC3 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the reset value to be set
 * for the auxiliary ADC3.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdc3Reset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1d8), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reset status of the auxiliary ADC3 from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved ADC3 reset
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdc3Reset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1d8), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the decimation control for the auxiliary ADC temperature sensor
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the decimation control
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdcTempSenseDecimationCtl_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1b5), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the decimation control value for the auxiliary ADC
 * temperature sensor from a specific register.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved decimation
 * control value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdcTempSenseDecimationCtl_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1b5), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the digital reset value for the auxiliary ADC temperature sensing
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * digital reset.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdcTempSenseDigResetb_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1b5), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the digital reset status of the auxiliary ADC temperature
 * sensor from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved reset status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdcTempSenseDigResetb_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1b5), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the auxiliary ADC temperature sensor in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired power-down
 * state (0 or 1) for the temperature sensor.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdcTempSensePd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1b5), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the temperature sensor power-down status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved temperature
 * sensor status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdcTempSensePd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1b5), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the temperature sensing reset value for the auxiliary ADC in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the reset value to be set
 * for the temperature sensor.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdcTempSenseReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1b5), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the temperature sensor reset value from the auxiliary ADC
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxAdcTempSenseReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1b5), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LDO bypass configuration for the auxiliary synthesizer in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * LDO bypass configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxSynthLdoBypass_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1a8), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LDO bypass status from the auxiliary synthesizer
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved LDO bypass
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxSynthLdoBypass_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1a8), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bypass state of the auxiliary synthesizer LDO filter in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the bypass value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxSynthLdoFilterBypass_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1a9), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bypass filter status of the auxiliary synthesizer LDO
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved filter
 * bypass status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxSynthLdoFilterBypass_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1a9), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the auxiliary synthesizer LDO in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the power-down state to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxSynthLdoPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1a8), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxSynthLdoPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1a8), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the LDO status of the auxiliary synthesizer from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved LDO status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxSynthLdoStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1a8), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output voltage selection for the auxiliary synthesizer LDO in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired output
 * voltage selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxSynthLdoVoutSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1a8), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LDO output selection value from a specific register of
 * the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved LDO output
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxSynthLdoVoutSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1a8), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output trim value for the auxiliary synthesizer LDO in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the trim value to be set
 * for the LDO output.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxSynthLdoVoutTrim_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1a9), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LDO output trim value from a specific register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved LDO output
 * trim value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_AuxSynthLdoVoutTrim_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1a9), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the blockout window size in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the blockout window size
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_BlockoutWindowSize_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xd2), (value >> 0), 0x1e, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the blockout window size from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved blockout
 * window size will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_BlockoutWindowSize_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xd2), &register_value, 0x1e, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bus address in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the bus address to be
 * set.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any of the write operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_BusAddr_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xfa), (value >> 26), 0x3f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0xf9), (value >> 18));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0xf8), (value >> 10));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0xf7), (value >> 2));
    if (0 != status) return status;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xff), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 40-bit bus address from the device by reading multiple
 * registers.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved bus
 * address will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_BusAddr_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xfa), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xf9), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xf8), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xf7), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xff), &register_value, 0x3, 0x0);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a bus response value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the bus response register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_BusResponse_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xf6), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific bus response value from a device and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure from which the bus response
 * is to be read.
 * @param value A pointer to a `uint8_t` variable where the retrieved bus
 * response value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_BusResponse_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xf6), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bus size for the ADRV9001 device by writing a specified value
 * to a specific register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the bus size value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_BusSize_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xf6), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bus size from a specific register of the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved bus size
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_BusSize_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xf6), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the bus waiting status from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_BusWaiting_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xf6), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the lower nibble of the chip grade from a specific register
 * and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved lower nibble
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ChipGradeLowerNibble_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x5), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the upper nibble of the chip grade from a specific register
 * and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved upper
 * nibble will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ChipGradeUpperNibble_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x5), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ChipTypeRAD_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x3), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the clock selection setting operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Clk1105ClkSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x195), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Clk1105ClkSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x195), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the LDO for the VCO in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the desired power-down
 * state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ClkPllLpVcoLdoPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1b3), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ClkPllLpVcoLdoPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1b3), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the VCO LDO in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired power-down
 * state.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ClkPllVcoLdoPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1ab), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PLL VCO LDO power-down status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved power-down
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ClkPllVcoLdoPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1ab), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LDO bypass configuration for the clock synthesizer in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * LDO bypass configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ClkSynthLdoBypass_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1aa), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LDO bypass status from the clock synthesizer register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved LDO bypass
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ClkSynthLdoBypass_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1aa), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bypass state of the LDO filter in the clock synthesizer of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the bypass value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ClkSynthLdoFilterBypass_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1ab), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the filter bypass status from the clock synthesizer LDO
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved filter
 * bypass status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ClkSynthLdoFilterBypass_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1ab), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the clock synthesizer LDO in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the desired power-down state to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ClkSynthLdoPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1aa), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the clock
 * synthesizer LDO power-down state.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ClkSynthLdoPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1aa), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the LDO status from the clock synthesizer register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved LDO status
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ClkSynthLdoStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1aa), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output voltage selection for the LDO of the clock synthesizer
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired output
 * voltage selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ClkSynthLdoVoutSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1aa), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LDO voltage selection value from the clock synthesizer
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved LDO
 * voltage selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ClkSynthLdoVoutSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1aa), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LDO output trim value for the clock synthesizer in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the trim value to be set
 * for the LDO output.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ClkSynthLdoVoutTrim_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1ab), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LDO VOUT trim value from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved LDO VOUT
 * trim value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ClkSynthLdoVoutTrim_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1ab), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LDO bypass configuration for the clock synthesizer in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the LDO bypass configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ClkSynthLpLdoBypass_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1b2), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bypass status of the low-power LDO clock synthesizer
 * from a specific register.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved bypass
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ClkSynthLpLdoBypass_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1b2), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bypass state of the low-pass filter in the clock synthesizer
 * LDO of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the bypass state to be
 * set for the low-pass filter.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ClkSynthLpLdoFilterBypass_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1b3), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LDO filter bypass setting from the clock synthesizer
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved filter
 * bypass value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ClkSynthLpLdoFilterBypass_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1b3), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low-power LDO power-down state for the clock synthesizer in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the power-down state to
 * be set for the low-power LDO.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ClkSynthLpLdoPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1b2), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low-power LDO power-down status from a specific register
 * of the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ClkSynthLpLdoPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1b2), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the status of the Clock Synthesizer Low Power LDO from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved status value
 * will be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure of the register read.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ClkSynthLpLdoStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1b2), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output voltage selection for the low-power LDO in the clock
 * synthesizer of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired output
 * voltage selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ClkSynthLpLdoVoutSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1b2), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the output voltage selection for the low-power LDO of the
 * clock synthesizer from a specific register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved voltage
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ClkSynthLpLdoVoutSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1b2), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the voltage trim value for the low-power LDO in the clock
 * synthesizer of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the voltage trim value to
 * be set.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ClkSynthLpLdoVoutTrim_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1b3), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the output voltage trim value from a specific register of
 * the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved voltage
 * trim value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ClkSynthLpLdoVoutTrim_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1b3), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the completed stream number from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device context used for reading the register.
 * @param value A pointer to a uint8_t variable where the completed stream
 * number will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_CompletedStreamNum_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x11a), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the controller document revision from a specific register
 * and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a uint8_t variable where the retrieved document
 * revision will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ControllerDocRevision_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xa), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CSB stall value in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the stall value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_CsbStall_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_CsbStall_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CSSI TXDP interface selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * CSSI TXDP interface selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_CssiTxdpIntfSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xc5), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_CssiTxdpIntfSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xc5), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DAC1 clock high-speed clock divider ratio selection in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired divider ratio
 * selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Dac1ClkHsclkDivRatioSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x190), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DAC1 clock high-speed clock divider ratio selection from
 * a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * divider ratio will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Dac1ClkHsclkDivRatioSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x190), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DAC2 clock high-speed clock divider ratio selection in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the divider ratio
 * selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Dac2ClkHsclkDivRatioSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x191), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DAC2 clock high-speed clock divider ratio selection from
 * a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Dac2ClkHsclkDivRatioSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x191), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LDO bypass configuration for the device clock in the
 * ADRV9001.
 *
 * @param device A pointer to the device structure that contains the device
 * context.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * LDO bypass configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DevClkLdoBypass_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1b0), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LDO bypass status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved LDO bypass
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DevClkLdoBypass_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1b0), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the filter bypass configuration for the device clock LDO in the
 * ADRV9001.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the filter bypass
 * setting.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DevClkLdoFilterBypass_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1b1), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the filter bypass status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved filter
 * bypass status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DevClkLdoFilterBypass_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1b1), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the device clock LDO by writing a
 * specified value to a register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DevClkLdoPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1b0), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the device clock LDO power-down status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock LDO
 * power-down status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DevClkLdoPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1b0), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the LDO status from a specific register of the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved LDO status
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DevClkLdoStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1b0), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output voltage selection for the LDO in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired output
 * voltage selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DevClkLdoVoutSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1b0), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LDO output selection value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved LDO output
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DevClkLdoVoutSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1b0), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output voltage trim value for the LDO of the device clock in
 * the ADRV9001.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the trim value to be set
 * for the LDO output voltage.
 * @return Returns the status of the write operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DevClkLdoVoutTrim_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1b1), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LDO output voltage trim value from a specific register
 * of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved LDO output
 * voltage trim value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DevClkLdoVoutTrim_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1b1), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the device clock SYSREF hold word from two registers and
 * combines their values.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a 16-bit unsigned integer where the combined
 * register values will be stored.
 * @return Returns the status of the last register read operation, indicating
 * success or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DevClkSysrefHoldWord_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x1c6), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x1c5), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a 16-bit value from two consecutive registers in the
 * device's register map.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DevClkSysrefSetupWord_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x1c8), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x1c7), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the device clock buffer offset enable value in the ADRV9001
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the clock buffer offset enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DevClkbufOffsetEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1e0), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock buffer offset enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock buffer
 * offset enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DevClkbufOffsetEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e0), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the current bias for the device clock buffer termination.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the bias current value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DevClkbufTrmIbias_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1e1), (value >> 0), 0x18, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the current bias value from a specific register in the
 * device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved bias value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DevClkbufTrmIbias_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e1), &register_value, 0x18, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the VCM value for the device clock buffer in the ADRV9001.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the VCM value to be set
 * for the clock buffer.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DevClkbufTrmVcm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1e1), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DevClkbufTrmVcm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e1), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the MCS resetb value in the device's clock divider register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the MCS resetb field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DevclkDividerMcsResetb_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1e0), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a device register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DevclkDividerMcsResetb_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e0), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the device clock buffer enable state by writing a specified value
 * to a hardware register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the clock buffer enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DeviceClkBufferEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1e0), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the device clock buffer enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved clock buffer
 * enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DeviceClkBufferEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e0), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the device clock divide ratio for the ADRV9001 by writing a
 * specified value to a hardware register.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired clock divide
 * ratio to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DeviceClkDivideRatio_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1e2), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the device clock divide ratio from a specific register.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * divide ratio will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DeviceClkDivideRatio_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e2), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific custom operational mode value from a device's
 * register.
 *
 * @param device A pointer to the device structure from which the operational
 * mode is being read.
 * @param value A pointer to a uint8_t variable where the retrieved operational
 * mode value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DeviceConfigCustomOpModes_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x2), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the operational mode value from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * operational mode value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DeviceConfigOpModes_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x2), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the device configuration status from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved
 * configuration status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DeviceConfigStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x2), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the digital device clock buffer enable state in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the desired state of the
 * clock buffer (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DigDeviceClkBufferEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1c9), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock buffer enable status from a specific register of
 * the device.
 *
 * @param device A pointer to the device structure that contains the necessary
 * context for the operation.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * buffer enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DigDeviceClkBufferEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1c9), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the digital SYSREF sample enable configuration for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to set for the
 * SYSREF sample enable.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DigSysrefSampleEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1c9), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the digital SYSREF sample enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved SYSREF
 * sample enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DigSysrefSampleEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1c9), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX1 clock division value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the division value to be
 * set for the LSSI RX1 clock.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DivAnaLssiRx1Clk_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1b9), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI RX1 clock division value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * division value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DivAnaLssiRx1Clk_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1b9), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX2 clock divider value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock divider value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DivAnaLssiRx2Clk_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1ba), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI RX2 clock division value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * division value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DivAnaLssiRx2Clk_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1ba), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI TX1 clock division value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the division value to be
 * set for the LSSI TX1 clock.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DivAnaLssiTx1Clk_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1bb), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI TX1 clock division value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * division value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DivAnaLssiTx1Clk_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1bb), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI TX2 clock divider value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock divider value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DivAnaLssiTx2Clk_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1bc), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI TX2 clock division value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * division value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DivAnaLssiTx2Clk_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1bc), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the high-speed digital clock divider value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock divider value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DivHsDigClk_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1b8), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the high-speed digital clock divider value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * divider value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DivHsDigClk_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1b8), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA abort register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the DMA abort register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaAbort_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x11), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA abort status from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaAbort_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x11), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA abort flag from a specific register and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved DMA abort
 * flag will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaAbortFlag_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1d), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA AHB error status from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaAhbError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA block base offset address in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the base offset address
 * to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaBlockBaseOffsetAddr_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1a), (value >> 8), 0xf, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x1b), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA block base offset address from the device's
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * offset address will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaBlockBaseOffsetAddr_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1a), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x1b), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA configuration index mode for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the DMA configuration index mode.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaConfigIndexMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x10), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA configuration index mode from a specific register
 * and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaConfigIndexMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x10), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA continuous index mode for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * DMA continuous index mode.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaContinuousIndexMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x10), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA continuous index mode value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaContinuousIndexMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x10), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the current DMA index from a device by reading multiple
 * registers and combining their values.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the combined DMA
 * index value will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaCurrIndex_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x2c), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x2d), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x2e), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x2f), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the current DMA block address from a device by reading
 * multiple registers.
 *
 * @param device A pointer to the device structure from which the DMA block
 * address is to be read.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved DMA
 * block address will be stored.
 * @return Returns the status of the last read operation, with the DMA block
 * address stored in the variable pointed to by value.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaCurrentBlockAddr_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x28), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x29), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x2a), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x2b), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the current DMA index address from a device by reading
 * multiple registers.
 *
 * @param device A pointer to the device structure from which the DMA index
 * address is to be read.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved DMA
 * index address will be stored.
 * @return Returns the status of the last read operation, with the DMA index
 * address stored in the variable pointed to by value.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaCurrentIndexAddr_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x20), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x21), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x22), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x23), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the current DMA profile address from a device by reading
 * multiple registers.
 *
 * @param device A pointer to the device structure from which the DMA profile
 * address is being read.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved DMA
 * profile address will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaCurrentProfileAddr_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x24), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x25), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x26), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x27), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA enable register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value indicating the desired state to set for the DMA
 * enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x11), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA enable status from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved DMA enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x11), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA end-of-transfer flag from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved end-of-
 * transfer flag will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaEndOfTransferFlag_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1d), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA error flag from a specific register and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved DMA error
 * flag will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaErrorFlag_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1d), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific DMA field type error value from a device
 * register.
 *
 * @param device A pointer to the device structure from which the DMA field type
 * error is to be read.
 * @param value A pointer to a `uint8_t` variable where the retrieved error
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaFieldTypeError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1f), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA General Bus Error status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaGenbusError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA ignore TX/RX match configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the DMA ignore TX/RX match register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaIgnoreTxrxMatch_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x10), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA ignore TX/RX match value from a specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaIgnoreTxrxMatch_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x10), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the maximum number of words for DMA in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the maximum number of
 * words to set for DMA.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaMaxNumberOfWord_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x1c), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the maximum number of words for DMA from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved maximum
 * number of words will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaMaxNumberOfWord_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x1c), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA maximum word count error from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved error value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaMaxWordCountError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the next receive value in the DMA register for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the DMA register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaNextRx_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x12), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the next receive value from the DMA register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaNextRx_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x12), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the next RX mismatch error value from a specific register in
 * the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved mismatch
 * error value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaNextRxMismatchError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the next skip value in the DMA register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the next skip value to be
 * set in the DMA register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaNextSkip_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x12), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the next skip value from a specific register in the device's
 * DMA configuration.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved skip value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaNextSkip_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x12), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the next transmission value in the DMA register for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the next transmission.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaNextTx_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x12), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the next transmission value from the DMA register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved transmission
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaNextTx_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x12), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA next transmission mismatch error status from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved mismatch
 * error value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaNextTxMismatchError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA register map offset address for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the DMA register map offset address.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaRegmapOffsetAddr_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x13), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific DMA register value from the device and stores it
 * in the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaRegmapOffsetAddr_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x13), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA start table address in the device's register by writing
 * the value in four separate bytes.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer representing the address to be set,
 * which will be split into four bytes.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaStartTableAddr_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x14), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x15), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x16), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x17), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA start table address from a device by reading
 * multiple registers.
 *
 * @param device A pointer to the device structure from which the DMA start
 * table address is to be read.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved DMA
 * start table address will be stored.
 * @return Returns the status of the last register read operation, where a
 * status of 0 indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaStartTableAddr_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x14), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x15), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x16), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x17), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA state from a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved DMA state
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaState_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x30), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA status from a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved DMA status
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1d), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA stop register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the DMA stop register.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaStop_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x11), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DMA stop status from a specific register and stores it
 * in the provided value.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved DMA stop
 * status will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaStop_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x11), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA stop flag value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved DMA stop
 * flag value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaStopFlag_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1d), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DMA table base offset address in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the base offset address
 * to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaTableBaseOffsetAddr_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x18), (value >> 8), 0xf, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x19), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the base offset address of the DMA table from the device's
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved base
 * offset address will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaTableBaseOffsetAddr_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x18), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x19), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the unexpected next RX error status from a specific register
 * in the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved error status
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaUnexpectedNextRxError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DMA unexpected next skip error status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved error status
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaUnexpectedNextSkipError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the unexpected next transmission error status from a
 * specific register of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved error
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DmaUnexpectedNextTxError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output driver value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the output driver.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DoOutDrv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xf), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_DoOutDrv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xf), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the ECC data parity count from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved parity count
 * will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_EccDataParityCount_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xe2), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ECC data parity error status in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the parity error status
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_EccDataParityError_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xe0), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ECC data parity error status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved parity
 * error value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_EccDataParityError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xe0), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves ECC data parity from a device by reading multiple registers
 * and combining their values.
 *
 * @param device A pointer to the device structure from which the ECC data
 * parity is to be read.
 * @param value A pointer to a 32-bit unsigned integer where the combined ECC
 * data parity value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_EccDataParityIn_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xe7), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xe6), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xe5), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xe4), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the parity index from a specific register and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved parity index
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_EccDataParityIndex_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xe0), &register_value, 0xe, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the ECC data parity output from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved parity
 * output will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_EccDataParityOut_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xe3), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the ECC data parity tag from the device's register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * parity tag will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_EccDataParityTag_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xe0), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xe1), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ECC disable register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value indicating the ECC disable state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_EccDisable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xdf), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ECC disable status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved ECC disable
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_EccDisable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xdf), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ECC IRQ sensitivity for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the sensitivity value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_EccIrqSensitivity_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xdf), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ECC IRQ sensitivity value from a specific register of
 * the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved ECC IRQ
 * sensitivity value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_EccIrqSensitivity_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xdf), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the parity count from a specific register and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved parity count
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_EccProgParityCount_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xea), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ECC program parity error status in the device's register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the parity error value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_EccProgParityError_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xe8), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the parity error status from a specific register and stores
 * it in the provided value.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved parity
 * error status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_EccProgParityError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xe8), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the ECC program parity value from a device by reading
 * multiple registers.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * parity value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_EccProgParityIn_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xef), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xee), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xed), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xec), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the parity index from a specific register and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved parity index
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_EccProgParityIndex_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xe8), &register_value, 0xe, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the ECC programmed parity output from a specific register
 * and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved parity
 * output will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_EccProgParityOut_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xeb), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the ECC program parity tag from the device's register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * parity tag will be stored.
 * @return Returns the status of the read operations, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_EccProgParityTag_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xe8), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xe9), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a general-purpose interrupt for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the interrupt field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ForceGpInterrupt_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xd0), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ForceGpInterrupt_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xd0), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bypass state of the GP LDO in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the bypass value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_GpLdoBypass1_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1ac), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bypass status of the GP LDO from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved bypass
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_GpLdoBypass1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1ac), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bypass configuration for the GP LDO in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * GP LDO bypass configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_GpLdoBypass2_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1ad), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_GpLdoBypass2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1ad), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bypass filter configuration for the GP LDO in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the filter bypass
 * configuration value.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_GpLdoFilterBypass1_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1ae), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the filter bypass setting from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved filter
 * bypass value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_GpLdoFilterBypass1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1ae), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bypass state of the GP LDO filter in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the bypass value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_GpLdoFilterBypass2_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1af), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_GpLdoFilterBypass2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1af), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the GP LDO by writing a specified value
 * to a specific register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_GpLdoPd1_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1ac), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_GpLdoPd1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1ac), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the GP LDO by writing a specified value
 * to a hardware register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_GpLdoPd2_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1ad), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_GpLdoPd2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1ad), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the status of the GP LDO from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GP LDO
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_GpLdoStatus1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1ac), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the status of the GP LDO from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GP LDO
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_GpLdoStatus2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1ad), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output voltage selection for the GP LDO in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired output
 * voltage selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_GpLdoVoutSel1_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1ac), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the output voltage selection for the GP LDO from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved voltage
 * selection will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_GpLdoVoutSel1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1ac), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output voltage selection for the GP LDO in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired output
 * voltage selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_GpLdoVoutSel2_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1ad), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the output voltage selection for the GP LDO from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved voltage
 * selection will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_GpLdoVoutSel2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1ad), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output trim value for the GP LDO in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the trim value to be set
 * for the GP LDO output.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_GpLdoVoutTrim1_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1ae), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the output voltage trim value from a specific register of
 * the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved trim value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_GpLdoVoutTrim1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1ae), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output trim value for the GP LDO in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the trim value to be set
 * for the GP LDO output.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_GpLdoVoutTrim2_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1af), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the output voltage trim value from a specific register of
 * the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved trim value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_GpLdoVoutTrim2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1af), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the inversion state of GPIO 1110 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the inversion value to be
 * set for GPIO 1110.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio1110Invert_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x5e), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the inverted GPIO value from a specific register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved inverted
 * GPIO value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio1110Invert_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x5e), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO 1110 source selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the source selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio1110SourceSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x5b), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO 1110 source selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO source
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio1110SourceSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x5b), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the inversion state of GPIO 13 and 12 on the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the inversion state to be
 * set for GPIO 13 and 12.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio1312Invert_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x5e), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the inverted GPIO value from a specific register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved inverted
 * GPIO value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio1312Invert_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x5e), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO 1312 source selection in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the source selection
 * value to be written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio1312SourceSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x5c), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO 1312 source selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO source
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio1312SourceSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x5c), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the inversion state of GPIO 15/14 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A `uint8_t` value representing the desired inversion state for
 * GPIO 15/14.
 * @return Returns an `int32_t` status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio1514Invert_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x5e), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the inverted GPIO value from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved inverted
 * GPIO value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio1514Invert_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x5e), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO1514 source selection in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the source selection
 * value to be written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio1514SourceSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x5d), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO1514 source selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO1514
 * source selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio1514SourceSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x5d), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the inversion state of GPIO 10 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value indicating the desired inversion state (0 or 1)
 * for GPIO 10.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio10Invert_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x5e), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the inverted GPIO 10 value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO 10
 * inverted value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio10Invert_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x5e), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO 10 source selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the source selection
 * value for GPIO 10.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio10SourceSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x56), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO 10 source selection value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO 10
 * source selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio10SourceSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x56), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the inversion state of GPIO32 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the inversion state to be
 * set for GPIO32.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio32Invert_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x5e), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the inverted GPIO32 value from a specific register in the
 * device.
 *
 * @param device A pointer to the device structure that contains the necessary
 * context for the operation.
 * @param value A pointer to a uint8_t variable where the retrieved inverted
 * GPIO32 value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio32Invert_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x5e), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO32 source selection in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the source selection
 * value for GPIO32.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio32SourceSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x57), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO32 source selection value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO32
 * source selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio32SourceSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x57), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the inversion state of GPIO 54 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A `uint8_t` value indicating the desired inversion state for
 * GPIO 54.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio54Invert_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x5e), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the inverted GPIO54 value from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved inverted
 * GPIO54 value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio54Invert_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x5e), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO54 source selection in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the source selection
 * value for GPIO54.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio54SourceSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x58), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO54 source selection value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO54
 * source selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio54SourceSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x58), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the inversion state of GPIO76 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the inversion state to be
 * set for GPIO76.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio76Invert_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x5e), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the inverted GPIO76 value from a specific register in the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved inverted
 * GPIO76 value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio76Invert_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x5e), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO76 source selection in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the source selection
 * value to be written to the GPIO76 register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio76SourceSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x59), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO76 source selection value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO76
 * source selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio76SourceSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x59), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the inversion state of GPIO 98 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the inversion state to be
 * set for GPIO 98.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio98Invert_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x5e), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the inverted GPIO 98 value from a specific register in the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO 98
 * inverted value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio98Invert_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x5e), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO 98 source selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the source selection
 * value for GPIO 98.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio98SourceSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x5a), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO 98 source selection value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO 98
 * source selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Gpio98SourceSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x5a), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO telemetry enable state in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for GPIO
 * telemetry enable.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO telemetry enable setting operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_GpioTelemetryEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xcf), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO telemetry enable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO
 * telemetry enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_GpioTelemetryEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xcf), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the HS2 reference clock switch enable state in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * HS2 reference clock switch.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Hs2refClockSwitchEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x193), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the HS2 reference clock switch enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock switch
 * enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Hs2refClockSwitchEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x193), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the high-speed digital clock enable register for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the high-speed digital clock enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_HsDigClkEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x193), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the high-speed digital clock enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_HsDigClkEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x193), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the high-speed digital clock power-down state in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the desired power-down
 * state for the high-speed digital clock.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_HsDigClkPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1b8), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the high-speed digital clock power-down status from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * power-down status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_HsDigClkPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1b8), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the last stream number in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the last stream number to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_LastStreamNum_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x119), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the last stream number from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the last stream number
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_LastStreamNum_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x119), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the legacy mode value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the legacy mode register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_LegacyMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xf6), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_LegacyMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xf6), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the loopback filter flip configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * loopback filter flip.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Loopback1FilterFlip_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x170), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the Loopback 1
 * filter flip in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Loopback1FilterFlip_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x170), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Loopback 2 Filter Flip configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the Loopback 2 Filter Flip register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Loopback2FilterFlip_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x170), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Loopback2FilterFlip_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x170), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the loopback enable state in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the loopback enable state to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_LpbkEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x16f), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the loopback enable status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved loopback
 * enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_LpbkEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x16f), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a value in the register map of the ADRV9001 device using a least
 * significant bit first approach.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the result of the register
 * write operation, where a value of 0 typically indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_LsbFirst1_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x0), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in a
 * provided variable.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_LsbFirst1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x0), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the register map of the ADRV9001 device using
 * a least significant bit first approach.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_LsbFirst6_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x0), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 6-bit value from a specific register in the device and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_LsbFirst6_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x0), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI TXDP interface selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * LSSI TXDP interface selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_LssiTxdpIntfSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xc5), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI TXDP interface selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved interface
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_LssiTxdpIntfSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xc5), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS IBIAS distribution power-down state in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the power-down state to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_LvdsIbiasDistPd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xb5), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS I-bias distribution power-down status from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_LvdsIbiasDistPd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xb5), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC stream error value in the SPI register map for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the error value to be set
 * in the BBIC stream.
 * @return Returns the status of the last write operation, which indicates
 * success (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MainSpBbicStreamErrorToSpi_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x14e), (value >> 16), 0x7f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x14d), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x14c), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit error value from the BBIC stream registers and
 * stores it in the provided output variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved error
 * value will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MainSpBbicStreamErrorToSpi_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x14e), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x14d), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x14c), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the stream status from the BBIC registers and stores it in
 * the provided value.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * stream status will be stored.
 * @return Returns the status of the last read operation, which indicates
 * success (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MainSpBbicStreamStatus_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x14b), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x14a), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x149), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the major revision mask from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved major
 * revision mask will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MaskRevisionMajor_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x4), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the minor revision mask from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved minor
 * revision mask will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MaskRevisionMinor_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x4), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MasterSlaveReadbackCtl_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific bit value from a register in a master-slave
 * device.
 *
 * @param device A pointer to the device structure representing the master-slave
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved bit value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MasterSlaveTransferBit_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xe), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the FIFO enable status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved FIFO enable
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_McsAndSsiTx1FifoEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1eb), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the FIFO enable status for the MCS and SSI TX2 from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved FIFO enable
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_McsAndSsiTx2FifoEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1eb), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the MCS capture enable register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that indicates the desired state for the MCS
 * capture enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_McsCaptureEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1e8), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the MCS capture enable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_McsCaptureEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e8), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_McsCaptureReceived_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e9), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the MCS capture received clear register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_McsCaptureReceivedClear_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1ec), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_McsCaptureReceivedClear_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1ec), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the synchronization status of the PLL SDM from a specific
 * register.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved
 * synchronization status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_McsClkPllSdmSyncStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x198), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the clock divider synchronization status from a specific
 * register of the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * divider synchronization status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_McsDeviceClkDividerSyncStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x198), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the synchronization status of digital clocks from a specific
 * register.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * synchronization status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_McsDigitalClocksSyncStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x198), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the internal generator value in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the internal generator.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_McsInternalGen_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1e8), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_McsInternalGen_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e8), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the internal generator selection for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the generator selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_McsInternalGenSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1e7), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the internal generator selection value from a specific
 * register of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved generator
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_McsInternalGenSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e7), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the SYSREF status from the JESD register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the SYSREF status will be
 * stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_McsJesdSysrefStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x198), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the MCS retime bypass configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the MCS retime bypass register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_McsRetimeBypass_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1e7), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_McsRetimeBypass_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e7), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the second capture value from a specific register in the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved second
 * capture value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_McsSecondCaptureReceived_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e9), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the second capture received clear value in the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_McsSecondCaptureReceivedClear_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1ec), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the second capture received status from a specific register
 * and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_McsSecondCaptureReceivedClear_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1ec), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the stretched test selection value in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_McsStretchedTestSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1e7), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_McsStretchedTestSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e7), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the memory response mask for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the memory response mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MemHrespMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xcf), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the memory response mask value from a specific register of
 * the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved memory
 * response mask value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MemHrespMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xcf), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Writes a 32-bit value to a series of registers in a device.
 *
 * @param device A pointer to the device structure where the registers are
 * located.
 * @param value A 32-bit unsigned integer value to be written to the device
 * registers.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MemWriteData_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0xfe), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0xfd), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0xfc), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0xfb), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 32-bit value from a series of hardware registers by
 * reading four consecutive 8-bit values.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which data is being read.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MemWriteData_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xfe), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xfd), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xfc), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xfb), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the alive time for the monitoring timer in the ADRV9001 device by
 * writing to specific registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the alive time value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the last register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonTimerAliveTime_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x3f), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x40), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x41), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x42), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the alive time from the device's register map by reading
 * multiple registers and combining their values.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the combined alive
 * time value will be stored.
 * @return Returns the status of the last register read operation, with a value
 * of 0 indicating success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonTimerAliveTime_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x3f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x40), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x41), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x42), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the current time from a timer by reading multiple registers.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved timer
 * value will be stored.
 * @return Returns the status of the last register read operation, indicating
 * success (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonTimerCurrTime_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x44), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x45), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x46), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x47), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the monitoring timer enable value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * monitoring timer enable.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonTimerEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x35), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the monitor timer enable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonTimerEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x35), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the monitor timer enable value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the monitor timer enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonTimerEnableWithMonitor_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x36), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the monitor timer enable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonTimerEnableWithMonitor_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x36), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the initialization time for the monitoring timer by writing to
 * specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer representing the initialization time
 * to be set.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonTimerInitTime_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x37), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x38), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x39), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x3a), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 32-bit timer initialization value from a device by reading
 * multiple registers.
 *
 * @param device A pointer to the device structure from which the timer
 * initialization value is to be read.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved timer
 * initialization value will be stored.
 * @return Returns the status of the last register read operation, where a value
 * of 0 indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonTimerInitTime_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x37), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x38), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x39), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x3a), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the monitoring timer mode for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the timer mode value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonTimerMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x36), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the monitor timer mode value from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved timer mode
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonTimerMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x36), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the sleep time for the monitoring timer in the ADRV9001 device by
 * writing to specific registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the sleep time value to
 * be set, which is divided into four parts for register writing.
 * @return Returns the status of the last write operation, which indicates
 * success (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonTimerSleepTime_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x3b), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x3c), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x3d), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x3e), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the sleep time value from the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved sleep
 * time value will be stored.
 * @return Returns the status of the last register read operation, with the
 * sleep time value stored in the provided pointer.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonTimerSleepTime_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x3b), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x3c), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x3d), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x3e), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the monitor timer state from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved timer state
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonTimerState_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x43), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock divider value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock divider value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorClkDiv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x33), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock divider value from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * divider value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorClkDiv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x33), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the monitor clock enable register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the monitor clock enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorClkEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x33), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock enable status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorClkEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x33), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the monitor enable state in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the monitor enable state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x31), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the monitor enable status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved monitor
 * enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x31), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the monitor enable configuration in the ADRV9001 device's
 * register map based on the provided SPI selection value.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the monitor enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorEnableFromSpiSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x32), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the monitor enable status from a specific register via SPI.
 *
 * @param device A pointer to the device structure used for communication.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorEnableFromSpiSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x32), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO mask for enabling monitoring in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO mask.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO mask setting operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorEnableGpioMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x49), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO mask value from a specific register of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO mask
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorEnableGpioMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x49), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO select for monitor enable in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO select.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO select setting operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorEnableGpioSelect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x48), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO selection value for the monitor enable feature from
 * a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorEnableGpioSelect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x48), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the high-speed clock gate enable status in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the status to set for the high-
 * speed clock gate.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorEnableHsclkGater_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x32), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorEnableHsclkGater_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x32), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the monitor enable switch reference to high-speed clock by
 * writing a specified value to a hardware register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorEnableSwitchRef2hsclk_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x32), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorEnableSwitchRef2hsclk_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x32), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the wakeup enable value for the monitor timer in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorEnableWakeupFromMonTimer_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x32), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the wakeup timer enable status from a specific register in
 * the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorEnableWakeupFromMonTimer_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x32), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the wakeup from pin enable status in the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value indicating the wakeup enable status to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorEnableWakeupFromPin_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x32), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the wakeup enable status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved wakeup
 * enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorEnableWakeupFromPin_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x32), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the wakeup enable state for the ADRV9001 device via SPI.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the wakeup enable state
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorEnableWakeupFromSpi_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x32), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the wakeup enable status from a specific register via SPI.
 *
 * @param device A pointer to the device structure used for communication.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorEnableWakeupFromSpi_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x32), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PLL lock status in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the PLL lock status to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorForcePllLock_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x31), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PLL lock status from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the PLL lock status will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorForcePllLock_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x31), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the extended clock for monitoring interrupts in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorInterruptClkExtend_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x49), (value >> 0), 0x7c, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorInterruptClkExtend_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x49), &register_value, 0x7c, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the 'Monitor Keep Arm Running' register value for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorKeepArmRunning_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x32), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorKeepArmRunning_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x32), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the sleep enable state in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value indicating the sleep enable state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorSleepEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x31), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the sleep enable status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved sleep
 * enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorSleepEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x31), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the monitor state from a specific register and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved monitor
 * state will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorState_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x34), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the 'Monitor Timer Alive First' register value for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorTimerAliveFirst_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x32), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorTimerAliveFirst_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x32), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the wakeup configuration for the ADRV9001 device via SPI.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorWakeupFromSpi_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x31), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorWakeupFromSpi_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x31), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the wakeup GPIO mask in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO mask.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorWakeupGpioMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x49), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO mask value from a specific register and stores it
 * in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved GPIO mask
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorWakeupGpioMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x49), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO selection for wakeup monitoring in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the GPIO selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO selection write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorWakeupGpioSelect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x48), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO selection value for wakeup monitoring from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_MonitorWakeupGpioSelect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x48), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO direction control output enable register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the value to be written
 * to the GPIO direction control registers.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_NvsGpioDirectionControlOe_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x53), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x52), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO direction control output enable status from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved GPIO
 * direction control output enable value will be stored.
 * @return Returns the status of the last read operation, which indicates
 * success (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_NvsGpioDirectionControlOe_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x53), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x52), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Reads two 8-bit values from specific registers and combines them into
 * a 16-bit value.
 *
 * @param device A pointer to the device structure used for communication.
 * @param value A pointer to a 16-bit unsigned integer where the combined
 * register values will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_NvsGpioSpiRead_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x51), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x50), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO SPI source value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the value to be set in
 * the GPIO SPI source register.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_NvsGpioSpiSource_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x55), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x54), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 16-bit value from two consecutive registers of a device
 * via SPI.
 *
 * @param device A pointer to the device structure used for SPI communication.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, indicating
 * success or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_NvsGpioSpiSource_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x55), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x54), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the register map of the ADRV9001 device
 * without powering down.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Orx2rxWithoutPowerDown_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x168), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Orx2rxWithoutPowerDown_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x168), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ORX enable state in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the ORX enable state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_OrxEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x162), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ORX enable status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved ORX enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_OrxEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x162), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ORX enable state in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * ORX enable state.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_OrxEnableByArm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x16f), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_OrxEnableByArm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x16f), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO select value for the ORX enable in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the GPIO select value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO select value setting operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_OrxEnableGpioSelect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x169), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO select value for the ORx enable configuration from
 * a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO select
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_OrxEnableGpioSelect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x169), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ORX pin mode in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired ORX pin mode
 * value.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_OrxPinMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x168), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ORX pin mode from a specific register and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved ORX pin mode
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_OrxPinMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x168), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ORX selection value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the ORX selection register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_OrxSelect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x168), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific value from a hardware register and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_OrxSelect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x168), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ORX single channel mode configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the mode value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_OrxSingleChMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x168), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_OrxSingleChMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x168), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ORx single channel select pin mode in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the mode to set for the
 * ORx single channel select pin.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_OrxSingleChSelectPinMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x168), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_OrxSingleChSelectPinMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x168), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ORX uses RX pins configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the configuration value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_OrxUsesRxPins_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x168), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_OrxUsesRxPins_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x168), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the general-purpose interrupt driver value in the ADRV9001
 * device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the general-purpose interrupt driver.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpIntDrv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x75), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpIntDrv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x75), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the general-purpose interrupt pad configuration for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the interrupt pad.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpIntPe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x75), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpIntPe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x75), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the pad group interrupt settings in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the pad group interrupt settings.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpIntPs_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x75), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpIntPs_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x75), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `SmittTrig` field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the `SmittTrig` field.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpIntSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x75), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpIntSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x75), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO driver value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the GPIO driver.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p80Drv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x5f), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO driver value from a specific register and stores it
 * in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved GPIO
 * driver value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p80Drv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x5f), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pad configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO pad.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p80Pe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x5f), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific GPIO register value and stores it in the provided
 * variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p80Pe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x5f), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pad configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO pad.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p80Ps_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x5f), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p80Ps_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x5f), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO 1.80V trigger value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the GPIO trigger.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p80SmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x5f), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p80SmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x5f), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO driver value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the GPIO driver.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO driver value setting operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p810Drv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x69), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific GPIO register value from the device and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the GPIO register
 * value will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p810Drv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x69), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pad configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO pad.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p810Pe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x69), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p810Pe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x69), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pad configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO pad.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p810Ps_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x69), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p810Ps_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x69), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO trigger configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO trigger configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p810SmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x69), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p810SmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x69), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO driver value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the GPIO driver.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO driver value setting operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p811Drv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x6a), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific GPIO register value from the device and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the GPIO register
 * value is read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p811Drv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x6a), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pad configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO pad.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p811Pe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x6a), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific GPIO register value from the device and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the GPIO register
 * value will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p811Pe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x6a), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pad configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO pad.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO pad configuration operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p811Ps_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x6a), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p811Ps_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x6a), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO trigger value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO trigger.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p811SmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x6a), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p811SmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x6a), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO driver value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the GPIO driver.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p81Drv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x60), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific GPIO register value from the device and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the GPIO register
 * value is to be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p81Drv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x60), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pad configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO pad.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO pad configuration write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p81Pe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x60), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific GPIO register value and stores it in the provided
 * variable.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p81Pe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x60), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pad configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO pad.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO pad configuration operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p81Ps_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x60), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific GPIO register value and stores it in the provided
 * variable.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p81Ps_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x60), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO 1.81 Smitt trigger value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the GPIO 1.81 Smitt trigger.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p81SmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x60), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p81SmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x60), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO driver value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the GPIO driver.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO driver value setting operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p82Drv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x61), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific GPIO register value from the device and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the GPIO register
 * value will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p82Drv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x61), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pad configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO pad.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p82Pe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x61), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific GPIO register value and stores it in the provided
 * variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p82Pe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x61), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pad configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO pad.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p82Ps_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x61), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p82Ps_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x61), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO 1.82 Smitt trigger value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the GPIO 1.82 Smitt trigger.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p82SmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x61), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p82SmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x61), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO driver value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the GPIO driver.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p83Drv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x62), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p83Drv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x62), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pad configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO pad.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p83Pe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x62), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific GPIO register value from the device and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p83Pe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x62), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pad configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO pad.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO pad configuration write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p83Ps_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x62), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p83Ps_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x62), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO trigger value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the GPIO trigger.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p83SmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x62), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p83SmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x62), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO driver value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the GPIO driver.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO driver value setting operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p84Drv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x63), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p84Drv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x63), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pad configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO pad.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO pad configuration write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p84Pe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x63), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific GPIO register value and stores it in the provided
 * variable.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p84Pe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x63), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pad configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO pad.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO pad configuration write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p84Ps_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x63), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p84Ps_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x63), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO trigger value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the GPIO trigger.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p84SmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x63), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p84SmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x63), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO driver value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the GPIO driver.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p85Drv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x64), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p85Drv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x64), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pad voltage level for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the voltage level to set
 * for the GPIO pad.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p85Pe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x64), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific GPIO register value and stores it in the provided
 * variable.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p85Pe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x64), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pad voltage level for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired voltage level
 * to set for the GPIO pad.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p85Ps_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x64), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p85Ps_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x64), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO trigger value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the GPIO trigger.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p85SmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x64), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p85SmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x64), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO driver value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the GPIO driver.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p86Drv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x65), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific GPIO register value from the device and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the GPIO register
 * value is to be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p86Drv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x65), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pad configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO pad.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO pad configuration write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p86Pe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x65), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p86Pe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x65), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pad configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO pad.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO pad configuration write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p86Ps_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x65), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p86Ps_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x65), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO trigger value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the GPIO trigger.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO trigger value setting operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p86SmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x65), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p86SmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x65), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO driver value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the GPIO driver.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p87Drv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x66), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p87Drv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x66), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pad configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO pad.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p87Pe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x66), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific GPIO register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p87Pe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x66), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pad configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO pad.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO pad configuration write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p87Ps_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x66), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p87Ps_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x66), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO trigger configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO trigger configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p87SmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x66), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p87SmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x66), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO driver value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the GPIO driver.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO driver value setting operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p88Drv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x67), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p88Drv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x67), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pad configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO pad.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO pad configuration operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p88Pe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x67), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific GPIO register value from the device and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the GPIO register
 * value is to be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p88Pe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x67), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pad configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO pad.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p88Ps_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x67), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p88Ps_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x67), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO 1.88 SMITT trigger value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the GPIO 1.88 SMITT trigger.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p88SmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x67), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p88SmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x67), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO driver value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the GPIO driver.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO driver value setting operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p89Drv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x68), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p89Drv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x68), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pad configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO pad.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO pad configuration write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p89Pe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x68), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific GPIO register value and stores it in the provided
 * variable.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p89Pe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x68), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pad configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO pad.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO pad configuration write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p89Ps_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x68), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p89Ps_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x68), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO trigger value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO trigger.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p89SmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x68), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadGpio1p89SmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x68), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the pad mode driver configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the pad mode driver.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadModeDrv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x6c), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the pad mode driver value from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved pad mode
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadModeDrv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x6c), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the pad mode for the `adrv9001` device by writing a specified
 * value to a specific register.
 *
 * @param device A pointer to the device structure representing the `adrv9001`
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadModeSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x6c), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadModeSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x6c), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reference clock driver value in the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the reference clock driver.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRefClkDrv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x76), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reference clock driver value from a specific register
 * and stores it in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved reference
 * clock driver value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRefClkDrv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x76), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reference clock pad configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the reference clock pad.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRefClkPe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x76), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reference clock pad value from a specific register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRefClkPe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x76), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reference clock pad configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the reference clock pad.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRefClkPs_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x76), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reference clock pad settings from a specific register
 * and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRefClkPs_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x76), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reference clock smitt trigger configuration in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRefClkSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x76), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reference clock smitt trigger value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRefClkSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x76), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Pad Reset N Driver value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadResetNDrv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x6b), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadResetNDrv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x6b), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Pad Reset and Smitt Trigger configuration for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadResetNSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x6b), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadResetNSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x6b), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS driver selection for the RX1 Idata pad in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the driver selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1IdataCmosDrvSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x7f), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS driver selection value from a specific register for
 * the RX1 Idata pad.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved CMOS driver
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1IdataCmosDrvSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x7f), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS PE_N value for the RX1 Idata pad in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS PE_N.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1IdataCmosPeN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x7f), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1IdataCmosPeN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x7f), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS PE P value for the PadRx1 Idata register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1IdataCmosPeP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x7f), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1IdataCmosPeP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x7f), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the RX1 Idata CMOS pad in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RX1 Idata CMOS pad.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1IdataCmosPsN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x7f), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1IdataCmosPsN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x7f), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the RX1 Idata CMOS pad in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RX1 Idata CMOS pad.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1IdataCmosPsP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x7f), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1IdataCmosPsP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x7f), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS Smitt trigger value for the PadRx1 Idata register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS Smitt trigger.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1IdataCmosSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x7f), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1IdataCmosSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x7f), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS driver selection for the PadRx1Q data in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the driver selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1QdataCmosDrvSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x82), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS driver selection value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved CMOS driver
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1QdataCmosDrvSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x82), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad configuration for the RX1 Q data line in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1QdataCmosPeN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x82), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1QdataCmosPeN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x82), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS PE P value for the PadRx1Qdata register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1QdataCmosPeP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x82), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1QdataCmosPeP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x82), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad configuration for the Rx1 Q data of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1QdataCmosPsN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x82), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1QdataCmosPsN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x82), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad configuration for the Rx1 Q data of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1QdataCmosPsP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x82), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1QdataCmosPsP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x82), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS Smitt Trigger value for the PadRx1Qdata register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1QdataCmosSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x82), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1QdataCmosSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x82), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS driver selection for the RX1 clock pad in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the driver selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1ClkCmosDrvSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x79), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS driver selection value for the RX1 clock from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved CMOS driver
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1ClkCmosDrvSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x79), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `PadRx1ClkCmosPeN` register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1ClkCmosPeN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x79), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an `int32_t` status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1ClkCmosPeN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x79), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad configuration for the RX1 clock in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1ClkCmosPeP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x79), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1ClkCmosPeP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x79), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the RX1 clock CMOS pad in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RX1 clock CMOS pad.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1ClkCmosPsN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x79), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1ClkCmosPsN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x79), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the RX1 clock CMOS pad in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RX1 clock CMOS pad.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1ClkCmosPsP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x79), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1ClkCmosPsP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x79), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS trigger for the RX1 clock pad in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1ClkCmosSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x79), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1ClkCmosSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x79), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the driver enable state for the RX1 pad in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the desired enable state
 * for the RX1 pad driver.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1EnableDrv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x73), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1EnableDrv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x73), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PadRx1 Enable PE configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1EnablePe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x73), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1EnablePe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x73), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PadRx1 Enable Power Save configuration for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1EnablePs_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x73), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1EnablePs_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x73), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `SmittTrig` enable state for the `PadRx1` in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1EnableSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x73), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1EnableSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x73), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS driver selection for the RX1 strobe pad in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the driver selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1StrobeCmosDrvSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x7c), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS driver selection value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1StrobeCmosDrvSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x7c), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad strobe value for the RX1 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS pad strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1StrobeCmosPeN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x7c), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1StrobeCmosPeN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x7c), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS PE P value for the RX1 strobe pad in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS PE P.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1StrobeCmosPeP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x7c), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1StrobeCmosPeP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x7c), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad strobe value for the RX1 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the strobe value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1StrobeCmosPsN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x7c), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1StrobeCmosPsN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x7c), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad strobe value for the RX1 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the strobe value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1StrobeCmosPsP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x7c), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1StrobeCmosPsP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x7c), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS smitt trigger value for the RX1 strobe pad in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS smitt trigger.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1StrobeCmosSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x7c), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx1StrobeCmosSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x7c), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS driver selection for the RX2 Idata pad in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the driver selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2IdataCmosDrvSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x8b), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS driver selection value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved CMOS driver
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2IdataCmosDrvSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x8b), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS PE_N configuration for the RX2 Idata pad in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2IdataCmosPeN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x8b), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2IdataCmosPeN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x8b), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS PE P value for the RX2 Idata pad in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS PE P.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2IdataCmosPeP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x8b), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2IdataCmosPeP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x8b), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad configuration for the RX2 Idata in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2IdataCmosPsN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x8b), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2IdataCmosPsN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x8b), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `PadRx2IdataCmosPsP` register for the specified
 * device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2IdataCmosPsP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x8b), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2IdataCmosPsP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x8b), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS trigger value for the RX2 Idata pad in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS trigger.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2IdataCmosSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x8b), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2IdataCmosSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x8b), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS driver selection for the PadRx2Qdata register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the driver selection
 * value to be written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2QdataCmosDrvSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x8e), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS driver selection value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2QdataCmosDrvSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x8e), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad configuration for the RX2 Q data line in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2QdataCmosPeN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x8e), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2QdataCmosPeN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x8e), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS PE P configuration for the PadRx2Qdata register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2QdataCmosPeP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x8e), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2QdataCmosPeP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x8e), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad configuration for the Rx2 Q data of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2QdataCmosPsN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x8e), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2QdataCmosPsN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x8e), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `PadRx2QdataCmosPsP` register for the specified
 * device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2QdataCmosPsP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x8e), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2QdataCmosPsP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x8e), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS Smitt Trigger value for the PadRx2Qdata register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2QdataCmosSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x8e), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2QdataCmosSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x8e), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the driver selection for the RX2 clock CMOS pad in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the driver selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2ClkCmosDrvSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x85), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS driver selection value for the RX2 clock from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved CMOS driver
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2ClkCmosDrvSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x85), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad RX2 clock enable state in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2ClkCmosPeN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x85), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2ClkCmosPeN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x85), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad configuration for the RX2 clock in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2ClkCmosPeP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x85), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2ClkCmosPeP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x85), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the RX2 clock CMOS pad in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RX2 clock CMOS pad.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2ClkCmosPsN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x85), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2ClkCmosPsN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x85), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the RX2 clock CMOS pad in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RX2 clock CMOS pad.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2ClkCmosPsP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x85), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2ClkCmosPsP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x85), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `PadRx2ClkCmosSmittTrig` register value for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2ClkCmosSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x85), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2ClkCmosSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x85), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX2 driver enable state in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the enable state to be set for the
 * RX2 driver.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2EnableDrv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x74), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2EnableDrv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x74), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PadRx2 Enable PE register value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2EnablePe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x74), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2EnablePe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x74), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PadRx2 Enable PS register value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2EnablePs_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x74), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2EnablePs_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x74), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Smitt trigger enable state for the RX2 pad in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * Smitt trigger enable state.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2EnableSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x74), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2EnableSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x74), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS driver selection for the RX2 strobe pad in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the driver selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2StrobeCmosDrvSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x88), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS driver selection value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2StrobeCmosDrvSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x88), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad strobe value for the RX2 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS pad strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2StrobeCmosPeN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x88), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2StrobeCmosPeN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x88), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad strobe value for the RX2 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RX2 strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2StrobeCmosPeP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x88), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2StrobeCmosPeP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x88), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad strobe value for the RX2 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the strobe value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2StrobeCmosPsN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x88), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2StrobeCmosPsN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x88), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad strobe value for the RX2 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RX2 strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2StrobeCmosPsP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x88), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2StrobeCmosPsP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x88), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the strobe configuration for the RX2 pad in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the strobe configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2StrobeCmosSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x88), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadRx2StrobeCmosSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x88), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SPI clock driver value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the SPI clock driver.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiClkDrv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x6e), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SPI clock driver value from a specific register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock driver
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiClkDrv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x6e), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SPI clock pad configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * SPI clock pad.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiClkPe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x6e), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SPI clock pad value from a specific register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved SPI clock
 * pad value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiClkPe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x6e), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SPI clock pad configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the SPI clock pad configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiClkPs_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x6e), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SPI clock pad settings from a specific register and
 * stores the value.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiClkPs_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x6e), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SPI clock smitt trigger value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the SPI clock smitt trigger.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiClkSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x6e), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SPI clock smitt trigger value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiClkSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x6e), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SPI Chip Select Bar (CSB) driver value for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * CSB driver.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiCsbDrv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x6d), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiCsbDrv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x6d), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the CSB pin for SPI communication in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CSB pin.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiCsbPe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x6d), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific value from a hardware register and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiCsbPe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x6d), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SPI Chip Select Bar (CSB) pad configuration for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the CSB pad.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiCsbPs_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x6d), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific value from a hardware register and stores it in
 * the provided variable.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiCsbPs_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x6d), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SPI CSB signal trigger value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the SPI CSB signal trigger.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiCsbSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x6d), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiCsbSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x6d), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SPI driver value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the SPI driver.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiDiDrv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x6f), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiDiDrv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x6f), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SPI Data Input Pad configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the SPI Data Input Pad.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiDiPe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x6f), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific value from a hardware register and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiDiPe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x6f), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SPI data input pad value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the SPI data input pad.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiDiPs_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x6f), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific value from a hardware register and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiDiPs_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x6f), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SPI data transmit trigger configuration for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the SPI data transmit trigger.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiDiSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x6f), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific value from a hardware register and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiDiSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x6f), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the device's register map using SPI.
 *
 * @param device A pointer to the device structure that contains the necessary
 * context for the operation.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiDoDrv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x70), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiDoDrv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x70), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the device's register map using SPI.
 *
 * @param device A pointer to the device structure that contains the necessary
 * context for the operation.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiDoPe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x70), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific value from a hardware register and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiDoPe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x70), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the SPI register map for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiDoPs_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x70), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific value from a hardware register and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiDoPs_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x70), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SPI transmit trigger value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the SPI transmit trigger.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiDoSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x70), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific value from a hardware register and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadSpiDoSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x70), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS driver selection for the Tx1 Idata pad in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the driver selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1IdataCmosDrvSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x9a), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS driver selection value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved CMOS driver
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1IdataCmosDrvSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x9a), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS PE_N value for the Tx1 Idata pad in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS PE_N.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1IdataCmosPeN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x9a), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1IdataCmosPeN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x9a), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS PE P value for the Tx1 Idata pad in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS PE P.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1IdataCmosPeP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x9a), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1IdataCmosPeP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x9a), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad transmit I data for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1IdataCmosPsN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x9a), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1IdataCmosPsN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x9a), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PadTx1 Idata CMOS PSP value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the PadTx1 Idata CMOS PSP.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1IdataCmosPsP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x9a), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1IdataCmosPsP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x9a), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `PadTx1IdataCmosSmittTrig` register value for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1IdataCmosSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x9a), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1IdataCmosSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x9a), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS driver selection for the Tx1 Q data pad in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the driver selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1QdataCmosDrvSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x9e), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS driver selection value from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved CMOS driver
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1QdataCmosDrvSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x9e), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS PE_N value for the Tx1 Q data pad in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS PE_N.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1QdataCmosPeN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x9e), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1QdataCmosPeN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x9e), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS PE P data for the Tx1 Q channel in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1QdataCmosPeP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x9e), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific value from a hardware register and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1QdataCmosPeP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x9e), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad transmit data for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1QdataCmosPsN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x9e), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1QdataCmosPsN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x9e), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad transmit data for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1QdataCmosPsP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x9e), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1QdataCmosPsP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x9e), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS Smitt Trigger value for the Tx1 Q data pad in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS Smitt Trigger.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1QdataCmosSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x9e), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1QdataCmosSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x9e), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS driver selection for the Tx1 clock pad in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired CMOS driver
 * selection value.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1ClkCmosDrvSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x92), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS driver selection value for the Tx1 clock from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved CMOS driver
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1ClkCmosDrvSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x92), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad transmit clock enable value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the CMOS pad transmit clock enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1ClkCmosPeN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x92), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1ClkCmosPeN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x92), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad configuration for the Tx1 clock in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1ClkCmosPeP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x92), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1ClkCmosPeP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x92), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad transmit clock configuration for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1ClkCmosPsN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x92), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1ClkCmosPsN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x92), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PadTx1ClkCmosPsP register value for the specified device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1ClkCmosPsP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x92), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1ClkCmosPsP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x92), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `PadTx1ClkCmosSmittTrig` register value for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1ClkCmosSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x92), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1ClkCmosSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x92), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the driver enable state for the Tx1 pad in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the desired enable state
 * for the Tx1 pad driver.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1EnableDrv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x71), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the Tx1 driver enable register from the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1EnableDrv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x71), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PadTx1 Enable PE register value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the PadTx1 Enable PE register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1EnablePe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x71), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1EnablePe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x71), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PadTx1 enable state in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to set for the
 * PadTx1 enable state.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1EnablePs_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x71), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the PadTx1Enable PS register from the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1EnablePs_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x71), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the transmit pad trigger enable state for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * transmit pad trigger.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1EnableSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x71), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1EnableSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x71), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS driver selection for the Tx1 reference clock in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired CMOS driver
 * selection value.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1RefclkCmosDrvSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa1), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS driver selection value for the Tx1 reference clock
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved CMOS driver
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1RefclkCmosDrvSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa1), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad reference clock enable state for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the desired state to set
 * for the CMOS pad reference clock.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1RefclkCmosPeN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa1), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1RefclkCmosPeN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa1), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS reference clock pad configuration for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the reference clock pad.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1RefclkCmosPeP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa1), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1RefclkCmosPeP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa1), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS reference clock pad configuration for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the reference clock pad.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1RefclkCmosPsN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa1), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1RefclkCmosPsN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa1), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reference clock configuration for the Tx1 pad in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the reference clock configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1RefclkCmosPsP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa1), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1RefclkCmosPsP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa1), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS Smitt trigger for the Tx1 reference clock in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1RefclkCmosSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa1), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1RefclkCmosSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa1), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS driver selection for the Tx1 strobe pad in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the driver selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1StrobeCmosDrvSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x96), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS driver selection value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1StrobeCmosDrvSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x96), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad transmit strobe enable state for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired state to set
 * for the CMOS pad transmit strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1StrobeCmosPeN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x96), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1StrobeCmosPeN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x96), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad transmit strobe value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS pad transmit strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1StrobeCmosPeP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x96), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1StrobeCmosPeP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x96), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad transmit strobe value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the transmit strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1StrobeCmosPsN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x96), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1StrobeCmosPsN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x96), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad Tx1 strobe value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the Tx1 strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1StrobeCmosPsP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x96), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1StrobeCmosPsP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x96), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS smitt trigger value for the Tx1 strobe pad in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS smitt trigger.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1StrobeCmosSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x96), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx1StrobeCmosSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x96), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS driver selection for the Tx2 Idata pad in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the driver selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2IdataCmosDrvSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xad), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS driver selection value from a specific register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved CMOS driver
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2IdataCmosDrvSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xad), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS PE_N value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2IdataCmosPeN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xad), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2IdataCmosPeN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xad), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS PE P value for the Tx2 Idata pad in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS PE P.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2IdataCmosPeP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xad), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific value from a hardware register and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2IdataCmosPeP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xad), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 Idata CMOS PSN value in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2IdataCmosPsN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xad), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2IdataCmosPsN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xad), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad transmit data for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2IdataCmosPsP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xad), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an `int32_t` status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2IdataCmosPsP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xad), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS transmit data trigger value in the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2IdataCmosSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xad), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2IdataCmosSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xad), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS driver selection for the Tx2 Qdata pad in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the driver selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2QdataCmosDrvSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xb1), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS driver selection value from a specific register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved CMOS driver
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2QdataCmosDrvSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xb1), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS PE_N value for the Tx2 Qdata pad in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS PE_N.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2QdataCmosPeN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xb1), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2QdataCmosPeN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xb1), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS PE P data for the Tx2 Q register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2QdataCmosPeP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xb1), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2QdataCmosPeP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xb1), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad Tx2Q data value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the Tx2Q data.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2QdataCmosPsN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xb1), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2QdataCmosPsN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xb1), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad transmit data for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2QdataCmosPsP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xb1), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2QdataCmosPsP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xb1), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS Smitt Trigger value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2QdataCmosSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xb1), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2QdataCmosSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xb1), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS driver selection for the Tx2 clock pad in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired driver
 * selection value.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2ClkCmosDrvSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa5), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS driver selection value for the Tx2 clock from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved CMOS driver
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2ClkCmosDrvSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa5), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad transmit clock enable value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the CMOS pad transmit clock enable.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2ClkCmosPeN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa5), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2ClkCmosPeN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa5), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PadTx2ClkCmosPeP register value for the specified device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2ClkCmosPeP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa5), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2ClkCmosPeP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa5), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PadTx2ClkCmosPsN register value for the specified device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2ClkCmosPsN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa5), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2ClkCmosPsN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa5), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PadTx2ClkCmosPsP register value for the specified device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2ClkCmosPsP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa5), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2ClkCmosPsP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa5), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `PadTx2ClkCmosSmittTrig` register value for the specified
 * device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2ClkCmosSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa5), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware
 * communication.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2ClkCmosSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa5), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the driver enable state for the Tx2 pad in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired enable state
 * for the Tx2 pad driver.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2EnableDrv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x72), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2EnableDrv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x72), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PadTx2 Enable PE register value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2EnablePe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x72), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2EnablePe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x72), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PadTx2 enable state in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2EnablePs_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x72), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2EnablePs_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x72), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the transmit pad 2 enable signal in the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2EnableSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x72), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2EnableSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x72), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS driver selection for the Tx2 reference clock in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired CMOS driver
 * selection value.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2RefclkCmosDrvSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xb4), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS driver selection value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved CMOS driver
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2RefclkCmosDrvSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xb4), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad reference clock enable state for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired state to set
 * for the CMOS pad reference clock.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2RefclkCmosPeN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xb4), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2RefclkCmosPeN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xb4), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS PE P configuration for the Tx2 reference clock in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2RefclkCmosPeP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xb4), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2RefclkCmosPeP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xb4), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS reference clock pad configuration for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2RefclkCmosPsN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xb4), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2RefclkCmosPsN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xb4), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad reference clock value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS pad reference clock.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2RefclkCmosPsP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xb4), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2RefclkCmosPsP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xb4), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS Schmitt trigger configuration for the Tx2 reference
 * clock in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the configuration value
 * to be written.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2RefclkCmosSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xb4), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2RefclkCmosSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xb4), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS driver selection for the Tx2 strobe pad in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired driver
 * selection value.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2StrobeCmosDrvSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa9), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS driver selection value from a specific register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2StrobeCmosDrvSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa9), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad transmit strobe configuration for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2StrobeCmosPeN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa9), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2StrobeCmosPeN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa9), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad strobe value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS pad strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2StrobeCmosPeP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa9), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2StrobeCmosPeP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa9), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad transmit strobe value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the transmit strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2StrobeCmosPsN_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa9), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2StrobeCmosPsN_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa9), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS pad transmit strobe value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS pad transmit strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2StrobeCmosPsP_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa9), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2StrobeCmosPsP_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa9), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS smitt trigger value for the PadTx2 Strobe in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS smitt trigger.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2StrobeCmosSmittTrig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa9), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PadTx2StrobeCmosSmittTrig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa9), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in a
 * provided variable.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PagePointerDeviceIndexValue0_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x7), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PagePointerDeviceIndexValue1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x8), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the active shield state for the baseband reference clock in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PdBbRefclkActiveShield_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1c9), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PdBbRefclkActiveShield_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1c9), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the master bias value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the master bias value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PdMasterbias_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1b4), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the master bias value from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved master
 * bias value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PdMasterbias_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1b4), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR coefficient at address 70 in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the PFIR coefficient
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PfirCoeffAddr70_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x153), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR coefficient from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PfirCoeffAddr70_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x153), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR coefficient address 8 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the PFIR coefficient address.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PfirCoeffAddr8_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x154), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR coefficient from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved coefficient
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PfirCoeffAddr8_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x154), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR coefficient data in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the PFIR coefficient
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PfirCoeffData_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x152), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves PFIR coefficient data from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved coefficient
 * data will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PfirCoeffData_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x152), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR coefficient selection for the RX A channel in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the coefficient selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PfirCoeffRxASel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x151), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR coefficient selection for the RX A channel from a
 * device register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * coefficient value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PfirCoeffRxASel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x151), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR coefficient RX B selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the PFIR coefficient RX B selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PfirCoeffRxBSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x151), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR coefficient RX B selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PfirCoeffRxBSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x151), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR coefficient RX channel selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the PFIR coefficient RX channel selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PfirCoeffRxCSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x151), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR coefficient RX channel selection value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * coefficient value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PfirCoeffRxCSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x151), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR coefficient RX D selection for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the PFIR coefficient RX D selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PfirCoeffRxDSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x151), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR coefficient RXD selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * coefficient value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PfirCoeffRxDSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x151), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR coefficient write enable status in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the PFIR coefficient write enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PfirCoeffWrEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x151), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR coefficient write enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PfirCoeffWrEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x151), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR loopback bank selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the PFIR loopback bank selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PfirLoopbackBankSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x159), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR loopback bank selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PfirLoopbackBankSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x159), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR RX1 bank selection value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the bank selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PfirRx1BankSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x199), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR RX1 bank selection value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved bank
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PfirRx1BankSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x199), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR RX2 bank selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the bank selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PfirRx2BankSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x19a), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR RX2 bank selection value from a device's register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved bank
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PfirRx2BankSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x19a), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR TX A coefficient selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the coefficient selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PfirTxACoeffSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x15a), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR TX A coefficient selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * coefficient selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PfirTxACoeffSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x15a), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR TX B coefficient selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the coefficient selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PfirTxBCoeffSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x15a), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR TX B coefficient selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * coefficient selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PfirTxBCoeffSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x15a), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR TX C coefficient selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the coefficient selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PfirTxCCoeffSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x15a), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR TX coefficient selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * coefficient selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PfirTxCCoeffSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x15a), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR TX DC coefficient selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the PFIR TX DC coefficient selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PfirTxDCoeffSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x15a), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR TX DCoeff selection value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_PfirTxDCoeffSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x15a), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RCAL start value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RCAL start.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RcalStart_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x161), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration start value from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved calibration
 * start value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RcalStart_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x161), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a value in the NVS register map core for the specified device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RdWrb_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xf6), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Reads a specific field from a hardware register and stores the value
 * in the provided pointer.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the read value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RdWrb_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xf6), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a value from a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for the register read
 * operation.
 * @param value A pointer to a uint8_t variable where the read value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ReadbackValSemaphore0_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x12b), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a value from a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the read register value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ReadbackValSemaphore1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x12c), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a value from a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for the register read
 * operation.
 * @param value A pointer to a uint8_t variable where the read value will be
 * stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ReadbackValSemaphore10_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x135), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a value from a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for the register read
 * operation.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ReadbackValSemaphore11_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x136), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a value from a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for the register read
 * operation.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ReadbackValSemaphore12_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x137), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a value from a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for the register read
 * operation.
 * @param value A pointer to a uint8_t variable where the read value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ReadbackValSemaphore13_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x138), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a value from a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for the register read
 * operation.
 * @param value A pointer to a `uint8_t` variable where the read value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ReadbackValSemaphore14_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x139), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a value from a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the read value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ReadbackValSemaphore15_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x13a), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a value from a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for the register read
 * operation.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ReadbackValSemaphore2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x12d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a value from a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ReadbackValSemaphore3_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x12e), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a value from a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for the register read
 * operation.
 * @param value A pointer to a uint8_t variable where the read value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ReadbackValSemaphore4_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x12f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a value from a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the read value will be
 * stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ReadbackValSemaphore5_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x130), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a value from a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for the register read
 * operation.
 * @param value A pointer to a uint8_t variable where the read value will be
 * stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ReadbackValSemaphore6_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x131), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a value from a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the read value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ReadbackValSemaphore7_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x132), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a value from a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for the register read
 * operation.
 * @param value A pointer to a `uint8_t` variable where the read value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ReadbackValSemaphore8_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x133), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief This function reads a value from a specific register and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used for the register read
 * operation.
 * @param value A pointer to a uint8_t variable where the read value will be
 * stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ReadbackValSemaphore9_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x134), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the auxiliary PLL in the reference clock
 * generator.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the power-down state to
 * be set for the auxiliary PLL.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RefClkGenPdAuxPll_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1ca), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the auxiliary PLL power-down status from the reference clock
 * generator register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved PLL power-
 * down status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RefClkGenPdAuxPll_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1ca), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the PLL in the reference clock generator
 * of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the power-down state to
 * be set for the PLL.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RefClkGenPdClkPll_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1ca), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PLL clock generator power-down status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved PLL clock
 * generator status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RefClkGenPdClkPll_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1ca), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the PLL low power clock generator in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the power-down state to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RefClkGenPdClkPllLp_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1ca), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RefClkGenPdClkPllLp_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1ca), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the RF PLL1 in the reference clock
 * generator.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer that indicates the power-down state to
 * be set (0 for active, 1 for power-down).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RefClkGenPdRfpll1_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1ca), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the RF PLL1
 * power-down state.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RefClkGenPdRfpll1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1ca), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the RF PLL2 in the reference clock
 * generator.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that specifies the power-down state to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RefClkGenPdRfpll2_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1ca), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RefClkGenPdRfpll2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1ca), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reference pad bypass bias register value for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the reference pad bypass bias register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RefPadBypBiasR_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1e1), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reference pad bypass bias register value from the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RefPadBypBiasR_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e1), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reference clock cycles for the ADRV9001 device by writing a
 * specified value to a specific register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the reference clock cycles register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ReferenceClockCycles_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x18d), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reference clock cycles from a specific register and
 * stores the value in the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved reference
 * clock cycles will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ReferenceClockCycles_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x18d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the resample clock division ratio for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired clock
 * division ratio.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ResampleClkDivRatio_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1e4), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the resample clock division ratio from a specific register
 * of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * division ratio will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ResampleClkDivRatio_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e4), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the read/write polarity for the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the polarity value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ResetRwPolarity_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1fd), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reset read/write polarity value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved reset
 * read/write polarity value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ResetRwPolarity_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1fd), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `ResetbTflash` field in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the `ResetbTflash` field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ResetbTflash_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1e0), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ResetbTflash_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e0), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reverse read/write polarity for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the polarity value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ReverseRwPolarity_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1fe), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reverse read/write polarity setting from a specific
 * register of the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ReverseRwPolarity_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1fe), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS NIe value for the Rx1 Idata register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1IdataCmosNIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x7d), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS NIe data from the Rx1 Idata register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1IdataCmosNIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x7d), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS NOe value for the Rx1 Idata register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1IdataCmosNOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x7d), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1IdataCmosNOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x7d), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS PIe value for the Rx1 Idata register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1IdataCmosPIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x7d), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS I data from the Rx1 register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1IdataCmosPIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x7d), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS POe value for the Rx1 Idata register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS POe.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1IdataCmosPOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x7d), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS POe value from the Rx1I register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved CMOS POe
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1IdataCmosPOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x7d), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS calibration value for the Rx1 I data in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1IdataLvdsCalib_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x7e), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS calibration data for the Rx1 I data from a
 * specified device.
 *
 * @param device A pointer to the device structure from which the calibration
 * data is to be read.
 * @param value A pointer to a uint8_t variable where the retrieved calibration
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1IdataLvdsCalib_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x7e), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS delay for the Rx1 I data in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the LVDS delay value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1IdataLvdsDelay_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x7e), (value >> 0), 0xe, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS delay value for the Rx1 I data from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved LVDS delay
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1IdataLvdsDelay_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x7e), &register_value, 0xe, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS output enable state for the Rx1 I data in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired LVDS output
 * enable state.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1IdataLvdsOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x7e), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS output enable status for the Rx1 I data from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved LVDS
 * output enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1IdataLvdsOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x7e), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS polarity inversion for the Rx1 I data in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the polarity inversion setting to
 * be applied.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1IdataLvdsPnInv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x7d), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS polarity inversion setting for the Rx1 I data from
 * the device's register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1IdataLvdsPnInv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x7d), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the VCM value for the Rx1 I data register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the VCM value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1IdataVcm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x7d), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the VCM value from the Rx1I register of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved VCM value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1IdataVcm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x7d), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS NIe value for the Rx1 Q data register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1QdataCmosNIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x80), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS NIe data from the Rx1 Q data register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1QdataCmosNIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x80), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS NOe value for the Rx1 Q data register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1QdataCmosNOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x80), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1QdataCmosNOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x80), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS PIe value for the Rx1 Q data in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS PIe.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1QdataCmosPIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x80), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS PIe data from the Rx1 Q data register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1QdataCmosPIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x80), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS power output enable for the Rx1 Q data in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the CMOS power output enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1QdataCmosPOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x80), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS power output value from the Rx1 Qdata register of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved CMOS power
 * output value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1QdataCmosPOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x80), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS calibration value for the Rx1 Q data in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1QdataLvdsCalib_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x81), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS calibration data for the Rx1 Q data from the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved calibration
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1QdataLvdsCalib_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x81), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS delay for the Rx1 Q data in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the LVDS delay value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1QdataLvdsDelay_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x81), (value >> 0), 0xe, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS delay value for the Rx1 Q data from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved LVDS delay
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1QdataLvdsDelay_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x81), &register_value, 0xe, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS output enable for the Rx1 Q data in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * LVDS output enable.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1QdataLvdsOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x81), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS output enable status for the Rx1 Q data from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved LVDS
 * output enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1QdataLvdsOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x81), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS polarity inversion for the Rx1 Q data in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the polarity inversion setting to
 * be applied.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1QdataLvdsPnInv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x80), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS polarity inversion setting for the Rx1 Q data from
 * the device's register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved LVDS
 * polarity inversion value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1QdataLvdsPnInv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x80), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the VCM value for the Rx1 Q data register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the VCM value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1QdataVcm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x80), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the VCM data from the Rx1 Q data register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved VCM data
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1QdataVcm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x80), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC delay selection for the Rx1 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the ADC delay selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1AdcDelaySel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1b6), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC delay selection value from a specific register for
 * the given device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device from which the ADC delay selection value is being read.
 * @param value A pointer to a `uint8_t` variable where the retrieved ADC delay
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1AdcDelaySel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1b6), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS NIe clock configuration for the Rx1 channel in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the CMOS NIe clock configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1ClkCmosNIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x77), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS NIe clock value from the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved clock value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1ClkCmosNIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x77), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS NOe clock configuration for the Rx1 channel of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the CMOS NOe clock configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1ClkCmosNOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x77), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS clock value from the RX1 register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved clock value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1ClkCmosNOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x77), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS PIe clock value for the Rx1 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1ClkCmosPIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x77), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS clock value from the Rx1 register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved clock value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1ClkCmosPIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x77), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS power output enable for the RX1 clock in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the CMOS power output enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1ClkCmosPOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x77), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS power output enable status for the Rx1 clock from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1ClkCmosPOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x77), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS calibration value for the RX1 clock in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1ClkLvdsCalib_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x78), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS calibration value for the RX1 clock from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1ClkLvdsCalib_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x78), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS delay for the RX1 clock in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the LVDS delay value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1ClkLvdsDelay_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x78), (value >> 0), 0xe, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS delay value for the RX1 clock from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved LVDS delay
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1ClkLvdsDelay_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x78), &register_value, 0xe, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS output enable for the RX1 clock in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the desired state of the LVDS
 * output enable (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1ClkLvdsOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x78), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS output enable status for the Rx1 clock from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved LVDS
 * output enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1ClkLvdsOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x78), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS polarity inversion for the RX1 clock in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the desired polarity inversion
 * setting for the RX1 clock.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1ClkLvdsPnInv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x77), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS polarity inversion setting for the RX1 clock from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved LVDS
 * polarity inversion value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1ClkLvdsPnInv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x77), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the VCM value for the RX1 clock in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the VCM value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1ClkVcm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x77), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock voltage control value from a specific register for
 * the Rx1 channel.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * voltage control value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1ClkVcm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x77), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX1 demux enable register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the RX1 demux enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1DemuxEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1b6), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the demux enable status for the Rx1 channel from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved demux
 * enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1DemuxEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1b6), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the LVDS MCS capture value from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1LvdsMcsCaptureReceived_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1ea), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the second capture value from the LVDS MCS register for the
 * RX1 channel.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1LvdsMcsSecondCaptureReceived_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1ea), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx1 Mag Bank selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the bank selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1MagBankSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1e6), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the Rx1MagBank selection register from the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1MagBankSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e6), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX1 MCS delay count in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the MCS delay count to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1McsDelayCnt_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x1ee), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x1ed), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the MCS delay count from the RX1 register map of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved MCS
 * delay count will be stored.
 * @return Returns the status of the last read operation, which indicates
 * success (0) or failure (non-zero). The retrieved MCS delay count is
 * stored in the variable pointed to by `value`.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1McsDelayCnt_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x1ee), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x1ed), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FIFO delay count for the Rx1 MCS in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the FIFO delay count to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1McsReadFifoDelayCnt_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1f3), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the FIFO delay count from the RX1 MCS register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved FIFO delay
 * count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1McsReadFifoDelayCnt_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1f3), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the second capture received clear register for the Rx1 MCS in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1McsSecondCaptureReceivedClear_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1ec), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the second capture received status from a specific register
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1McsSecondCaptureReceivedClear_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1ec), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the number of coefficients for the Rx1 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the number of
 * coefficients to be set for the Rx1 channel.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1NbCoeffSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x160), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the coefficient selection value from a specific register for
 * the Rx1 channel of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved coefficient
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1NbCoeffSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x160), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the off time for the Rx1 RxQEC correlation ready generator in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the off time value to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1RxqecCorrRdyGenOffTime_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x183), (value >> 8), 0x7f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x182), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RX1 RXQEC correlation ready generation off time value
 * from the device's register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the read operations, where a zero indicates
 * success and a non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1RxqecCorrRdyGenOffTime_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x183), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x182), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ready generation on time for the Rx1 RxQEC correction in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1RxqecCorrRdyGenOnTime_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x181), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1RxqecCorrRdyGenOnTime_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x181), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft reset for the Rx1 RxQEC correlation ready generator in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value indicating the reset state to be set (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1RxqecCorrRdyGenSoftReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x17f), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft reset status of the Rx1 RxQEC correlation generator
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1RxqecCorrRdyGenSoftReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17f), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS NIe strobe value for the Rx1 register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS NIe strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1StrobeCmosNIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x7a), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS NIe strobe value from a specific register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved strobe
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1StrobeCmosNIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x7a), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS NOe strobe value for the Rx1 register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS NOe strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1StrobeCmosNOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x7a), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS NOe strobe value from the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved strobe value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1StrobeCmosNOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x7a), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS PIe strobe value for the Rx1 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS PIe strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1StrobeCmosPIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x7a), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS PIe strobe value from a specific register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved strobe
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1StrobeCmosPIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x7a), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS POE strobe value for the Rx1 register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS POE strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1StrobeCmosPOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x7a), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS POE value from the Rx1 strobe register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved CMOS POE
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1StrobeCmosPOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x7a), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS calibration value for the Rx1 strobe in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1StrobeLvdsCalib_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x7b), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration value for the RX1 strobe LVDS from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved calibration
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1StrobeLvdsCalib_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x7b), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS delay for the RX1 strobe in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the delay value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1StrobeLvdsDelay_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x7b), (value >> 0), 0xe, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS delay value for the Rx1 strobe from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved LVDS delay
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1StrobeLvdsDelay_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x7b), &register_value, 0xe, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS output enable for the RX1 strobe in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * LVDS output enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1StrobeLvdsOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x7b), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS output enable status for the Rx1 strobe from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved LVDS
 * output enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1StrobeLvdsOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x7b), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS polarity inversion for the RX1 strobe in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the desired polarity inversion
 * setting.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1StrobeLvdsPnInv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x7a), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS polarity inversion setting for the Rx1 strobe from
 * a device register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved polarity
 * inversion value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1StrobeLvdsPnInv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x7a), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the VCM strobe value for the Rx1 channel in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the VCM strobe value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1StrobeVcm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x7a), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the VCM strobe value from the RX1 register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved VCM strobe
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1StrobeVcm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x7a), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX1 digital processing interface enable state in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the enable state to be set (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1dpIntfEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xc6), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1dpIntfEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xc6), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FIFO data lost clear register for the Rx1 data path interface
 * of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the FIFO data lost clear register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1dpIntfFifoDataLostClear_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xc9), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the FIFO data lost status from the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved FIFO data
 * lost status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1dpIntfFifoDataLostClear_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xc9), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FIFO data lost interrupt enable status for the Rx1 data path
 * interface in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A `uint8_t` value indicating the interrupt enable status to be
 * set.
 * @return Returns an `int32_t` status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1dpIntfFifoDataLostIrqEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xc8), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the FIFO data lost interrupt enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1dpIntfFifoDataLostIrqEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xc8), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the FIFO data lost status from the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved FIFO data
 * lost status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1dpIntfFifoDataLostStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xca), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the read start threshold for the Rx1 digital processing interface
 * FIFO in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the threshold value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1dpIntfFifoRdStartThreshold_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xc7), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the read start threshold value from the RX1DP interface FIFO
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved threshold
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1dpIntfFifoRdStartThreshold_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xc7), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Clears the read error status of the Rx1 data path interface FIFO in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that indicates the value to be written
 * to the FIFO read error clear register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1dpIntfFifoReadErrorClear_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xc9), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief This function reads a specific register value from a device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the read register value
 * will be stored.
 * @return The function returns the status of the read operation, indicating
 * success or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1dpIntfFifoReadErrorClear_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xc9), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FIFO read error interrupt enable status for the Rx1 data path
 * interface in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the interrupt enable
 * status to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1dpIntfFifoReadErrorIrqEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xc8), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the FIFO read error interrupt enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved status will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1dpIntfFifoReadErrorIrqEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xc8), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the FIFO read error status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the read error status will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1dpIntfFifoReadErrorStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xca), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a 16-bit value from two consecutive registers of a device.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the register read operations, where a non-zero
 * value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1dpIntfIdata_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xcd), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xce), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the edge-triggered interrupt configuration for the Rx1 data path
 * interface of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the interrupt configuration register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1dpIntfIrqEdgeTriggered_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xc6), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the edge-triggered interrupt value from a specific register
 * for the Rx1 data path interface.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved interrupt
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1dpIntfIrqEdgeTriggered_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xc6), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the Q data from the Rx1 digital processing interface of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved Q
 * data will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1dpIntfQdata_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xcb), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xcc), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Clears the read request for the Rx1 data path interface by writing a
 * specified value to a hardware register.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1dpIntfReadRequestClear_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xc9), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief The `adrv9001_NvsRegmapCore_Rx1dpIntfReadRequestClear_Get` function
 * reads a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a `uint8_t` variable where the read register value
 * will be stored.
 * @return The function returns the status of the read operation, which
 * indicates success or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1dpIntfReadRequestClear_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xc9), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the auto-clear configuration for the Rx1 data path interface read
 * request interrupt.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1dpIntfReadRequestIrqAutoclear_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xc6), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief This function reads a specific field from a hardware register and
 * stores the result in a provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the read value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1dpIntfReadRequestIrqAutoclear_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xc6), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the read request interrupt enable for the Rx1 data path interface
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer that specifies the value to set for the
 * read request interrupt enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1dpIntfReadRequestIrqEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xc8), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the read request interrupt enable status from a specific
 * register of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1dpIntfReadRequestIrqEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xc8), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the read request status from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the read request status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx1dpIntfReadRequestStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xca), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS NIe value for the Rx2 Idata register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2IdataCmosNIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x89), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value from a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2IdataCmosNIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x89), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx2 Idata CMOS NOe value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2IdataCmosNOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x89), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS data from the Rx2 Idata register and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2IdataCmosNOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x89), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS PIe value for the Rx2 Idata register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2IdataCmosPIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x89), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS I data from the Rx2 register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2IdataCmosPIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x89), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS power output enable for the Rx2 Idata in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the CMOS power output enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2IdataCmosPOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x89), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS POE value from the Rx2 Idata register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved CMOS POE
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2IdataCmosPOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x89), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX2 Idata LVDS calibration value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2IdataLvdsCalib_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x8a), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS calibration data for the Rx2 I data channel from
 * the device's register.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved calibration
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2IdataLvdsCalib_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x8a), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS delay for the Rx2 I data in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the LVDS delay value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2IdataLvdsDelay_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x8a), (value >> 0), 0xe, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS delay value for the Rx2 I data from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved LVDS delay
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2IdataLvdsDelay_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x8a), &register_value, 0xe, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS output enable for the Rx2 I data in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to set for the
 * LVDS output enable.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2IdataLvdsOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x8a), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS output enable status for the Rx2 I data from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved LVDS output
 * enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2IdataLvdsOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x8a), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS polarity inversion for the Rx2 I data in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the polarity inversion setting to
 * be applied.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2IdataLvdsPnInv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x89), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS polarity inversion setting for the Rx2 I data from
 * the device's register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved polarity
 * inversion value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2IdataLvdsPnInv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x89), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the VCM value for the Rx2 I data in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the VCM value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2IdataVcm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x89), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Idata Vcm value from the Rx2 register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved Idata Vcm
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2IdataVcm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x89), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS NIe value for the Rx2 Q data register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2QdataCmosNIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x8c), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Q data from the CMOS NIe register for the Rx2 channel.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved Q data will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2QdataCmosNIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x8c), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS NOE value for the Rx2 Q data register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the CMOS NOE field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2QdataCmosNOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x8c), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Q data from the CMOS register for the Rx2 channel of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved Q data will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2QdataCmosNOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x8c), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS PIe value for the Rx2 Q data register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2QdataCmosPIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x8c), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS PIe Q data from the specified device register.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2QdataCmosPIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x8c), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS POE value for the Rx2 Q data register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the CMOS POE register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2QdataCmosPOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x8c), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS POE data from the Rx2 Q data register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2QdataCmosPOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x8c), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS calibration value for the Rx2 Q data in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2QdataLvdsCalib_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x8d), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS calibration data for the Rx2 Q data channel from a
 * specified device.
 *
 * @param device A pointer to the device structure from which the calibration
 * data is to be read.
 * @param value A pointer to a uint8_t variable where the retrieved calibration
 * data will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2QdataLvdsCalib_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x8d), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS delay for the Rx2 Q data in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the LVDS delay value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2QdataLvdsDelay_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x8d), (value >> 0), 0xe, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS delay value for the Rx2 Q data from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved LVDS delay
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2QdataLvdsDelay_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x8d), &register_value, 0xe, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS output enable for the Rx2 Q data in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * LVDS output enable.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2QdataLvdsOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x8d), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS output enable status for the Rx2 Q data from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved LVDS output
 * enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2QdataLvdsOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x8d), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS polarity inversion for the Rx2 Q data in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the polarity inversion setting to
 * be applied.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2QdataLvdsPnInv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x8c), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS polarity inversion setting for the Rx2 Q data from
 * a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2QdataLvdsPnInv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x8c), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the VCM value for the Rx2 Q data register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the VCM value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2QdataVcm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x8c), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Q data VCM value from a specific register of the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved Q data VCM
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2QdataVcm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x8c), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC delay selection for the Rx2 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the ADC delay selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2AdcDelaySel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1b7), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC delay selection value from a specific register for
 * the given device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device from which the ADC delay selection value is being read.
 * @param value A pointer to a `uint8_t` variable where the retrieved ADC delay
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2AdcDelaySel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1b7), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS NIe clock configuration for the Rx2 channel in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the clock configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2ClkCmosNIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x83), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS NIe clock value from the Rx2 register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved clock value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2ClkCmosNIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x83), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS NOE clock configuration for the RX2 channel of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the CMOS NOE clock configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2ClkCmosNOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x83), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2ClkCmosNOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x83), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS PIe clock value for the Rx2 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2ClkCmosPIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x83), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS clock value from the Rx2 register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved clock value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2ClkCmosPIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x83), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS power-over-ethernet (PoE) configuration for the Rx2
 * clock in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2ClkCmosPOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x83), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS power output enable value for the Rx2 clock from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2ClkCmosPOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x83), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS clock calibration value for the RX2 channel in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the calibration value setting operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2ClkLvdsCalib_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x84), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS calibration value for the RX2 clock from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2ClkLvdsCalib_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x84), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS delay for the RX2 clock in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the delay value to be set
 * for the RX2 clock.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2ClkLvdsDelay_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x84), (value >> 0), 0xe, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS delay value for the Rx2 clock from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved LVDS delay
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2ClkLvdsDelay_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x84), &register_value, 0xe, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS output enable for the RX2 clock in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that specifies the enable state for the LVDS
 * output (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2ClkLvdsOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x84), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS output enable status for the RX2 clock from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved LVDS output
 * enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2ClkLvdsOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x84), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS polarity inversion for the RX2 clock in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the desired polarity inversion
 * setting for the RX2 clock.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2ClkLvdsPnInv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x83), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS polarity inversion setting for the RX2 clock from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved LVDS
 * polarity inversion value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2ClkLvdsPnInv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x83), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the VCM value for the RX2 clock in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the VCM value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2ClkVcm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x83), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock voltage control value for the Rx2 channel from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * voltage control value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2ClkVcm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x83), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX2 demux enable register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that specifies the enable/disable state for the
 * RX2 demux.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2DemuxEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1b7), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RX2 demux enable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved demux
 * enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2DemuxEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1b7), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the received LVDS MCS capture value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2LvdsMcsCaptureReceived_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1ea), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the second capture value from the LVDS MCS register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2LvdsMcsSecondCaptureReceived_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1ea), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx2 magnitude bank selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the bank selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2MagBankSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1e6), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the Rx2
 * magnitude bank selection from the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2MagBankSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e6), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX2 MCS delay count in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the MCS delay count to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2McsDelayCnt_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x1f0), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x1ef), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the MCS delay count from the RX2 register map of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved MCS
 * delay count will be stored.
 * @return Returns the status of the last read operation, which indicates
 * success (0) or failure (non-zero). The retrieved MCS delay count is
 * stored in the variable pointed to by `value`.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2McsDelayCnt_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x1f0), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x1ef), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FIFO delay count for the Rx2 MCS in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the FIFO delay count to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2McsReadFifoDelayCnt_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1f8), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the FIFO delay count from the RX2 MCS register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved FIFO delay
 * count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2McsReadFifoDelayCnt_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1f8), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the second capture received clear register for the Rx2 MCS in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2McsSecondCaptureReceivedClear_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1ec), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the second capture received value from a specific register
 * in the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2McsSecondCaptureReceivedClear_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1ec), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the number of coefficients for the Rx2 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the number of
 * coefficients to set for the Rx2 channel.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2NbCoeffSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x160), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2NbCoeffSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x160), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX2 RXQEC correlation ready generation off time in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the off time value to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2RxqecCorrRdyGenOffTime_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x186), (value >> 8), 0x7f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x185), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RX2 RXQEC correlation ready generation off time value
 * from the device's register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the read operations, indicating success (0) or
 * failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2RxqecCorrRdyGenOffTime_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x186), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x185), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ready generation on time for the Rx2 RxQEC correction in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2RxqecCorrRdyGenOnTime_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x184), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2RxqecCorrRdyGenOnTime_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x184), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft reset for the Rx2 RxQEC correlation ready generator in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2RxqecCorrRdyGenSoftReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x17f), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft reset status of the Rx2 RxQEC correlation generator
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2RxqecCorrRdyGenSoftReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17f), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS NIe strobe value for the Rx2 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS NIe strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2StrobeCmosNIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x86), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2StrobeCmosNIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x86), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS NOe strobe value for the Rx2 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS NOe strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2StrobeCmosNOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x86), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS NOe strobe value from the Rx2 register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved strobe value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2StrobeCmosNOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x86), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS PIe strobe value for the Rx2 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS PIe strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2StrobeCmosPIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x86), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2StrobeCmosPIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x86), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS POE strobe value for the Rx2 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS POE strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2StrobeCmosPOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x86), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS POE strobe value from the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved strobe value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2StrobeCmosPOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x86), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS calibration value for the RX2 strobe in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2StrobeLvdsCalib_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x87), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS calibration value for the Rx2 Strobe from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2StrobeLvdsCalib_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x87), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS delay for the RX2 strobe in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the delay value to be set
 * for the RX2 strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2StrobeLvdsDelay_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x87), (value >> 0), 0xe, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS delay value for the Rx2 strobe from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved LVDS delay
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2StrobeLvdsDelay_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x87), &register_value, 0xe, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS output enable for the RX2 strobe in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the desired state to set for the
 * LVDS output enable.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2StrobeLvdsOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x87), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS output enable status for the Rx2 strobe from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved LVDS
 * output enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2StrobeLvdsOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x87), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS polarity inversion for the RX2 strobe in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired polarity
 * inversion value.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2StrobeLvdsPnInv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x86), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS polarity inversion setting for the Rx2 strobe from
 * a device register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2StrobeLvdsPnInv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x86), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the VCM strobe value for the RX2 channel in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the VCM strobe value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2StrobeVcm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x86), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the VCM strobe value from the RX2 register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved VCM strobe
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2StrobeVcm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x86), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the register map for the RX2 or RX without
 * powering down the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2orxWithoutPowerDown_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x168), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device without powering
 * down the RX2 or RX path.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rx2orxWithoutPowerDown_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x168), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bypass configuration for the FIR filter in the RX algorithm
 * multiplexer of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxAlgMux301FirAByp_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x14f), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxAlgMux301FirAByp_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x14f), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the channel selection for the Rx Algorithm Mux 302 in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the channel selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxAlgMux302Ch1Sel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x14f), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxAlgMux302Ch1Sel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x14f), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the channel selection for the Rx Algorithm Mux 303 in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the channel selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxAlgMux303Ch1Sel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x14f), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxAlgMux303Ch1Sel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x14f), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the decimation value for the Rx Bank AP FIR filter in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the decimation value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankAPfirDecimation_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x155), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the decimation value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved decimation
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankAPfirDecimation_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x155), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain for the Rx Bank AP FIR filter in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the gain value to be set
 * for the Rx Bank AP FIR filter.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankAPfirGain_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x155), (value >> 0), 0x1c, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AP FIR gain value from a specific register and stores it
 * in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved gain value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankAPfirGain_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x155), &register_value, 0x1c, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AP FIR taps for the RX bank in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the AP FIR taps.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankAPfirTaps_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x155), (value >> 0), 0x60, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AP FIR taps value from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved FIR taps
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankAPfirTaps_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x155), &register_value, 0x60, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the asymmetric value for the RX bank in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RX bank.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankASymmetric_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x155), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankASymmetric_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x155), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the decimation value for the Rx Bank BP FIR filter in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the decimation value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankBPfirDecimation_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x156), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the decimation value from a specific register for the RX
 * bank of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved decimation
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankBPfirDecimation_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x156), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BP FIR gain for the RX bank in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the gain value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankBPfirGain_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x156), (value >> 0), 0x1c, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BP FIR gain value from the RX bank of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved BP FIR gain
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankBPfirGain_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x156), &register_value, 0x1c, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BP FIR taps for the RX bank in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the BP FIR taps.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankBPfirTaps_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x156), (value >> 0), 0x60, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BP FIR taps value from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved BP FIR taps
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankBPfirTaps_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x156), &register_value, 0x60, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the symmetric value for the Rx Bank B register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankBSymmetric_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x156), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankBSymmetric_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x156), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the decimation value for the RX bank CP FIR filter in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the decimation value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankCPfirDecimation_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x157), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the decimation value from a specific register for the RX
 * bank of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved decimation
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankCPfirDecimation_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x157), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CP FIR gain for the RX bank in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the gain value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankCPfirGain_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x157), (value >> 0), 0x1c, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CP FIR gain value from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved gain value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankCPfirGain_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x157), &register_value, 0x1c, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CP FIR taps for the RX bank in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the CP FIR taps.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankCPfirTaps_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x157), (value >> 0), 0x60, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CP FIR taps value from a specific register for the given
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved FIR taps
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankCPfirTaps_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x157), &register_value, 0x60, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the symmetric configuration for the Rx Bank C in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankCSymmetric_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x157), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankCSymmetric_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x157), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the decimation value for the digital filter in the RX bank of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the decimation value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankDPfirDecimation_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x158), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the decimation value from a specific register for the RX
 * bank of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved decimation
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankDPfirDecimation_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x158), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the digital filter gain for the receive bank of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the gain value to be set
 * for the digital filter.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankDPfirGain_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x158), (value >> 0), 0x1c, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DP FIR gain value from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved gain value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankDPfirGain_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x158), &register_value, 0x1c, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DP FIR taps for the RX bank in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the DP FIR taps.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankDPfirTaps_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x158), (value >> 0), 0x60, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DP FIR tap values from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved FIR tap
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankDPfirTaps_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x158), &register_value, 0x60, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the symmetric value for the receive bank in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the receive bank.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankDSymmetric_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x158), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxBankDSymmetric_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x158), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the data mask for the receive channel 1 of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * as the data mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxChannel1IDataMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x16a), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the data mask value for the Rx Channel 1 of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved data mask
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxChannel1IDataMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x16a), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Q data mask for the Rx channel 1 of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * Q data mask.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxChannel1QDataMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x16a), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Q data mask value from the RX channel 1 register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved Q data mask
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxChannel1QDataMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x16a), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the data mask for the Rx Channel 2 of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * as the data mask.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxChannel2IDataMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x16b), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the data mask value for the Rx Channel 2 of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved data mask
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxChannel2IDataMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x16b), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Q data mask for the Rx channel 2 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * Q data mask.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxChannel2QDataMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x16b), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Q data mask value from a specific register for the RX
 * channel of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved Q data mask
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxChannel2QDataMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x16b), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Updates the RxDpGain compensation register for both channels in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the gain compensation
 * value to be written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register update operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxDpGainComp9UpdateBoth_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x19b), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value and updates the provided value
 * pointer with the result.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxDpGainComp9UpdateBoth_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x19b), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX enable state in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the RX enable state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x162), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RX enable status from a specific register of the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved RX enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x162), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX enable state in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to set for the
 * RX enable state.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxEnableByArm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x16f), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RX enable status from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved RX enable
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxEnableByArm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x16f), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the least significant bits of the high-performance ADC samples in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the ADC samples.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxHpAdcSamplesLsbAligned_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x194), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the least significant byte of ADC samples from a specific
 * register and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved ADC sample
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxHpAdcSamplesLsbAligned_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x194), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RxMagA coefficient selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the coefficient selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxMagACoeffSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1e6), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RxMagA coefficient selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * coefficient selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxMagACoeffSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e6), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RxMagB coefficient selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the coefficient selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxMagBCoeffSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1e6), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RxMagB coefficient selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved coefficient
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxMagBCoeffSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e6), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX magnitude compensation coefficient selection in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the coefficient selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxMagCCoeffSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1e6), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RxMagC coefficient selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved coefficient
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxMagCCoeffSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e6), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX magnitude DC coefficient selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RX magnitude DC coefficient selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxMagDCoeffSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1e6), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the magnitude DC coefficient selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxMagDCoeffSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e6), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the input mask for the RXADC1 of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the input mask value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rxadc1InputMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x16a), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the input mask value for the RXADC1 from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved input mask
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rxadc1InputMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x16a), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the input mask for the RXADC2 register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RXADC2 input mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rxadc2InputMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x16b), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the input mask value for the RXADC2 from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved input mask
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Rxadc2InputMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x16b), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX QEC algorithm value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the RX QEC algorithm register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecAlgr_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x17c), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecAlgr_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17c), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX QEC calibration enable value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the calibration enable
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecCalen_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x17c), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecCalen_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17c), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RxQEC CID value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the RxQEC CID register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecCid_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x17b), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecCid_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17b), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RXQEC clear register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the RXQEC clear register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecClear_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x17c), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecClear_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17c), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the common clock enable for the RXQEC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the clock enable state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecCommonClkEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x18a), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the common clock enable status from a specific register for
 * the RXQEC module.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecCommonClkEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x18a), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the halt state of the RXQEC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RXQEC halt register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecHalt_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x17b), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RXQEC halt status from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecHalt_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17b), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RXQEC IADDR field in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RXQEC IADDR field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecIaddr_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x17a), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecIaddr_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17a), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the RXQEC IADDR0 register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RXQEC IADDR0 register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecIaddr0_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x179), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecIaddr0_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x179), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `Iready` selection for the `RxqecObs` register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A `uint8_t` value that specifies the selection for the `Iready`
 * field.
 * @return Returns an `int32_t` indicating the success or failure of the write
 * operation, where a value of 0 typically indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecObsIreadySel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x18b), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecObsIreadySel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x18b), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the readiness generation enable for the RXQEC observation in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecObsRdyGenEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x18b), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecObsRdyGenEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x18b), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RXQEC observation ready generation off time in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the off time value to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecObsRdyGenOffTime_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x189), (value >> 8), 0x7f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x188), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the observation ready generation off time value from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecObsRdyGenOffTime_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x189), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x188), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `RxqecObsRdyGenOnTime` register value for the specified
 * device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecObsRdyGenOnTime_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x187), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecObsRdyGenOnTime_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x187), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft reset for the RxQEC observation ready generator in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecObsRdyGenSoftReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x17f), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft reset status from a specific register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved soft reset
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecObsRdyGenSoftReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17f), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX QEC OCLK rate in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the OCLK rate to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecOclkRate_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x150), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RXQEC OCLK rate from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved OCLK rate
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecOclkRate_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x150), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecRdata0_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x171), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecRdata1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x172), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecRdata2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x173), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecRdata3_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x174), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX QEC register value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RX QEC register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecRead_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x17a), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Reads a specific field from a device register and stores the value in
 * the provided pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the read value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecRead_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17a), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX QEC reset value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RX QEC reset register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x17a), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the QEC reset status from a specific register of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17a), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX QEC report value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RX QEC report register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecRpt_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x17c), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecRpt_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17c), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX QEC source configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RX QEC source register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecSource_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x17c), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the QEC source value from a specific register of the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved QEC source
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecSource_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17c), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the register map for the RXQEC spare
 * configuration of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecSpare_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x17b), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecSpare_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17b), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software reset for the RXQEC module in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the reset value to be
 * written.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecSwReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x18c), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RXQEC software reset status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecSwReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x18c), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `RxqecWdata0` register value for the specified device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecWdata0_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x175), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecWdata0_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x175), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `RxqecWdata1` register value for the specified device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecWdata1_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x176), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in a
 * provided variable.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecWdata1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x176), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `RxqecWdata2` register value for the specified device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecWdata2_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x177), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in a
 * provided variable.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecWdata2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x177), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `RxqecWdata3` register value for the specified device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecWdata3_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x178), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecWdata3_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x178), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RXQEC wind-down value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the wind-down value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecWinden_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x17b), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecWinden_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17b), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RXQEC register value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RXQEC register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecWrite_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x17a), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_RxqecWrite_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17a), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the upper byte of a read-only word from the scratchpad
 * register of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the upper byte of the
 * read-only word will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ScratchPadReadOnlyWordUpperAddress_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x1fc), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a scratch pad word in the ADRV9001 device's non-volatile register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the scratch pad.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ScratchPadWord_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x9), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a scratchpad word from a specific register in the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved scratchpad
 * word will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ScratchPadWord_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x9), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the upper address of the scratchpad word in the ADRV9001 NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the upper address of the scratchpad word.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ScratchPadWordUpperAddress_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x1fb), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the upper byte of a scratchpad word from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved upper byte
 * will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_ScratchPadWordUpperAddress_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x1fb), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SDO active state in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SdoActive3_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x0), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SdoActive3_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x0), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SDO active state for the ADRV9001 device by writing a
 * specified value to a register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SdoActive4_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x0), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific value from a hardware register and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SdoActive4_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x0), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PLL LP clock selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SelClkPllLp_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x197), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PLL LP clock selection value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SelClkPllLp_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x197), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the device's register map and
 * returns the status of the operation.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore0Lock_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x11b), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore0Lock_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x11b), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a value in the semaphore register of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the semaphore register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore0Proc_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x11b), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore0Proc_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x11b), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a value in a specific field of a device's register map using a
 * semaphore.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore10Lock_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x125), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore10Lock_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x125), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the device's register map using a provided
 * value.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the result of the register
 * write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore10Proc_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x125), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore10Proc_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x125), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a value in a specific field of a device's register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore11Lock_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x126), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore11Lock_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x126), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the device's register map using a provided
 * value.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the result of the write
 * operation, where a value of 0 typically indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore11Proc_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x126), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore11Proc_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x126), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a value in a specific field of a device's register map and
 * returns the status of the operation.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore12Lock_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x127), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore12Lock_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x127), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the device's register map using a provided
 * value.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the result of the register
 * write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore12Proc_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x127), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a value from a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore12Proc_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x127), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in a hardware register by writing a value to it.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore13Lock_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x128), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore13Lock_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x128), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the device's register map using a provided
 * value.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore13Proc_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x128), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific value from a hardware register and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore13Proc_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x128), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the device's register map by writing a value
 * to it.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore14Lock_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x129), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore14Lock_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x129), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a value in the Semaphore 14 register of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the Semaphore 14 register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore14Proc_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x129), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore14Proc_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x129), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the device's register map by writing a value
 * to it.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore15Lock_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x12a), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific value from a hardware register and stores it in
 * the provided variable.
 *
 * @param device A pointer to the device structure used to access hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore15Lock_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x12a), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the device's register map using a provided
 * value.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore15Proc_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x12a), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore15Proc_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x12a), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a value in a specific field of a device's register map using a
 * semaphore.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore1Lock_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x11c), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore1Lock_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x11c), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the device's register map using a provided
 * value.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore1Proc_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x11c), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore1Proc_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x11c), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a lock value in the ADRV9001 device's register map using a
 * semaphore.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the lock value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore2Lock_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x11d), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore2Lock_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x11d), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a value in the semaphore register of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the semaphore register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore2Proc_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x11d), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore2Proc_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x11d), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the device's register map by writing a value
 * to it.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore3Lock_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x11e), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific value from a hardware register and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore3Lock_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x11e), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the device's register map using a provided
 * value.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore3Proc_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x11e), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore3Proc_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x11e), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a semaphore lock value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * semaphore lock.
 * @return Returns an integer status code indicating the success or failure of
 * the semaphore lock set operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore4Lock_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x11f), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific value from a hardware register and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore4Lock_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x11f), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a value in a specific field of a device's register using a
 * hardware abstraction layer.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore4Proc_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x11f), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a value from a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore4Proc_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x11f), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the device's register map for
 * Semaphore 5.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore5Lock_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x120), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore5Lock_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x120), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the device's register map using a provided
 * value.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore5Proc_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x120), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific value from a hardware register and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore5Proc_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x120), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a value in a specific field of a device's register using a
 * semaphore.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore6Lock_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x121), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific value from a hardware register and stores it in
 * the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore6Lock_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x121), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a value in the semaphore register of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the semaphore register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore6Proc_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x121), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore6Proc_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x121), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the device's register map for
 * Semaphore 7.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore7Lock_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x122), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore7Lock_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x122), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a value in the Semaphore 7 register of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the Semaphore 7 register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore7Proc_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x122), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a value from a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore7Proc_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x122), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a semaphore lock value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * semaphore lock.
 * @return Returns an integer status code indicating the success or failure of
 * the semaphore lock set operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore8Lock_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x123), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific 8-bit value from a hardware register and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore8Lock_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x123), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a value in a specific field of a device's register map using a
 * semaphore.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore8Proc_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x123), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a value from a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore8Proc_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x123), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a value in a specific field of a device's register using a
 * semaphore.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore9Lock_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x124), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore9Lock_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x124), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a value in the semaphore register of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the semaphore register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore9Proc_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x124), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Semaphore9Proc_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x124), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a single instruction value in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SingleInstruction_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a single instruction value from a specified device register.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SingleInstruction_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a value from a specific register of the device using a slow
 * interface.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SlowInterfaceCtl_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the snooper enable register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the snooper enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SnooperEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xd2), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the snooper enable status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved snooper
 * enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SnooperEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xd2), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft reset value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * for the soft reset.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SoftReset0_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x0), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft reset status from the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved soft reset
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SoftReset0_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x0), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a soft reset value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * for the soft reset.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SoftReset0011_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft reset status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved soft reset
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SoftReset0011_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a soft reset value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SoftReset0012_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft reset status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure that contains the necessary
 * context for the operation.
 * @param value A pointer to a `uint8_t` variable where the retrieved soft reset
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SoftReset0012_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a soft reset value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * for the soft reset.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SoftReset7_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x0), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SoftReset7_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x0), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Stat0_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17d), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Stat1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17d), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Stat10_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17e), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Stat11_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17e), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Stat12_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17e), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Stat13_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17e), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Stat14_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17e), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Stat15_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17e), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Stat2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17d), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Stat3_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17d), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Stat4_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17d), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Stat5_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17d), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Stat6_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17d), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Stat7_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17d), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific status value from a device register and stores it
 * in the provided pointer.
 *
 * @param device A pointer to the device structure from which the status is to
 * be read.
 * @param value A pointer to a `uint8_t` variable where the retrieved status
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Stat8_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17e), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Stat9_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x17e), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the stream base value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the stream base value to
 * be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamBase_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x118), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x117), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 16-bit value from two consecutive registers of a device.
 *
 * @param device A pointer to the device structure from which the registers are
 * read.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, which
 * indicates success (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamBase_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x118), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x117), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a stream error value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the stream error value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamError_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x148), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the stream error status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved stream error
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamError_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x148), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the device's register map with a given value.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamProcAddr_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x13b), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamProcAddr_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x13b), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves and processes data from two specific registers of a device,
 * storing the result in a provided variable.
 *
 * @param device A pointer to the device structure from which register values
 * are to be read.
 * @param value A pointer to a 16-bit unsigned integer where the combined
 * register values will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the register read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamProcData_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x13d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x13c), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO0 pin selection in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO0 pin selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamProcGpio0PinSelect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x146), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO0 pin selection value from a specific register in
 * the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO0 pin
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamProcGpio0PinSelect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x146), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO1 pin selection for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * GPIO1 pin selection.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO1 pin selection operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamProcGpio1PinSelect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x146), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO1 pin selection value from a specific register in
 * the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved GPIO1 pin
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamProcGpio1PinSelect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x146), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO2 pin selection in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO2 pin selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamProcGpio2PinSelect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x147), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO pin selection value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO pin
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamProcGpio2PinSelect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x147), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO3 pin selection in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO3 pin selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamProcGpio3PinSelect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x147), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an `int32_t` status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamProcGpio3PinSelect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x147), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pin mask in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO pin mask.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO pin mask setting operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamProcGpioPinMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x116), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO pin mask value from a specific register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a `uint8_t` variable where the retrieved GPIO pin
 * mask will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamProcGpioPinMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x116), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the read enable value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamProcRden_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x13b), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamProcRden_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x13b), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the stream reset value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * stream reset.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x116), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the stream reset status from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x116), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the device's register map for stream
 * processing channel 2.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocCh2u_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x164), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocCh2u_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x164), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets debug data in the stream processor by writing to specific
 * registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 64-bit unsigned integer containing the debug data to be
 * written to the registers.
 * @return Returns the status of the last write operation, where a non-zero
 * value indicates an error occurred during the register writes.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocDebugData_Set(void *device,
    uint64_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x145), (value >> 56));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x144), (value >> 48));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x143), (value >> 40));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x142), (value >> 32));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x141), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x140), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x13f), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x13e), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 64-bit debug data value from a series of hardware
 * registers.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 64-bit integer where the retrieved debug data
 * will be stored.
 * @return Returns the status of the last register read operation, with a value
 * of 0 indicating success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocDebugData_Get(void *device,
    uint64_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x145), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x144), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x143), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x142), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x141), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x140), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x13f), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x13e), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LPBK1 enable state in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the LPBK1 enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocLpbk1Enable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x163), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the Stream
 * Processor Loopback 1 enable status.
 *
 * @param device A pointer to the device structure used for accessing hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocLpbk1Enable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x163), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the configuration for the Stream Processor Loopback 1 Enable
 * Control Register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocLpbk1EnableCg_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x163), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocLpbk1EnableCg_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x163), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LPBK2 enable state in the ADRV9001 device's stream processing
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to set for the
 * LPBK2 enable state.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocLpbk2Enable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x164), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the Stream
 * Processor's LPBK2 enable state.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocLpbk2Enable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x164), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the configuration for the Loopback 2 Enable Control Group in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the control register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocLpbk2EnableCg_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x164), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocLpbk2EnableCg_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x164), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable state for the ORX1 stream processor in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the enable state to be set for the
 * ORX1 stream processor.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocOrx1Enable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x163), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocOrx1Enable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x163), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable state for the ORX2 stream processing in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the enable state to be set for ORX2
 * stream processing.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocOrx2Enable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x164), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocOrx2Enable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x164), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX1 stream processing enable state in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value indicating the enable state for RX1 stream
 * processing (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocRx1Enable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x163), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RX1 enable field from a specific register
 * in the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocRx1Enable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x163), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX2 enable state in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the enable state to be set for RX2.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocRx2Enable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x164), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the Stream
 * Processor RX2 enable status.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocRx2Enable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x164), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR mode enable value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the PFIR mode enable
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocRxPfirModeEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x167), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR mode enable status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved PFIR mode
 * enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocRxPfirModeEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x167), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the device's register map for
 * enabling or disabling the RX or X1 stream processing.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocRxorx1EnableCg_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x163), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocRxorx1EnableCg_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x163), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the configuration for the RX or RX2 enable clock gate in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocRxorx2EnableCg_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x164), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocRxorx2EnableCg_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x164), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable state for the Stream Processor TX1 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the enable state to be set (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocTx1Enable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x165), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the Stream Processor TX1 Enable register from
 * the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocTx1Enable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x165), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable control for the Stream Processor TX1 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer that specifies the value to be written
 * to the control register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocTx1EnableCg_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x165), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocTx1EnableCg_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x165), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable state for the Stream Processor TX2 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the enable state to be set (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocTx2Enable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x166), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the Stream
 * Processor TX2 enable status.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocTx2Enable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x166), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable control for the Stream Processor TX2 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer that specifies the value to be written
 * to the control register.
 * @return Returns the status of the write operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocTx2EnableCg_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x166), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_StreamprocTx2EnableCg_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x166), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets software interrupt values in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the interrupt values to
 * be set.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SwInterrupt_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x1a1), (value >> 4));
    if (0 != status) return status;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1a0), (value >> 3), 0x1, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x19f), (value >> 2), 0x1, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x19e), (value >> 1), 0x1, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x19d), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the software interrupt status from the ADRV9001 device by
 * reading multiple registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * interrupt status will be stored.
 * @return Returns the status of the last read operation, which indicates
 * success (0) or failure (non-zero). The retrieved interrupt status is
 * stored in the variable pointed to by 'value'.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SwInterrupt_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x1a1), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1a0), &register_value, 0x1, 0x0);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x19f), &register_value, 0x1, 0x0);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x19e), &register_value, 0x1, 0x0);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x19d), &register_value, 0x1, 0x0);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LDO bypass configuration for RF1 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the configuration to be set for the
 * LDO bypass.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SynthLdoBypassRf1_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1cb), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RF1 LDO bypass setting from a specific register in the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved bypass
 * setting will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SynthLdoBypassRf1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1cb), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LDO bypass configuration for the RF2 synthesizer in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * LDO bypass configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SynthLdoBypassRf2_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1cd), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SynthLdoBypassRf2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1cd), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF1 LDO filter bypass configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * RF1 LDO filter bypass.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SynthLdoFilterBypassRf1_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1cc), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the filter bypass setting for RF1 from the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved filter
 * bypass value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SynthLdoFilterBypassRf1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1cc), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF2 bypass filter configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the filter bypass
 * configuration to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SynthLdoFilterBypassRf2_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1ce), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the filter bypass status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved filter
 * bypass status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SynthLdoFilterBypassRf2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1ce), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the RF1 synthesizer LDO in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the desired power-down
 * state.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SynthLdoPdRf1_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1cb), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the Synth LDO
 * power-down state for RF1 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SynthLdoPdRf1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1cb), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the RF2 synthesizer LDO in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the desired power-down
 * state.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SynthLdoPdRf2_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1cd), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the Synth LDO
 * power-down state for RF2 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SynthLdoPdRf2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1cd), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the LDO status from a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved LDO status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SynthLdoStatusRf1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1cb), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RF2 LDO status from the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved LDO status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SynthLdoStatusRf2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1cd), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output voltage selection for the RF1 synthesizer LDO in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired output
 * voltage selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SynthLdoVoutSelRf1_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1cb), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LDO output selection for RF1 from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SynthLdoVoutSelRf1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1cb), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output voltage selection for the RF2 synthesizer LDO in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired output
 * voltage selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SynthLdoVoutSelRf2_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1cd), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the output voltage selection for the RF2 synthesizer LDO
 * from the device's register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved voltage
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SynthLdoVoutSelRf2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1cd), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LDO output trim value for the RF1 synthesizer in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the trim value to be set
 * for the LDO output.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SynthLdoVoutTrimRf1_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1cc), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LDO output trim value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved trim value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SynthLdoVoutTrimRf1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1cc), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LDO output trim value for the RF2 synthesizer in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the trim value to be set
 * for the LDO output.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SynthLdoVoutTrimRf2_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1ce), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LDO output trim value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved trim value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SynthLdoVoutTrimRf2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1ce), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the device's register map using a provided
 * value.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SysCodeb_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xf6), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SysCodeb_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xf6), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SYSREF buffer enable state in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to set for the
 * SYSREF buffer enable.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SysrefBufferEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1e3), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SYSREF buffer enable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved SYSREF
 * buffer enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SysrefBufferEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e3), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SYSREF driver power-down state in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the power-down state to be
 * set for the SYSREF driver.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SysrefDrvrForcePd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1e5), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SYSREF driver force power-down status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved SYSREF
 * driver status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SysrefDrvrForcePd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e5), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SYSREF edge selection in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the edge selection value
 * to be written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SysrefEdgeSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1e3), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SYSREF edge selection value from a specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved SYSREF edge
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SysrefEdgeSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e3), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SYSREF register enable value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the SYSREF register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SysrefRegisterEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1e3), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SYSREF register enable status from the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved SYSREF
 * register value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SysrefRegisterEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e3), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SYSREF sample enable configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the SYSREF sample enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SysrefSampleEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1e3), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SYSREF sample enable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved SYSREF
 * sample enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SysrefSampleEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e3), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SYSREF transition selection in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the transition selection
 * value to be written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SysrefTransitionSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1e3), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SYSREF transition selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved SYSREF
 * transition selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_SysrefTransitionSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1e3), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DAC reference temperature value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the temperature value to
 * be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TdegcDacinRef_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1a7), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x1a6), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 16-bit value from two specific registers of a device and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TdegcDacinRef_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1a7), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x1a6), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DAC reference voltage overflow configuration for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the DAC reference overflow register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TdegcDacinRefOvd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1a7), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TdegcDacinRefOvd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1a7), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the temperature value from a specific register in the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * temperature value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TdegcDone_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1a2), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the temperature value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the temperature value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TdegcInit_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1a4), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a temperature value from a specific register and stores it
 * in the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved temperature
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TdegcInit_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1a4), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the temperature measurement control value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the temperature
 * measurement control value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TdegcMeasCtrl_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1a4), (value >> 0), 0xe, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the temperature measurement control value from a specific
 * register of the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TdegcMeasCtrl_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1a4), &register_value, 0xe, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the temperature measurement multiplexer selection in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the multiplexer selection
 * value.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TdegcMeasMuxSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1a4), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the temperature measurement multiplexer selection from a
 * device's register.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved multiplexer
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TdegcMeasMuxSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1a4), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the temperature value in degrees Celsius for the PTAT register of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the temperature value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TdegcPtat_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1a5), (value >> 0), 0x3c, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a temperature value from a specific register and stores it
 * in the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * temperature value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TdegcPtat_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1a5), &register_value, 0x3c, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Reads back temperature data from the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the read
 * temperature value will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TdegcReadback_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1a2), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x1a3), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the temperature control value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the temperature control
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TdegcWaitCtrl_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1a5), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a temperature control value from a specific register in the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved temperature
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TdegcWaitCtrl_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1a5), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the MCS enable configuration in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the MCS enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TestMcsEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x193), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the MCS enable status from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved MCS enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TestMcsEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x193), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the top clock divider reset value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the top clock divider reset.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TopClockDividerReset_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x193), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the top clock divider reset value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * divider reset value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TopClockDividerReset_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x193), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the memory clock enable state for the transceiver by writing to a
 * specific register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A `uint8_t` value that indicates the desired state of the memory
 * clock enable (0 or 1).
 * @return Returns an `int32_t` status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TrxMemClkEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xf2), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the memory clock enable status from a specific register of
 * the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved memory clock
 * enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TrxMemClkEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xf2), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 Idata CMOS NIe value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the Tx1 Idata CMOS NIe.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1IdataCmosNIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x98), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx1 Idata CMOS NIe value from a specific register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1IdataCmosNIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x98), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 Idata CMOS NOe value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1IdataCmosNOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x98), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1IdataCmosNOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x98), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 Idata CMOS PIe value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the Tx1 Idata CMOS PIe.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1IdataCmosPIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x98), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx1 Idata CMOS PIe value from a specific register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1IdataCmosPIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x98), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS power output enable for the Tx1 Idata register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the CMOS power output enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1IdataCmosPOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x98), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS POe value from a specific register and stores it in
 * the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved CMOS POe
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1IdataCmosPOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x98), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS delay for the Tx1 Idata in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the delay value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1IdataLvdsDelay_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x99), (value >> 0), 0xe, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS delay value for the Tx1 Idata from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved LVDS delay
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1IdataLvdsDelay_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x99), &register_value, 0xe, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS Idata level for the Tx1 channel in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * LVDS Idata level.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1IdataLvdsIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x99), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS Idata value from the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved LVDS Idata
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1IdataLvdsIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x99), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS polarity inversion for the Tx1 I data in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * LVDS polarity inversion.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1IdataLvdsPnInv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x97), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS polarity inversion setting from a specific register
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved polarity
 * inversion value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1IdataLvdsPnInv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x97), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the on-chip termination for the LVDS receiver in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the termination value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1IdataLvdsRxOnchipTerm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x97), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the on-chip termination value for the LVDS RX data of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved termination
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1IdataLvdsRxOnchipTerm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x97), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 Q data CMOS NIe register value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1QdataCmosNIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x9c), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1QdataCmosNIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x9c), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS NOe value for the Tx1 Q data register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the CMOS NOe field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1QdataCmosNOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x9c), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1QdataCmosNOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x9c), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 Q data CMOS PIe value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the Tx1 Q data.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1QdataCmosPIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x9c), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1QdataCmosPIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x9c), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS POE value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1QdataCmosPOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x9c), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific CMOS register value and stores it in the provided
 * pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1QdataCmosPOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x9c), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS delay for the Tx1 Q data in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the delay value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1QdataLvdsDelay_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x9d), (value >> 0), 0xe, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS delay value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved LVDS delay
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1QdataLvdsDelay_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x9d), &register_value, 0xe, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS I/E value for the Tx1 Q data in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the LVDS I/E.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1QdataLvdsIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x9d), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS I/Q data from the ADRV9001 device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved LVDS I/Q
 * data will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1QdataLvdsIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x9d), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS polarity inversion for the Tx1 Q data in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * LVDS polarity inversion.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1QdataLvdsPnInv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x9b), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS polarity inversion setting from a specific register
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1QdataLvdsPnInv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x9b), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the on-chip termination value for the LVDS receiver in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the termination value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1QdataLvdsRxOnchipTerm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x9b), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the on-chip termination value for the LVDS receiver from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * termination value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1QdataLvdsRxOnchipTerm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x9b), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS NIe clock configuration for the Tx1 channel in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the CMOS NIe clock configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1ClkCmosNIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x90), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1ClkCmosNIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x90), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS output enable for the Tx1 clock in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the CMOS output enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1ClkCmosNOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x90), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1ClkCmosNOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x90), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS PIe clock value for the Tx1 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1ClkCmosPIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x90), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1ClkCmosPIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x90), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS power output enable for the Tx1 clock in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the CMOS power output enable.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1ClkCmosPOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x90), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS power output enable status from a specific register
 * for the Tx1 clock.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1ClkCmosPOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x90), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS delay for the Tx1 clock in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired LVDS delay
 * value.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1ClkLvdsDelay_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x91), (value >> 0), 0xe, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS delay value for the Tx1 clock from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved LVDS delay
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1ClkLvdsDelay_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x91), &register_value, 0xe, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS current level for the Tx1 clock in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired LVDS current
 * level.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1ClkLvdsIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x91), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS current setting from the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved LVDS current
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1ClkLvdsIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x91), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS polarity inversion for the Tx1 clock in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the polarity inversion
 * setting to be applied.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1ClkLvdsPnInv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x8f), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS polarity inversion setting for the Tx1 clock from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved LVDS
 * polarity inversion value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1ClkLvdsPnInv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x8f), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the on-chip termination for the LVDS receiver clock in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * on-chip termination.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1ClkLvdsRxOnchipTerm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x8f), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the on-chip termination value for the Tx1 clock LVDS
 * receiver from a specific register.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved termination
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1ClkLvdsRxOnchipTerm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x8f), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 I Bank selection in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the Tx1 I Bank selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1IBankSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x15b), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx1 I Bank selection value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved bank
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1IBankSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x15b), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 MCS delay count in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the delay count to be
 * set.
 * @return Returns the status of the last write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1McsDelayCnt_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x1f2), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x1f1), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx1 MCS delay count from the device's register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved delay
 * count will be stored.
 * @return Returns the status of the register read operations, where a value of
 * 0 indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1McsDelayCnt_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x1f2), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x1f1), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FIFO delay count for the Tx1 MCS in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the FIFO delay count to
 * be set.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1McsReadFifoDelayCnt_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1f3), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the FIFO delay count from a specific register of the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved FIFO delay
 * count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1McsReadFifoDelayCnt_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1f3), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the data valid count from the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved data
 * valid count will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1McsVsDataValidCnt_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x1f5), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x1f4), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Q bank selection for the Tx1 channel in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the Q bank selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1QBankSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x15b), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1QBankSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x15b), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS reference clock value for the Tx1 channel in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS reference clock.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1RefclkCmosNIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x9f), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS NIe reference clock value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved reference
 * clock value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1RefclkCmosNIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x9f), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS NOe reference clock value for the Tx1 channel in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS NOe reference clock.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1RefclkCmosNOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x9f), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS NOe reference clock value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1RefclkCmosNOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x9f), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS reference clock value for the Tx1 channel in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS reference clock.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1RefclkCmosPIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x9f), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1RefclkCmosPIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x9f), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS power output enable for the Tx1 reference clock in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the CMOS power output enable field.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1RefclkCmosPOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x9f), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS power output enable status from a specific register
 * for the Tx1 reference clock.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1RefclkCmosPOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x9f), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS calibration value for the Tx1 reference clock in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1RefclkLvdsCalib_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa0), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS calibration value for the Tx1 reference clock from
 * a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1RefclkLvdsCalib_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa0), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS delay for the Tx1 reference clock in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the delay value to be
 * set.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1RefclkLvdsDelay_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa0), (value >> 0), 0xe, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS delay value for the Tx1 reference clock from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved LVDS delay
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1RefclkLvdsDelay_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa0), &register_value, 0xe, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS output enable for the Tx1 reference clock in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the desired state of the LVDS
 * output enable (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1RefclkLvdsOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa0), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS output enable status for the Tx1 reference clock
 * from the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved LVDS output
 * enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1RefclkLvdsOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa0), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the polarity inversion for the LVDS reference clock in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the desired polarity inversion
 * setting for the LVDS reference clock.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1RefclkLvdsPnInv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x9f), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS polarity inversion setting from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved polarity
 * inversion value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1RefclkLvdsPnInv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x9f), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reference clock voltage control value for the Tx1 channel in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the reference clock
 * voltage control value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1RefclkVcm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x9f), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reference clock voltage control value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved reference
 * clock voltage control value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1RefclkVcm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x9f), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 Strobe CMOS NIe register value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1StrobeCmosNIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x94), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1StrobeCmosNIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x94), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 Strobe CMOS NOe register value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1StrobeCmosNOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x94), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1StrobeCmosNOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x94), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS PIe strobe value for the Tx1 register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the CMOS PIe strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1StrobeCmosPIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x94), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1StrobeCmosPIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x94), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS POE strobe value for the Tx1 register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS POE strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1StrobeCmosPOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x94), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1StrobeCmosPOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x94), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS delay for the Tx1 strobe in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the delay value to be set
 * for the Tx1 strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1StrobeLvdsDelay_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x95), (value >> 0), 0xe, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS delay value for the Tx1 strobe from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved LVDS delay
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1StrobeLvdsDelay_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x95), &register_value, 0xe, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS strobe value for the Tx1 channel in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the LVDS strobe value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1StrobeLvdsIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x95), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1StrobeLvdsIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x95), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS polarity inversion for the Tx1 strobe in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired polarity
 * inversion value.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1StrobeLvdsPnInv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x93), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1StrobeLvdsPnInv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x93), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the on-chip termination for the LVDS receiver in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the termination register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1StrobeLvdsRxOnchipTerm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x93), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the on-chip termination value for the LVDS RX strobe from
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * termination value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx1StrobeLvdsRxOnchipTerm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x93), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 Idata CMOS NIe value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the Tx2 Idata CMOS NIe.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2IdataCmosNIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xab), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2IdataCmosNIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xab), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 Idata CMOS NOe register value for the specified device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2IdataCmosNOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xab), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2IdataCmosNOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xab), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 Idata CMOS PIe value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2IdataCmosPIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xab), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2IdataCmosPIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xab), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS power output enable value for the Tx2 Idata register in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the power output enable
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2IdataCmosPOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xab), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS POe data from the Tx2 Idata register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2IdataCmosPOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xab), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS delay for the Tx2 Idata in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the LVDS delay value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2IdataLvdsDelay_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xac), (value >> 0), 0xe, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS delay value for the Tx2 Idata from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved LVDS delay
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2IdataLvdsDelay_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xac), &register_value, 0xe, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS Idata level for the Tx2 channel in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the LVDS Idata level.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2IdataLvdsIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xac), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS Idata value from a specific register and stores it
 * in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved LVDS Idata
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2IdataLvdsIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xac), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS polarity inversion for the Tx2 I data in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the polarity inversion
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2IdataLvdsPnInv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xaa), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS polarity inversion setting from a specific register
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2IdataLvdsPnInv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xaa), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the on-chip termination value for the LVDS receiver in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the termination value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2IdataLvdsRxOnchipTerm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xaa), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the on-chip termination value for the LVDS receiver from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved termination
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2IdataLvdsRxOnchipTerm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xaa), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS NIe value in the Tx2 Qdata register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2QdataCmosNIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xaf), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2QdataCmosNIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xaf), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS NOe data for the Tx2 Q data register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2QdataCmosNOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xaf), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in a
 * provided variable.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2QdataCmosNOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xaf), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 Q data CMOS PIe value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the Tx2 Q data.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2QdataCmosPIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xaf), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2QdataCmosPIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xaf), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS POe value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2QdataCmosPOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xaf), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific CMOS data value from a device register and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2QdataCmosPOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xaf), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS delay for the Tx2 Q data in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the delay value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2QdataLvdsDelay_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xb0), (value >> 0), 0xe, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS delay value for the Tx2Q data from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved LVDS delay
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2QdataLvdsDelay_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xb0), &register_value, 0xe, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS I/E value for the Tx2 Q data in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the LVDS I/E.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2QdataLvdsIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xb0), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS I/E data from the ADRV9001 device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved LVDS I/E
 * data will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2QdataLvdsIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xb0), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS polarity inversion for the Tx2 Q data in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * LVDS polarity inversion.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2QdataLvdsPnInv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xae), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS polarity inversion setting from a specific register
 * and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2QdataLvdsPnInv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xae), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the on-chip termination value for the LVDS receiver in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the termination value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2QdataLvdsRxOnchipTerm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xae), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the on-chip termination value for the LVDS receiver from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved termination
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2QdataLvdsRxOnchipTerm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xae), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 clock CMOS NIe configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2ClkCmosNIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa3), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2ClkCmosNIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa3), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 clock CMOS NOE configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2ClkCmosNOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa3), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2ClkCmosNOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa3), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS PIe clock value for the Tx2 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2ClkCmosPIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa3), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2ClkCmosPIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa3), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS power output enable for the Tx2 clock in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the CMOS power output enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2ClkCmosPOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa3), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2ClkCmosPOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa3), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS delay for the Tx2 clock in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the delay value to be set
 * for the Tx2 clock.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2ClkLvdsDelay_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa4), (value >> 0), 0xe, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS delay value for the Tx2 clock from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved LVDS delay
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2ClkLvdsDelay_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa4), &register_value, 0xe, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS current level for the Tx2 clock in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired LVDS current
 * level.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2ClkLvdsIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa4), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS current level setting from the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved LVDS current
 * level will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2ClkLvdsIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa4), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS polarity inversion for the Tx2 clock in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the polarity inversion
 * setting to be applied.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2ClkLvdsPnInv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa2), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS polarity inversion setting for the Tx2 clock from
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved LVDS
 * polarity inversion value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2ClkLvdsPnInv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa2), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the on-chip termination for the LVDS receiver clock in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the termination register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2ClkLvdsRxOnchipTerm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa2), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the on-chip termination value for the Tx2 clock LVDS
 * receiver from a specific register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved termination
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2ClkLvdsRxOnchipTerm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa2), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 I Bank selection in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the Tx2 I Bank selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2IBankSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x15b), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx2 I Bank Selection value from a specific register in
 * the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2IBankSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x15b), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 MCS delay count in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the delay count to be
 * set.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2McsDelayCnt_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x1f7), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0x1f6), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx2 MCS delay count from the device's register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved delay
 * count will be stored.
 * @return Returns the status of the register read operations, with the
 * retrieved delay count stored in the variable pointed to by 'value'.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2McsDelayCnt_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x1f7), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x1f6), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FIFO delay count for the Tx2 MCS in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the FIFO delay count to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2McsReadFifoDelayCnt_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x1f8), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the FIFO delay count from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved FIFO delay
 * count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2McsReadFifoDelayCnt_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x1f8), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the data valid count from the Tx2 MCS register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved data
 * valid count will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the register read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2McsVsDataValidCnt_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x1fa), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0x1f9), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Q bank selection for the Tx2 channel in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the Q bank selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2QBankSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x15b), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Q bank selection value from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved Q bank
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2QBankSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x15b), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS reference clock value for the Tx2 channel in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS reference clock.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2RefclkCmosNIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xb2), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2RefclkCmosNIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xb2), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS NOe reference clock value for the Tx2 channel in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS NOe reference clock.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2RefclkCmosNOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xb2), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2RefclkCmosNOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xb2), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS reference clock value for the Tx2 channel in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS reference clock.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2RefclkCmosPIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xb2), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2RefclkCmosPIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xb2), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS power output enable for the Tx2 reference clock in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2RefclkCmosPOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xb2), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS power output enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2RefclkCmosPOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xb2), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS calibration value for the Tx2 reference clock in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the calibration value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2RefclkLvdsCalib_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xb3), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS calibration value for the Tx2 reference clock from
 * a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved calibration
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2RefclkLvdsCalib_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xb3), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS delay for the Tx2 reference clock in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the delay value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2RefclkLvdsDelay_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xb3), (value >> 0), 0xe, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS delay value for the Tx2 reference clock from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved LVDS delay
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2RefclkLvdsDelay_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xb3), &register_value, 0xe, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS output enable for the Tx2 reference clock in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that specifies the enable state for the LVDS
 * output (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2RefclkLvdsOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xb3), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS output enable status for the Tx2 reference clock
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved LVDS output
 * enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2RefclkLvdsOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xb3), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS polarity inversion for the Tx2 reference clock in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the desired polarity inversion
 * setting for the LVDS reference clock.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2RefclkLvdsPnInv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xb2), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS polarity inversion setting from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved polarity
 * inversion value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2RefclkLvdsPnInv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xb2), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the VCM value for the Tx2 reference clock in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the VCM value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2RefclkVcm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xb2), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reference clock voltage control value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved reference
 * clock voltage control value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2RefclkVcm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xb2), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS NIe strobe value for the Tx2 register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the CMOS NIe strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2StrobeCmosNIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa7), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2StrobeCmosNIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa7), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS NOe strobe value for the Tx2 register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the CMOS NOe strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2StrobeCmosNOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa7), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2StrobeCmosNOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa7), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS PIe strobe value for the Tx2 register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the CMOS PIe strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2StrobeCmosPIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa7), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2StrobeCmosPIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa7), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CMOS POE strobe value for the Tx2 register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CMOS POE strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2StrobeCmosPOe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa7), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CMOS POE strobe value from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved strobe value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2StrobeCmosPOe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa7), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS delay for the Tx2 strobe in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the delay value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2StrobeLvdsDelay_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa8), (value >> 0), 0xe, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LVDS delay value for the Tx2 strobe from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved LVDS delay
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2StrobeLvdsDelay_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa8), &register_value, 0xe, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS strobe value for the Tx2 channel in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the LVDS strobe value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2StrobeLvdsIe_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa8), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2StrobeLvdsIe_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa8), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LVDS polarity inversion for the Tx2 strobe in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * LVDS polarity inversion.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2StrobeLvdsPnInv_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa6), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2StrobeLvdsPnInv_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa6), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the on-chip termination for the LVDS receiver in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the termination register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2StrobeLvdsRxOnchipTerm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xa6), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the on-chip termination value for the LVDS receiver by
 * reading a specific register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * termination value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_Tx2StrobeLvdsRxOnchipTerm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xa6), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain for the Tx Bank AP FIR filter in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the gain value to be set
 * for the Tx Bank AP FIR filter.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxBankAPfirGain_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x15c), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AP FIR gain value from the Tx bank register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved gain value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxBankAPfirGain_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x15c), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the symmetric filter value for the transmit bank of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the filter value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxBankAPfirSymmetric_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x15c), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxBankAPfirSymmetric_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x15c), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FIR tap values for the transmit bank of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the FIR tap values to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxBankAPfirTaps_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x15c), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AP FIR tap values from the Tx bank register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved FIR tap
 * values will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxBankAPfirTaps_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x15c), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BP FIR gain for the transmit bank in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the gain value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxBankBPfirGain_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x15d), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BP FIR gain value from the Tx bank register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved gain value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxBankBPfirGain_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x15d), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the symmetric filter value for the transmit bank in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the filter value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxBankBPfirSymmetric_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x15d), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxBankBPfirSymmetric_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x15d), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BP FIR taps for the transmit bank in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the BP FIR taps.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxBankBPfirTaps_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x15d), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the BP FIR taps from the transmit bank of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxBankBPfirTaps_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x15d), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CP FIR gain for the transmit bank in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the gain value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxBankCPfirGain_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x15e), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CP FIR gain value from the Tx bank register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved gain value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxBankCPfirGain_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x15e), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the symmetric configuration for the Tx Bank CP FIR filter in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the FIR filter configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxBankCPfirSymmetric_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x15e), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxBankCPfirSymmetric_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x15e), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CP FIR taps for the transmit bank in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the CP FIR taps.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxBankCPfirTaps_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x15e), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the CP FIR taps from the Tx bank of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved FIR taps
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxBankCPfirTaps_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x15e), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the digital pre-filter gain for the transmit bank in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the gain value to be set
 * for the digital pre-filter.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxBankDPfirGain_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x15f), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DP FIR gain value from the specified register of the
 * device.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved gain value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxBankDPfirGain_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x15f), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the symmetric value for the digital filter in the transmit bank
 * of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the digital filter.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxBankDPfirSymmetric_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x15f), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxBankDPfirSymmetric_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x15f), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DP FIR taps for the transmit bank in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the DP FIR taps.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxBankDPfirTaps_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x15f), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DP FIR tap values from the specified register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved FIR tap
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxBankDPfirTaps_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x15f), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Updates the complex gain setting for both transmit channels in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the new gain value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxComplexGainUpdateBoth_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x19c), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the complex gain value from a specific register and updates
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved complex
 * gain value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxComplexGainUpdateBoth_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x19c), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the transmission data mask for channel 1 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the data mask value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxDataMaskCh1_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x16c), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the transmission data mask for channel 1 from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved data mask
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxDataMaskCh1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x16c), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the transmission data mask for channel 2 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the data mask value to be
 * set for channel 2.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxDataMaskCh2_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x16d), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the transmission data mask for channel 2 from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved data mask
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxDataMaskCh2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x16d), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the transmit data mask for RF PLL unlock on channel 1 in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the transmit data mask.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxDataMaskOnRfpllUnlockCh1_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x16c), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx data mask value from a specific register after
 * ensuring the RFPLL is unlocked for channel 1.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved Tx data mask
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxDataMaskOnRfpllUnlockCh1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x16c), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the transmit data mask for RF PLL unlock on channel 2 in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * as the transmit data mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxDataMaskOnRfpllUnlockCh2_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x16d), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx data mask value from a specific register after
 * ensuring the RFPLL is unlocked for channel 2.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved Tx data mask
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxDataMaskOnRfpllUnlockCh2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x16d), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx data ramp down configuration for RF PLL unlock on channel
 * 1.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxDataRampDownOnRfpllUnlockCh1_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x16c), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx Data Ramp Down value from the RF PLL unlock register
 * for channel 1.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxDataRampDownOnRfpllUnlockCh1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x16c), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx Data Ramp Down configuration for RF PLL unlock on channel
 * 2 of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxDataRampDownOnRfpllUnlockCh2_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x16d), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx data ramp down value from a specific register when
 * the RF PLL is unlocked for channel 2.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxDataRampDownOnRfpllUnlockCh2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x16d), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the transmit enable state in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the transmit enable state
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x162), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the transmission enable status from a specific register of
 * the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * transmission enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x162), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the transmission enable state in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the transmission enable
 * state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxEnableByArm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x16f), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the transmission enable status from a specific register in
 * the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved transmission
 * enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxEnableByArm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x16f), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the default data enable value for the TXDP interface in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the data enable state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfDefaultDataEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xb7), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the default data enable value from a specific register for
 * the given device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfDefaultDataEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xb7), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the default data used clear value in the TXDP interface of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfDefaultDataUsedClear_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xbb), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfDefaultDataUsedClear_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xbb), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the IRQ enable status for the default data used in the TXDP
 * interface of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the IRQ enable status to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfDefaultDataUsedIrqEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xba), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the interrupt enable status for the default data used in the
 * TXDP interface of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved interrupt
 * enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfDefaultDataUsedIrqEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xba), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the default data used status from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved status
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfDefaultDataUsedStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xbc), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the transition count from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device context used for reading the register.
 * @param value A pointer to a uint8_t variable where the retrieved transition
 * count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfDefaultDataUsedTransitionsCount_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xb9), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the default I data for the TxDP interface in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the value to be set for
 * the default I data.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfDefaultIdata_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0xc3), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0xc4), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the default I data value from the TXDP interface of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved I
 * data value will be stored.
 * @return Returns 0 on success or a non-zero error code if any of the register
 * read operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfDefaultIdata_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xc3), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xc4), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the default Q data for the TxDP interface in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the Q data value to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfDefaultQdata_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0xc1), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0xc2), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the default Q data from the TXDP interface of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved Q
 * data will be stored.
 * @return Returns the status of the last register read operation, where a
 * status of 0 indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfDefaultQdata_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xc1), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xc2), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TXDP interface enable state in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the enable state to be set for the
 * TXDP interface.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xb6), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the TXDP
 * interface enable status.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xb6), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the read start threshold for the TXDP interface FIFO in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the threshold value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfFifoRdStartThreshold_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xb8), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the read start threshold value from the TXDP interface FIFO
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved threshold
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfFifoRdStartThreshold_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xb8), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the write request threshold for the TXDP interface FIFO in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the threshold value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfFifoWrReqThreshold_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xb8), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the write request threshold value from the TXDP interface
 * FIFO register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved threshold
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfFifoWrReqThreshold_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xb8), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Clears the FIFO write error status in the ADRV9001 device by writing a
 * specified value to a register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfFifoWriteErrorClear_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xbb), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the FIFO write error status from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved FIFO write
 * error status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfFifoWriteErrorClear_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xbb), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Enables the FIFO write error interrupt for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer that specifies the interrupt enable
 * value.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfFifoWriteErrorIrqEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xba), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the FIFO write error interrupt enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved interrupt
 * enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfFifoWriteErrorIrqEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xba), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the FIFO write error status from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved FIFO write
 * error status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfFifoWriteErrorStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xbc), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx data interface IData register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the value to be written
 * to the Tx data interface IData register.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfIdata_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0xbf), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0xc0), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the interface data from the TXDP register map for a given
 * device.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved data
 * will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the register read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfIdata_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xbf), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xc0), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the edge-triggered interrupt configuration for the TXDP interface
 * of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the interrupt configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfIrqEdgeTriggered_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xb6), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the edge-triggered interrupt value from a specific register
 * of the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved interrupt
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfIrqEdgeTriggered_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xb6), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TXDP interface Q data by writing to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 16-bit unsigned integer representing the value to be written
 * to the TXDP interface Q data.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfQdata_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0xbd), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x0 + 0xbe), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Q data from the TXDP interface by reading two registers
 * and combining their values.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved Q
 * data will be stored.
 * @return Returns the status of the last register read operation, which
 * indicates success (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfQdata_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xbd), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xbe), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief This function clears the write request for the TXDP interface by
 * writing a specified value to a hardware register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return The function returns an integer status code indicating the success or
 * failure of the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfWriteRequestClear_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xbb), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief This function reads a specific register value from a device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the read register value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfWriteRequestClear_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xbb), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the auto-clear configuration for the TXDP interface write request
 * interrupt.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the interrupt auto-clear register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfWriteRequestIrqAutoclear_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xb6), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the IRQ autoclear value from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfWriteRequestIrqAutoclear_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xb6), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the interrupt enable status for the TXDP interface write request
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the interrupt enable status to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfWriteRequestIrqEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xba), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the interrupt enable status from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfWriteRequestIrqEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xba), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the write request status from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device context from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxdpIntfWriteRequestStatus_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xbc), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TX/RX pin mode for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the desired TX/RX pin mode.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxrxPinMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0x168), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the TX/RX pin mode value from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved pin mode
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_TxrxPinMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0x168), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the vendor ID from the device's register map.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * vendor ID will be stored.
 * @return Returns 0 on success or an error code if any of the register reads
 * fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_VendorId_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xc), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x0 + 0xb), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the write enable delay for the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_WrEnDelay_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xdc), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the write enable delay value from a specific register of the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved write enable
 * delay value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_WrEnDelay_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xdc), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_WriteRegClockSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x0 + 0xdb), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific clock selection register value from the device
 * and stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore_WriteRegClockSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x0 + 0xdb), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


#endif // __ADRV9001_BF_NVS_REGMAP_CORE_H__