/**
 * \file
 * \brief BitField accessors for adc1_mem_map
 *
 * Autogenerated with yoda-gen 1.1.0. Do not modify
 *
 * \copyright Copyright (c) 2020 Analog Devices, Inc. All Rights Reserved.
 * This software is proprietary to Analog Devices, Inc. and its licensors.
 */

 #ifndef __ADRV9001_BF_ADC1_MEM_MAP_H__
 #define __ADRV9001_BF_ADC1_MEM_MAP_H__

#include "adrv9001_bf_hal.h"

/***************************************************************************//**
 * @brief The `adrv9001_BfAdc1MemMap_e` is an enumeration that defines memory
 * map addresses for ADCs in the ADRV9001 device. It includes specific
 * addresses for RX1 and RX2 ADCs, which are used to access and control
 * the ADCs' settings and operations. This enumeration is part of a
 * larger system for managing ADC configurations and operations in the
 * ADRV9001, a high-performance RF transceiver.
 *
 * @param ADRV9001_BF_RX1_ADC Represents the memory map address for RX1 ADC, set
 * to 0x2000.
 * @param ADRV9001_BF_RX2_ADC Represents the memory map address for RX2 ADC, set
 * to 0x2600.
 ******************************************************************************/
typedef enum adrv9001_BfAdc1MemMap_e
{
    ADRV9001_BF_RX1_ADC    =   0x2000,
    ADRV9001_BF_RX2_ADC    =   0x2600
} adrv9001_BfAdc1MemMap_e;

/***************************************************************************//**
 * @brief The `adc1MemMapInstances` is a static constant array of type
 * `adrv9001_BfAdc1MemMap_e`, which is an enumeration representing
 * specific ADC memory map instances. It contains two elements:
 * `ADRV9001_BF_RX1_ADC` and `ADRV9001_BF_RX2_ADC`, which correspond to
 * specific memory map addresses for ADC channels RX1 and RX2.
 *
 * @details This array is used to reference specific ADC memory map instances
 * for configuration or control within the ADC1 memory map operations.
 ******************************************************************************/
static const adrv9001_BfAdc1MemMap_e adc1MemMapInstances[] = {
    ADRV9001_BF_RX1_ADC,
    ADRV9001_BF_RX2_ADC
};

/***************************************************************************//**
 * @brief Sets the compensation capacitor value for ADC Amplifier 1, Cap 1.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the ADC instance (e.g., RX1
 * or RX2).
 * @param regInstance An index to specify the register instance for the
 * operation.
 * @param value The value to set for the compensation capacitor, represented as
 * an 8-bit unsigned integer.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcAmp1Cap1_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x16 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the compensation capacitor for ADC Amplifier 1,
 * Cap 1.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An unsigned integer representing the specific register
 * instance to read from.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcAmp1Cap1_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x16 + 0x0 + (regInstance * 0x1)), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the compensation capacitor value for ADC Amplifier 1's 5th-order
 * path.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated type indicating which ADC instance (e.g., RX1
 * or RX2) is being configured.
 * @param regInstance An index representing the specific register instance to be
 * modified.
 * @param value The value to set for the compensation capacitor, represented as
 * an 8-bit unsigned integer.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcAmp1Cap2_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x14 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the compensation capacitor setting for ADC
 * Amplifier 1, 5th-order path.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An index to specify the register instance for the ADC.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcAmp1Cap2_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x14 + 0x0 + (regInstance * 0x1)), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable state of ADC Amplifier 1.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., RX1 or RX2).
 * @param value A uint8_t value indicating whether to enable (1) or disable (0)
 * the ADC amplifier.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcAmp1En_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x2d), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the enabled state of ADC Amplifier 1.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., RX1 or RX2).
 * @param value A pointer to a uint8_t variable where the retrieved enabled
 * state will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcAmp1En_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x2d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the spare configuration for ADC Amplifier 1.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerator of type `adrv9001_BfAdc1MemMap_e` that
 * specifies the ADC instance.
 * @param regInstance A 32-bit unsigned integer representing the specific
 * register instance to be modified.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the specified register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcAmp1Spare_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x15 + 0x0 + (regInstance * 0x1)), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the spare register value for ADC Amplifier 1 from the
 * specified device.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value indicating which ADC instance to access.
 * @param regInstance An index specifying the register instance to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcAmp1Spare_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x15 + 0x0 + (regInstance * 0x1)), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the compensation capacitor value for ADC Amplifier 2's first
 * capacitor.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated type indicating which ADC instance to
 * configure.
 * @param regInstance An index representing the specific register instance to
 * modify.
 * @param value The value to set for the compensation capacitor, represented as
 * an 8-bit unsigned integer.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcAmp2Cap1_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x17 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the compensation capacitor setting for ADC
 * Amplifier 2, 4th/5th-order path.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An index to specify the particular register instance.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcAmp2Cap1_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17 + 0x0 + (regInstance * 0x1)), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the compensation capacitor value for ADC Amplifier 2's 5th-order
 * path.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance (e.g., RX1
 * or RX2) is being configured.
 * @param regInstance An index representing the specific register instance to be
 * modified.
 * @param value The value to set for the compensation capacitor, represented as
 * an 8-bit unsigned integer.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcAmp2Cap2_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x18 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the compensation capacitor setting for ADC
 * Amplifier 2 5th-order path.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An index to specify the particular register instance.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcAmp2Cap2_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x18 + 0x0 + (regInstance * 0x1)), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable state for ADC Amplifier 2.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., RX1 or RX2).
 * @param value A uint8_t value that indicates whether to enable (1) or disable
 * (0) the ADC amplifier.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcAmp2En_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x2e), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the enabled state of ADC Amplifier 2.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., RX1 or RX2).
 * @param value A pointer to a uint8_t variable where the retrieved enabled
 * state will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcAmp2En_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x2e), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the spare configuration for ADC Amplifier 2 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating which ADC instance (e.g., RX1
 * or RX2) is being configured.
 * @param regInstance An index representing the specific register instance to be
 * modified.
 * @param value An 8-bit value to be written to the specified register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcAmp2Spare_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19 + 0x0 + (regInstance * 0x1)), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the spare ADC amplifier value from the specified register.
 *
 * @param device A pointer to the device structure representing the ADC.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An index specifying the register instance to read from.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcAmp2Spare_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19 + 0x0 + (regInstance * 0x1)), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable state for ADC Amplifier 3.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., ADRV9001_BF_RX1_ADC or ADRV9001_BF_RX2_ADC).
 * @param value A uint8_t value that indicates whether to enable (1) or disable
 * (0) the ADC amplifier.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcAmp3En_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x2f), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the enable status of ADC Amplifier 3.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., RX1 or RX2).
 * @param value A pointer to a uint8_t variable where the retrieved enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcAmp3En_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x2f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the spare configuration for ADC Amplifier 3.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerator of type `adrv9001_BfAdc1MemMap_e` that
 * specifies the ADC instance.
 * @param regInstance A 32-bit unsigned integer representing the specific
 * register instance to be modified.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the specified register.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcAmp3Spare_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b + 0x0 + (regInstance * 0x1)), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the spare value from the ADC amplifier 3 register.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An index specifying the register instance to read from.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcAmp3Spare_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b + 0x0 + (regInstance * 0x1)), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias current for ADC Amplifier 1's input GM stage.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the ADC instance (e.g., RX1
 * or RX2).
 * @param regInstance An index for the specific register instance to be
 * modified.
 * @param value The bias current value to be set, represented as an 8-bit
 * unsigned integer.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp1Gm1a_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1f + 0x0 + (regInstance * 0x1)), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias current setting for ADC Amplifier 1's input GM
 * stage.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value indicating which ADC instance to access.
 * @param regInstance An index to specify the register instance for the ADC.
 * @param value A pointer to a uint8_t variable where the retrieved bias current
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp1Gm1a_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1f + 0x0 + (regInstance * 0x1)), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias current for ADC Amplifier 1's input GM stage on 1.8V.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance to
 * configure.
 * @param regInstance An index to specify the register instance for the
 * configuration.
 * @param value The value to set for the bias current, represented as an 8-bit
 * unsigned integer.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp1Gm1a1p8_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x20 + 0x0 + (regInstance * 0x1)), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias current setting for ADC Amplifier 1's input GM
 * stage on 1.8V.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An index to specify the register instance for the ADC.
 * @param value A pointer to a uint8_t variable where the retrieved bias current
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp1Gm1a1p8_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x20 + 0x0 + (regInstance * 0x1)), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias current for the midband GM stage of ADC Amplifier 1.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated type indicating which ADC instance to
 * configure.
 * @param regInstance An index representing the specific register instance to
 * modify.
 * @param value The value to set for the bias current, which is a 8-bit unsigned
 * integer.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp1Gm1b_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1e + 0x0 + (regInstance * 0x1)), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias current setting for the midband GM stage of ADC
 * Amplifier 1.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value indicating which ADC instance to access.
 * @param regInstance An index to specify the register instance for the ADC.
 * @param value A pointer to a uint8_t variable where the retrieved bias current
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp1Gm1b_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1e + 0x0 + (regInstance * 0x1)), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias current for the high-speed GM stage of ADC Amplifier 1.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance to
 * configure.
 * @param regInstance An index to specify the register instance for the ADC
 * configuration.
 * @param value An 8-bit value representing the desired bias current setting.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp1Gm1d_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1e + 0x0 + (regInstance * 0x1)), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias current setting for the high-speed GM stage of ADC
 * Amplifier 1.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value indicating which ADC instance to access.
 * @param regInstance An index specifying the register instance to read from.
 * @param value A pointer to a uint8_t where the retrieved bias current value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp1Gm1d_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1e + 0x0 + (regInstance * 0x1)), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias current for ADC Amplifier 1's high gain GM stage.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance to
 * configure.
 * @param regInstance An index to specify the register instance for the
 * configuration.
 * @param value An 8-bit value representing the desired bias current setting.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp1Gm2a_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1f + 0x0 + (regInstance * 0x1)), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias current setting for the ADC Amplifier 1 high gain
 * GM stage.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An index to specify the register instance for the ADC.
 * @param value A pointer to a uint8_t variable where the retrieved bias current
 * value will be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp1Gm2a_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1f + 0x0 + (regInstance * 0x1)), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias current for the ADC Amplifier 1 midband GM stage.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance to
 * configure.
 * @param regInstance An index to specify the register instance for the
 * configuration.
 * @param value The value to set for the bias current, represented as an 8-bit
 * unsigned integer.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp1Gm4a_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x20 + 0x0 + (regInstance * 0x1)), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias current setting for ADC Amplifier 1's midband GM
 * stage.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An index to specify the register instance for the ADC.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp1Gm4a_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x20 + 0x0 + (regInstance * 0x1)), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias current for ADC Amplifier 2's input GM stage.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the ADC instance (e.g., RX1
 * or RX2).
 * @param regInstance An index for the specific register instance to be
 * modified.
 * @param value The value to set for the bias current, represented as an 8-bit
 * unsigned integer.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp2Gm1a_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x22 + 0x0 + (regInstance * 0x1)), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias current for ADC Amplifier 2's input GM stage.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An index to specify the register instance for the ADC.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp2Gm1a_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x22 + 0x0 + (regInstance * 0x1)), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias current for ADC Amplifier 2's input GM stage on 1.8V.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance to
 * configure.
 * @param regInstance An index for the specific register instance to be
 * modified.
 * @param value The value to set for the bias current, represented as an 8-bit
 * unsigned integer.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp2Gm1a1p8_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x23 + 0x0 + (regInstance * 0x1)), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias current for ADC Amplifier 2's input GM stage on
 * 1.8V.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An index to specify the register instance for the ADC.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp2Gm1a1p8_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x23 + 0x0 + (regInstance * 0x1)), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias current for the midband GM stage of ADC Amplifier 1.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance is being
 * configured.
 * @param regInstance An index for the specific register instance to be
 * modified.
 * @param value The value to set for the bias current, which is a 8-bit unsigned
 * integer.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp2Gm1b_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x21 + 0x0 + (regInstance * 0x1)), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias current setting for the midband GM stage of ADC
 * Amplifier 1.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated type indicating which ADC instance (e.g., RX1
 * or RX2) is being accessed.
 * @param regInstance An unsigned integer representing the specific register
 * instance to read from.
 * @param value A pointer to a uint8_t variable where the retrieved bias current
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp2Gm1b_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x21 + 0x0 + (regInstance * 0x1)), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias current for the ADC Amplifier 2 high speed GM stage.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the ADC instance (e.g., RX1
 * or RX2).
 * @param regInstance An unsigned integer representing the specific register
 * instance.
 * @param value An 8-bit unsigned integer representing the bias current value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp2Gm1d_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x21 + 0x0 + (regInstance * 0x1)), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias current setting for the ADC Amplifier 1 high speed
 * GM stage.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An index to specify the particular register instance.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp2Gm1d_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x21 + 0x0 + (regInstance * 0x1)), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias current for ADC Amplifier 2's input GM stage.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the ADC instance (e.g., RX1
 * or RX2).
 * @param regInstance An index for the specific register instance to be
 * modified.
 * @param value The value to set for the bias current, which is a 8-bit unsigned
 * integer.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp2Gm2a_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x22 + 0x0 + (regInstance * 0x1)), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias current setting for ADC Amplifier 2's high gain GM
 * stage.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value indicating which ADC instance to access.
 * @param regInstance An index to specify the register instance for the ADC.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp2Gm2a_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x22 + 0x0 + (regInstance * 0x1)), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias current for ADC Amplifier 2's input GM stage on 1.8V.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance is being
 * configured.
 * @param regInstance An index representing the specific register instance to be
 * modified.
 * @param value The value to set for the bias current, represented as an 8-bit
 * unsigned integer.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp2Gm4a_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x23 + 0x0 + (regInstance * 0x1)), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias current setting for ADC Amplifier 2's input GM
 * stage on 1.8V.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated type indicating which ADC instance (e.g., RX1
 * or RX2) is being accessed.
 * @param regInstance An unsigned integer representing the specific register
 * instance to read from.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp2Gm4a_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x23 + 0x0 + (regInstance * 0x1)), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias current for ADC Amplifier 3's input GM stage.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance is being
 * configured.
 * @param regInstance An index to specify the register instance for the
 * configuration.
 * @param value The value to set for the bias current, represented as an 8-bit
 * unsigned integer.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp3Gm1a_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x25 + 0x0 + (regInstance * 0x1)), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias current for ADC Amplifier 3's input GM stage.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An index to specify the register instance for the ADC.
 * @param value A pointer to a uint8_t variable where the retrieved bias current
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp3Gm1a_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x25 + 0x0 + (regInstance * 0x1)), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias current for ADC Amplifier 3's input GM stage on 1.8V.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance is being
 * configured.
 * @param regInstance An index to specify the register instance for the ADC
 * configuration.
 * @param value The value to set for the bias current, which is a 8-bit unsigned
 * integer.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp3Gm1a1p8_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x26 + 0x0 + (regInstance * 0x1)), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias current for ADC Amplifier 3's input GM stage on
 * 1.8V.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An index to specify the register instance for the ADC.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp3Gm1a1p8_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x26 + 0x0 + (regInstance * 0x1)), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias current for the ADC Amplifier 1 high speed GM stage.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated type indicating which ADC instance to
 * configure.
 * @param regInstance An index representing the specific register instance to be
 * modified.
 * @param value The value to set for the bias current, which is a 8-bit unsigned
 * integer.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp3Gm1d_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x24 + 0x0 + (regInstance * 0x1)), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias current setting for the ADC Amplifier 3 high speed
 * GM stage.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An index to specify the particular register instance.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp3Gm1d_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x24 + 0x0 + (regInstance * 0x1)), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias current for ADC Amplifier 3's input GM stage.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance is being
 * configured.
 * @param regInstance An index for the specific register instance to be
 * modified.
 * @param value The value to set for the bias current, represented as an 8-bit
 * unsigned integer.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp3Gm4a_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x26 + 0x0 + (regInstance * 0x1)), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias current setting for ADC Amplifier 3's midband GM
 * stage.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An index to specify the particular register instance.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasAmp3Gm4a_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x26 + 0x0 + (regInstance * 0x1)), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias DAC amplifier for ADC 1.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., RX1 or RX2).
 * @param value An 8-bit value to set the bias DAC amplifier.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasDacAmp_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x39), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC bias DAC amplifier value from the specified ADC
 * instance.
 *
 * @param device A pointer to the device structure representing the ADC.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., RX1 or RX2).
 * @param value A pointer to a `uint8_t` where the retrieved DAC amplifier value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasDacAmp_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x39), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias current for the op-amp controlling the DAC N-current
 * sink in the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., RX1 or RX2).
 * @param value An 8-bit unsigned integer representing the bias current value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasDacAmpNcurr_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x34), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias current for the op-amp controlling the DAC
 * N-current sink in the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasDacAmpNcurr_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x34), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias current for the op-amp controlling the DAC P-current
 * source in the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., RX1 or RX2).
 * @param value An 8-bit unsigned integer representing the bias current value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasDacAmpPcurr_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x34), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias current for the op-amp controlling the DAC
 * P-current source in the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., RX1 or RX2).
 * @param value A pointer to a `uint8_t` variable where the retrieved bias
 * current value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasDacAmpPcurr_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x34), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias current controlling the DAC cascode transistor voltage
 * in the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value An 8-bit unsigned integer representing the bias current value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasDacBiasPply_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x35), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias DAC voltage for the ADC from the specified device
 * instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., RX1 or RX2).
 * @param value A pointer to a `uint8_t` variable where the retrieved bias DAC
 * voltage will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasDacBiasPply_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x35), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DAC calibration current for the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A uint8_t value representing the calibration current to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasDacIcalPply_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x35), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration current setting for the DAC bias in the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasDacIcalPply_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x35), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ILSB (Least Significant Bit) current for the DAC in the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance (e.g., RX1
 * or RX2) is being configured.
 * @param value An 8-bit unsigned integer representing the ILSB current value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasDacIlsb_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x36), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DAC ILSB bias current setting for the specified ADC
 * instance.
 *
 * @param device A pointer to the device structure representing the ADC.
 * @param instance An enumerated value indicating which ADC instance to access.
 * @param value A pointer to a uint8_t variable where the retrieved ILSB bias
 * current value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasDacIlsb_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x36), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias current for the FLASH in the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance is being
 * configured.
 * @param regInstance An index to specify the register instance for the bias
 * setting.
 * @param value The value to set for the bias current, represented as an 8-bit
 * unsigned integer.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasFlashBias_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c + 0x0 + (regInstance * 0x1)), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias current for the FLASH in the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An index to specify the register instance.
 * @param value A pointer to a uint8_t variable where the retrieved bias value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasFlashBias_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c + 0x0 + (regInstance * 0x1)), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias current for the FLASH reference voltage generator in the
 * ADC.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., RX1 or RX2).
 * @param value An 8-bit unsigned integer representing the bias current value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasFlashRefgen_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x33), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias current setting for the FLASH reference voltage
 * generator in the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., RX1 or RX2).
 * @param value A pointer to a `uint8_t` variable where the retrieved bias
 * current value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasFlashRefgen_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x33), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the programmable 1k reference resistor in the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance to
 * configure.
 * @param regInstance An index to specify the register instance for the
 * operation.
 * @param value The value to set for the programmable reference resistor.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasRcal_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1d + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the programmable 1k reference resistor value from the ADC.
 *
 * @param device A pointer to the device structure representing the ADC.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An index to specify the register instance for the ADC.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasRcal_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1d + 0x0 + (regInstance * 0x1)), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias current for the op-amp controlling the common-mode
 * voltage in the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., RX1 or RX2).
 * @param value An 8-bit unsigned integer representing the bias current value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasVcmAmp_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x38), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC bias voltage for the common-mode voltage amplifier.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., RX1 or RX2).
 * @param value A pointer to a uint8_t variable where the retrieved bias voltage
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasVcmAmp_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x38), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias voltage for the ADC switch transistors.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., RX1 or RX2).
 * @param value An 8-bit unsigned integer representing the bias voltage setting.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasVon_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x37), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC bias voltage for the specified ADC instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., RX1 or RX2).
 * @param value A pointer to a `uint8_t` variable where the retrieved bias
 * voltage value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasVon_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x37), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias voltage for the ADC amplifier.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value An 8-bit unsigned integer representing the bias voltage setting.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasVonAmp_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x37), (value >> 0), 0x18, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias voltage for the ADC amplifier from the specified
 * device.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value indicating which ADC instance to access.
 * @param value A pointer to a `uint8_t` where the retrieved bias voltage will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcBiasVonAmp_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x37), &register_value, 0x18, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a programmable capacitor in the ADC's first stage.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance to
 * configure.
 * @param regInstance An index representing the specific register instance to be
 * modified.
 * @param value The 16-bit value to be set for the programmable capacitor.
 * @return Returns the status of the write operations, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcC1_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa + 0x0 + (regInstance * 0x1)), (value >> 8), 0x7, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x9 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a programmable capacitor in the ADC's first
 * stage.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An index specifying the particular register instance to
 * read from.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operations.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcC1_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa + 0x0 + (regInstance * 0x1)), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x9 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the programmable capacitor in the ADC 2nd stage.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance is being
 * configured.
 * @param regInstance An index representing the specific register instance to be
 * modified.
 * @param value The 16-bit value to be set for the programmable capacitor.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the operations.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcC2_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xb + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the ADC C2 register from the specified ADC
 * instance.
 *
 * @param device A pointer to the device structure representing the ADC.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An index specifying the register instance to read.
 * @param value A pointer to a 16-bit unsigned integer where the read value will
 * be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operations, and the retrieved value is stored in the provided
 * pointer.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcC2_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xb + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a programmable capacitor in the ADC 3rd stage.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance to
 * configure.
 * @param regInstance An index representing the specific register instance to be
 * modified.
 * @param value The value to set for the programmable capacitor, represented as
 * an 8-bit unsigned integer.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcC3_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd + 0x0 + (regInstance * 0x1)), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register in the ADC 3rd stage of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An index specifying the specific register instance to
 * read.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcC3_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd + 0x0 + (regInstance * 0x1)), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the programmable capacitor for capacitively-coupled feedback in
 * the ADC's 3rd stage.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance is being
 * configured.
 * @param regInstance An index representing the specific register instance to be
 * modified.
 * @param value A 16-bit value representing the configuration for the capacitor.
 * @return Returns an integer status code indicating the success or failure of
 * the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcCdfb_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf + 0x0 + (regInstance * 0x1)), (value >> 8), 0xf, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x10 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the programmable capacitor for capacitively-
 * coupled feedback in the ADC's third stage.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An index to specify the register instance for the
 * operation.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcCdfb_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf + 0x0 + (regInstance * 0x1)), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x10 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bypass state for DAC filter resistors in the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., RX1 or RX2).
 * @param value A uint8_t value indicating the bypass state to set (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcDacsBypassRf_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3a), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bypass status of DAC filter resistors in the ADC.
 *
 * @param device A pointer to the device structure representing the ADC.
 * @param instance An enumerated value indicating which ADC instance to access.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcDacsBypassRf_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3a), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Flash Calibration Bias Reference Control for the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., RX1 or RX2).
 * @param value A uint8_t value that sets the bias reference control.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcFlashCalBiasRefCtrl_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2c), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Flash Calibration Bias Reference Control value from the
 * ADC memory map.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., RX1 or RX2).
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcFlashCalBiasRefCtrl_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2c), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Flash Reference Shuffler Control for the ADC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the ADC instance.
 * @param regInstance An index for the specific register instance.
 * @param value A byte value to set for the control.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcFlashEslCtrl_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x12 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Flash ESL control value from the ADC memory map.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An index specifying the register instance to read from.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcFlashEslCtrl_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x12 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Flash-DAC Clock Delay Mode for the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., RX1 or RX2).
 * @param value An 8-bit value representing the delay mode to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcFlashFckDelayMode_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2c), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Flash-DAC Clock Delay Mode setting from the ADC memory
 * map.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., RX1 or RX2).
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcFlashFckDelayMode_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2c), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output of a comparator in the ADC flash memory.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance to
 * configure.
 * @param value A 16-bit value to be written to the comparator's output.
 * @return Returns the status of the write operations, where 0 indicates success
 * and a non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcFlashR_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x29), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x28), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC Flash register value for a specified instance.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., RX1 or RX2).
 * @param value A pointer to a uint16_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcFlashR_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x29), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x28), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the flash reference control for the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance is being
 * configured.
 * @param regInstance An index to specify the register instance for the
 * operation.
 * @param value A byte value to be written to the flash reference control
 * register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcFlashRefCtrl_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x13 + 0x0 + (regInstance * 0x1)), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the control value for the flash reference in the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An index to specify the register instance for the
 * operation.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcFlashRefCtrl_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x13 + 0x0 + (regInstance * 0x1)), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the flash reset mode for the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance to
 * configure.
 * @param value A uint8_t value that determines the reset mode for the ADC
 * flash.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcFlashResetMode_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2c), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC flash reset mode setting from the specified device
 * instance.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., RX1 or RX2).
 * @param value A pointer to a `uint8_t` variable where the retrieved reset mode
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcFlashResetMode_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2c), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output of a comparator in the ADC to 1.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A 16-bit unsigned integer representing the value to be set for
 * the comparator.
 * @return Returns the status of the write operations, where a non-zero value
 * indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcFlashS_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x2b), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x2a), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC Flash S value from the specified device instance.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operations.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcFlashS_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x2b), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x2a), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ILSB current setting in the ADC 3rd stage.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance to
 * configure.
 * @param regInstance An index to specify the register instance for the setting.
 * @param value The value to set for the ILSB current.
 * @return Returns an integer status code indicating success or failure of the
 * operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcI3_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe + 0x0 + (regInstance * 0x1)), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ILSB current setting from the ADC 3rd stage.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An index to specify the particular register instance.
 * @param value A pointer to a uint8_t where the retrieved ILSB current value
 * will be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcI3_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe + 0x0 + (regInstance * 0x1)), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC input resistor selection for gain adjustment.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., ADRV9001_BF_RX1_ADC or ADRV9001_BF_RX2_ADC).
 * @param value A uint8_t value representing the resistor selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcInputAlt_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3b), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the alternate ADC input resistor selection for a specified
 * ADC instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., RX1 or RX2).
 * @param value A pointer to a uint8_t variable where the retrieved resistor
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcInputAlt_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3b), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC input to an open-circuit state.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A uint8_t value that determines the state of the ADC input (0 to
 * open-circuit).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcInputzero_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3b), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the ADC input zero configuration from the
 * device.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance to
 * access.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcInputzero_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3b), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down bias for the ADC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., RX1 or RX2).
 * @param value A uint8_t value indicating the desired power-down state (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcPdBias_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3a), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC power-down bias setting from the specified ADC
 * instance.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., RX1 or RX2).
 * @param value A pointer to a uint8_t variable where the retrieved bias value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcPdBias_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3a), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the powerdown state of the DACs in the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A uint8_t value indicating the desired powerdown state of the
 * DACs.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcPdDacs_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3a), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power-down status of the DACs in the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param value A pointer to a uint8_t variable where the retrieved power-down
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcPdDacs_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3a), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the delay for the DAC powerdown in the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A uint8_t value representing the delay setting for DAC
 * powerdown.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcPdDacsDelay_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3a), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the delay setting for the DAC powerdown in the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param value A pointer to a uint8_t variable where the retrieved delay value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcPdDacsDelay_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3a), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FLASH powerdown state in the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A uint8_t value indicating the desired powerdown state (0 for
 * active, 1 for powerdown).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcPdFlash_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3a), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power-down status of the FLASH in the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A pointer to a uint8_t variable where the retrieved power-down
 * status will be stored.
 * @return Returns the status of the read operation, where a non-zero value
 * indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcPdFlash_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3a), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state of the loop filter in the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A uint8_t value indicating the desired power down state (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcPdLf_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3a), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power-down status of the loop filter in the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A pointer to a uint8_t variable where the retrieved power-down
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcPdLf_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3a), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the programmable input resistor in the ADC 1st stage.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance to
 * configure.
 * @param regInstance An index representing the specific register instance to be
 * modified.
 * @param value A 16-bit value representing the configuration for the input
 * resistor.
 * @return Returns an integer status code indicating success (0) or an error
 * code.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcR1_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x0 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the programmable input resistor in the ADC 1st
 * stage.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An index specifying the particular register instance to
 * read from.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcR1_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1 + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x0 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the programmable alternate setting of the input resistor in the
 * ADC 1st stage.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance to
 * configure.
 * @param regInstance An index representing the specific register instance to
 * modify.
 * @param value A 16-bit value representing the new setting for the input
 * resistor.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the operations performed.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcR1Alt_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x2 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the alternate programmable input resistor value from the ADC
 * 1st stage.
 *
 * @param device A pointer to the device structure representing the ADC.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An index specifying the register instance to read from.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcR1Alt_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3 + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x2 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the programmable resistor in the ADC 2nd stage.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance is being
 * configured.
 * @param regInstance An index for the specific register instance to be set.
 * @param value The 16-bit value to be written to the resistor.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcR2_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x4 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a programmable resistor in the ADC's second
 * stage.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An index specifying the particular register instance to
 * read from.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcR2_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5 + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x4 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the programmable resistor in the ADC 3rd stage.
 *
 * @param device A pointer to the device structure.
 * @param instance An enumerated type indicating the ADC instance.
 * @param regInstance An index for the specific register instance.
 * @param value The 16-bit value to set for the resistor.
 * @return Returns an integer status code indicating success or failure of the
 * operations.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcR3_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x7 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x6 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the ADC resistor R3 from the specified ADC
 * instance.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An index specifying the specific register instance to read
 * from.
 * @param value A pointer to a 16-bit unsigned integer where the read value will
 * be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcR3_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x7 + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x6 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the programmable feedback resistor in the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance to
 * configure.
 * @param regInstance An index representing the specific register instance to be
 * modified.
 * @param value The value to set for the feedback resistor, represented as an
 * 8-bit unsigned integer.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcR4_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x8 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the programmable feedback resistor in the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An index indicating the specific register instance to read
 * from.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcR4_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x8 + 0x0 + (regInstance * 0x1)), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a programmable resistor that sinks ADC input common-mode current.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated type indicating which ADC instance is being
 * configured.
 * @param regInstance An index representing the specific register instance to be
 * modified.
 * @param value The value to set for the programmable resistor.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcRcm_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x11 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a programmable resistor that sinks ADC input
 * common-mode current.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param regInstance An index specifying the particular register instance to
 * read from.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcRcm_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint32_t regInstance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x11 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reset state for the integrator in ADC 1st stage.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A uint8_t value indicating the reset state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcResetInt1_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2c), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reset status of the ADC integrator for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the ADC
 * device.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., RX1 or RX2).
 * @param value A pointer to a uint8_t variable where the retrieved reset status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcResetInt1_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2c), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the digital reset state of the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., RX1 or RX2).
 * @param value A uint8_t value indicating the reset state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcRstDig_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3a), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the digital reset status of the ADC.
 *
 * @param device A pointer to the device structure that represents the ADC.
 * @param instance An enumerated value representing the specific ADC instance.
 * @param value A pointer to a uint8_t variable where the retrieved reset status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcRstDig_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3a), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the spare register value for ADC1 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific ADC instance
 * (e.g., RX1 or RX2).
 * @param value An 8-bit value to be written to the spare register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcSpare_Set(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x3c), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the spare register value from the ADC memory map.
 *
 * @param device A pointer to the device structure representing the ADC.
 * @param instance An enumerator value indicating which ADC instance to access.
 * @param value A pointer to a uint8_t where the retrieved register value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_Adc1MemMap_AdcSpare_Get(void *device,
    adrv9001_BfAdc1MemMap_e instance,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x3c), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


#endif // __ADRV9001_BF_ADC1_MEM_MAP_H__