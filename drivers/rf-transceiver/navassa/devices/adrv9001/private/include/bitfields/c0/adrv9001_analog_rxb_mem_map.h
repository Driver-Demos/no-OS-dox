/**
 * \file
 * \brief BitField accessors for analog_rxb_mem_map
 *
 * Autogenerated with yoda-gen 1.2.0. Do not modify
 *
 * \copyright Copyright (c) 2020 Analog Devices, Inc. All Rights Reserved.
 * This software is proprietary to Analog Devices, Inc. and its licensors.
 */

 #ifndef __ADRV9001_BF_ANALOG_RXB_MEM_MAP_H__
 #define __ADRV9001_BF_ANALOG_RXB_MEM_MAP_H__

#include "adrv9001_bf_hal.h"



/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C1 configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl0_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x1b + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x18 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RXTIA C1 control register value from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to read.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl0_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x1b + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x18 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C1 configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the instance of
 * the register to be modified.
 * @param value A 16-bit unsigned integer containing the value to be written to
 * the register.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl1_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x20 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x1d + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RXTIA C1 control register.
 *
 * @param device A pointer to the device context.
 * @param regInstance An instance identifier for the register.
 * @param value A pointer to a variable where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl1_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x20 + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x1d + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C1 configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer representing the value to be written
 * to the control register.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl2_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x25 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x22 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaC1Ctrl2` register from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to read.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * register value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl2_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x25 + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x22 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C1 configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer representing the value to be written
 * to the control register.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl3_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x2a + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x27 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaC1Ctrl3` register from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to read.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * register value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operation failed.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl3_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x2a + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x27 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C1 configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl4_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x2f + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x2c + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RXTIA C1 control register 4 from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl4_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x2f + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x2c + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C1 configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating success (0) or an error
 * code.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl5_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x34 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x31 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaC1Ctrl5` register from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to read.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * register value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl5_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x34 + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x31 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C1 configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl6_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x39 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x36 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaC1Ctrl6` register from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to read.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * register value will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero). The retrieved value is stored in the location pointed to
 * by the `value` parameter.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl6_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x39 + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x36 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for RXTIA C1 Control 7 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the instance of
 * the register to be modified.
 * @param value A 16-bit unsigned integer representing the value to be written
 * to the control register.
 * @return Returns an integer status code indicating success (0) or an error
 * code.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl7_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x3e + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x3b + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaC1Ctrl7` register from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to read.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * register value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl7_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x3e + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x3b + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C1 configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the instance of
 * the register to be modified.
 * @param value A 16-bit unsigned integer containing the value to be set in the
 * control register.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the operations performed.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl8_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x43 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x40 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RXTIA C1 control register 8 from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to read from.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl8_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x43 + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x40 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C1 configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl9_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x48 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x45 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaC1Ctrl9` register from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to read.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * register value will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1Ctrl9_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x48 + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x45 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C1F control 0 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl0_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x1b + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc, 0x2);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x17 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaC1fCtrl0` register from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to read.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the read operation, which is zero on success or
 * a negative error code on failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl0_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x1b + 0x0 + (regInstance * 0x1)), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x17 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C1F control 1 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the instance of
 * the register to be modified.
 * @param value A 16-bit unsigned integer containing the value to be written to
 * the register.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the operations performed.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl1_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x20 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc, 0x2);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x1c + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaC1fCtrl1` register from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operation failed.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl1_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x20 + 0x0 + (regInstance * 0x1)), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x1c + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C1F control 2 in the ADRV9001
 * analog RXB memory map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the instance of
 * the register to be accessed.
 * @param value A 16-bit unsigned integer representing the value to be written
 * to the control register.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl2_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x25 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc, 0x2);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x21 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaC1fCtrl2` register from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl2_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x25 + 0x0 + (regInstance * 0x1)), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x21 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C1F control 3 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl3_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x2a + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc, 0x2);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x26 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaC1fCtrl3` register from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to read.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * register value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl3_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x2a + 0x0 + (regInstance * 0x1)), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x26 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C1F control 4 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the instance of
 * the register to be modified.
 * @param value A 16-bit unsigned integer containing the value to be written to
 * the control register.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the operations performed.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl4_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x2f + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc, 0x2);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x2b + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RXTIA C1F control register.
 *
 * @param device A pointer to the device context.
 * @param regInstance An instance identifier for the register.
 * @param value A pointer to a variable where the retrieved value will be
 * stored.
 * @return Returns the status of the read operation, with the retrieved value
 * stored in the provided pointer.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl4_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x2f + 0x0 + (regInstance * 0x1)), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x2b + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C1F control 5 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl5_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x34 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc, 0x2);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x30 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaC1fCtrl5` register from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to read.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * register value will be stored.
 * @return Returns the status of the read operation, which is 0 for success or a
 * negative error code.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl5_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x34 + 0x0 + (regInstance * 0x1)), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x30 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C1F control 6 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the operations performed.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl6_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x39 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc, 0x2);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x35 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RXTIA C1F Control 6 register.
 *
 * @param device A pointer to the device context.
 * @param regInstance An instance identifier for the register.
 * @param value A pointer to a `uint16_t` where the retrieved value will be
 * stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl6_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x39 + 0x0 + (regInstance * 0x1)), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x35 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C1F control 7 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl7_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x3e + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc, 0x2);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x3a + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RXTIA C1F control register from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the instance of
 * the register to read from.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl7_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x3e + 0x0 + (regInstance * 0x1)), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x3a + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C1F control 8 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the operations failed.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl8_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x43 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc, 0x2);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x3f + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RXTIA C1F control register 8 from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the instance of
 * the register to access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operation failed.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl8_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x43 + 0x0 + (regInstance * 0x1)), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x3f + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C1F control 9 in the ADRV9001
 * analog RXB memory map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl9_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x48 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc, 0x2);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x44 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaC1fCtrl9` register from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to read.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * register value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC1fCtrl9_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x48 + 0x0 + (regInstance * 0x1)), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x44 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C2 component of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl0_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x1b + 0x0 + (regInstance * 0x1)), (value >> 8), 0x30, 0x4);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x1a + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaC2Ctrl0` register from the specified
 * device instance.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param regInstance An unsigned integer representing the specific instance of
 * the register to access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * register value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operations failed.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl0_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x1b + 0x0 + (regInstance * 0x1)), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x1a + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C2 configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the operations performed.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl1_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x20 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x30, 0x4);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x1f + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaC2Ctrl1` register from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl1_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x20 + 0x0 + (regInstance * 0x1)), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x1f + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C2 configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating success (0) or an error
 * code.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl2_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x25 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x30, 0x4);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x24 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaC2Ctrl2` register from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * register value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operation failed.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl2_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x25 + 0x0 + (regInstance * 0x1)), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x24 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C2 Control 3 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl3_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x2a + 0x0 + (regInstance * 0x1)), (value >> 8), 0x30, 0x4);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x29 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaC2Ctrl3` register from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to read.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * register value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl3_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x2a + 0x0 + (regInstance * 0x1)), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x29 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C2 configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl4_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x2f + 0x0 + (regInstance * 0x1)), (value >> 8), 0x30, 0x4);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x2e + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RXTIA C2 control register 4 from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl4_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x2f + 0x0 + (regInstance * 0x1)), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x2e + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C2 configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the operations performed.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl5_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x34 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x30, 0x4);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x33 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaC2Ctrl5` register from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to read.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * register value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl5_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x34 + 0x0 + (regInstance * 0x1)), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x33 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C2 configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl6_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x39 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x30, 0x4);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x38 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RXTIA C2 control register 6 from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to read.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the read operation, which is zero on success or
 * a negative error code on failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl6_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x39 + 0x0 + (regInstance * 0x1)), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x38 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C2 configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer representing the value to be written
 * to the control register.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl7_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x3e + 0x0 + (regInstance * 0x1)), (value >> 8), 0x30, 0x4);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x3d + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RXTIA C2 control register 7 from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operation failed.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl7_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x3e + 0x0 + (regInstance * 0x1)), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x3d + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C2 configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl8_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x43 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x30, 0x4);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x42 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RXTIA C2 control register from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to read.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero). The retrieved value is stored in the provided pointer.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl8_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x43 + 0x0 + (regInstance * 0x1)), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x42 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C2 control 9 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating success (0) or an error
 * code.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl9_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x48 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x30, 0x4);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x47 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaC2Ctrl9` register from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2Ctrl9_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x48 + 0x0 + (regInstance * 0x1)), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x47 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C2F control 0 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl0_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x1b + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc0, 0x6);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x19 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaC2fCtrl0` register from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the read operation, which is zero on success or
 * a negative error code on failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl0_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x1b + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x19 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C2F control 1 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the operations performed.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl1_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x20 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc0, 0x6);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x1e + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RXTIA C2F control register from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to read from.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl1_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x20 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x1e + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C2F configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl2_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x25 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc0, 0x6);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x23 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaC2fCtrl2` register from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to read.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns a status code indicating success or failure of the read
 * operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl2_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x25 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x23 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C2F control 3 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl3_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x2a + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc0, 0x6);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x28 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RXTIA C2F control register 3 from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl3_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x2a + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x28 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C2F control 4 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the instance of
 * the register to be modified.
 * @param value A 16-bit unsigned integer containing the value to be written to
 * the register.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl4_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x2f + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc0, 0x6);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x2d + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RXTIA C2F control 4 register from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to read.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl4_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x2f + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x2d + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C2F control 5 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl5_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x34 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc0, 0x6);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x32 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaC2fCtrl5` register from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to read.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl5_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x34 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x32 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C2F control 6 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the instance of
 * the register to be modified.
 * @param value A 16-bit unsigned integer containing the value to be written to
 * the register.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl6_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x39 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc0, 0x6);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x37 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RXTIA C2F control register 6 from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operation failed.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl6_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x39 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x37 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C2F control 7 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl7_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x3e + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc0, 0x6);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x3c + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RXTIA C2F control register 7 from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operations failed.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl7_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x3e + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x3c + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RXTIA C2F control register for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the specific instance of
 * the register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the operations performed.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl8_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x43 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc0, 0x6);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x41 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RXTIA C2F control register from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to read from.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operations failed.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl8_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x43 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x41 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA C2F control 9 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the instance of
 * the register to be modified.
 * @param value A 16-bit unsigned integer containing the value to be written to
 * the register.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl9_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x48 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc0, 0x6);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x46 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaC2fCtrl9` register from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to read.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * register value will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero). The retrieved value is stored in the provided pointer.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaC2fCtrl9_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x48 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x46 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA R2 configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer representing the value to be written
 * to the control register.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl0_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x14 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x0 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the control value from the RXTIA R2 control register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the read operation, where a value of 0
 * indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl0_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x14 + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x0 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA R2 configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer containing the value to be written to
 * the control register.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl1_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x14 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc, 0x2);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x2 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the control register value for the RXTIA R2 configuration.
 *
 * @param device A pointer to the device context.
 * @param regInstance An instance identifier for the register.
 * @param value A pointer to a variable where the retrieved value will be
 * stored.
 * @return Returns the status of the read operations, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl1_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x14 + 0x0 + (regInstance * 0x1)), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x2 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA R2 component in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the write operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl2_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x14 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x30, 0x4);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x4 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaR2Ctrl2` register from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl2_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x14 + 0x0 + (regInstance * 0x1)), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x4 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA R2 configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl3_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x14 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc0, 0x6);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x6 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RXTIA R2 control register 3 from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to read.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero). The retrieved value is stored in the provided pointer.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl3_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x14 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x6 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA R2 configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl4_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x15 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x8 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaR2Ctrl4` register from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to read.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * register value will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl4_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x15 + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x8 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA R2 configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the operations failed.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl5_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x15 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc, 0x2);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0xa + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RXTIA control register 5 from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to read.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operations.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl5_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x15 + 0x0 + (regInstance * 0x1)), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0xa + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA R2 component of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl6_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x15 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x30, 0x4);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0xc + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaR2Ctrl6` register from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl6_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x15 + 0x0 + (regInstance * 0x1)), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0xc + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA R2 component in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the instance of
 * the register to be modified.
 * @param value A 16-bit unsigned integer containing the value to be written to
 * the control register.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the operations failed.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl7_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x15 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc0, 0x6);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0xe + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaR2Ctrl7` register from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to read.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * register value will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero). The retrieved value is stored in the variable pointed to
 * by `value`.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl7_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x15 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0xe + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA R2 configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer containing the value to be written to
 * the control register.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the operations failed.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl8_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x16 + 0x0 + (regInstance * 0x1)), (value >> 8), 0xc, 0x2);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x10 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RXTIA R2 control register from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the instance of
 * the register to read.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl8_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x16 + 0x0 + (regInstance * 0x1)), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x10 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RXTIA R2 component in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value A 16-bit unsigned integer value to be written to the control
 * register.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the write operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl9_Set(void *const device,
    uint32_t regInstance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x16 + 0x0 + (regInstance * 0x1)), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x3200 + 0x12 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxtiaR2Ctrl9` register from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * register value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operation failed.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaR2Ctrl9_Get(void *const device,
    uint32_t regInstance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x16 + 0x0 + (regInstance * 0x1)), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x3200 + 0x12 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RXTIA scaling value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value An 8-bit unsigned integer representing the scaling value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling0_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x1 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the scaling value for the RXTIA from the analog RXB memory
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the instance of
 * the register to access.
 * @param value A pointer to an 8-bit unsigned integer where the retrieved
 * scaling value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling0_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x1 + 0x0 + (regInstance * 0x1)), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RXTIA scaling value for a specified register instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the specific
 * register instance to be modified.
 * @param value An 8-bit unsigned integer representing the scaling value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling1_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x3 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the scaling value for the RXTIA from the analog RXB memory
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the instance of
 * the register to access.
 * @param value A pointer to a uint8_t where the retrieved scaling value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling1_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x3 + 0x0 + (regInstance * 0x1)), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the scaling value for the RXTIA (Receive Transmitter Intermediate
 * Amplifier) in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the instance of
 * the register to be modified.
 * @param value An 8-bit unsigned integer representing the scaling value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation, where 0 indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling2_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x5 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the scaling value for the RXTIA from the analog RXB memory
 * map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param regInstance An instance identifier for the register, used to access
 * the correct register in the memory map.
 * @param value A pointer to a `uint8_t` where the retrieved scaling value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling2_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x5 + 0x0 + (regInstance * 0x1)), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the scaling value for the RXTIA (Receive Transmitter Intermediate
 * Amplifier) in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to be modified.
 * @param value An 8-bit unsigned integer representing the scaling value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling3_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x7 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the scaling value for the RXTIA setting from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to access.
 * @param value A pointer to a uint8_t variable where the retrieved scaling
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling3_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x7 + 0x0 + (regInstance * 0x1)), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the scaling value for the RXTIA (Receive Transimpedance
 * Amplifier) in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the instance of
 * the register to be modified.
 * @param value An 8-bit unsigned integer representing the scaling value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling4_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x9 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the scaling value for the RXTIA (Receive Transmitter
 * Intermediate Amplifier) from the specified register.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param regInstance An unsigned 32-bit integer representing the instance of
 * the register to read from.
 * @param value A pointer to an 8-bit unsigned integer where the retrieved
 * scaling value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling4_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x9 + 0x0 + (regInstance * 0x1)), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RXTIA scaling value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the instance of
 * the register to be modified.
 * @param value An 8-bit unsigned integer representing the scaling value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling5_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0xb + 0x0 + (regInstance * 0x1)), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the scaling value for the RXTIA setting from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the instance of
 * the register to read from.
 * @param value A pointer to an 8-bit unsigned integer where the retrieved
 * scaling value will be stored.
 * @return Returns the status of the read operation, where a value of 0
 * indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling5_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0xb + 0x0 + (regInstance * 0x1)), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RXTIA scaling value for a specified register instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the specific
 * register instance to be modified.
 * @param value An 8-bit unsigned integer representing the scaling value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation, where 0 indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling6_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0xd + 0x0 + (regInstance * 0x1)), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the scaling value for the RXTIA setting from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the instance of
 * the register to read from.
 * @param value A pointer to an 8-bit unsigned integer where the retrieved
 * scaling value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling6_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0xd + 0x0 + (regInstance * 0x1)), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RXTIA scaling value for a specified register instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the specific
 * register instance to be modified.
 * @param value An 8-bit unsigned integer representing the scaling value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling7_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0xf + 0x0 + (regInstance * 0x1)), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the scaling value for the RXTIA setting from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the instance of
 * the register to read from.
 * @param value A pointer to an 8-bit unsigned integer where the retrieved
 * scaling value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling7_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0xf + 0x0 + (regInstance * 0x1)), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RXTIA scaling value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the instance of
 * the register to be modified.
 * @param value An 8-bit unsigned integer representing the scaling value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling8_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x11 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RXTIA scaling value from the specified register
 * instance.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param regInstance An unsigned integer representing the specific register
 * instance to read from.
 * @param value A pointer to a uint8_t variable where the retrieved scaling
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling8_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x11 + 0x0 + (regInstance * 0x1)), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RXTIA scaling value for a specified register instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the specific
 * register instance to be modified.
 * @param value An 8-bit unsigned integer representing the scaling value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling9_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x13 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RXTIA scaling value from the specified register
 * instance.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param regInstance An unsigned 32-bit integer representing the specific
 * register instance to read from.
 * @param value A pointer to an 8-bit unsigned integer where the retrieved
 * scaling value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_RxtiaScaling9_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x13 + 0x0 + (regInstance * 0x1)), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Selcc0` field in the analog RXB memory map for
 * a specified device and register instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param regInstance An unsigned 32-bit integer representing the specific
 * register instance to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the `Selcc0` field.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selcc0_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x1 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x3e, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Selcc0` register from the analog RXB
 * memory map.
 *
 * @param device A pointer to the device context used for communication.
 * @param regInstance An instance identifier for the register being accessed.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selcc0_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x1 + 0x0 + (regInstance * 0x1)), &register_value, 0x3e, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Selcc1` register in the analog RXB memory map.
 *
 * @param device A pointer to the device context used for the operation.
 * @param regInstance An instance identifier for the register being accessed.
 * @param value The value to be written to the `Selcc1` register.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selcc1_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x3 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x3e, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the SELCC1 register from the analog RXB memory
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the instance of
 * the register to access.
 * @param value A pointer to an 8-bit unsigned integer where the retrieved
 * register value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selcc1_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x3 + 0x0 + (regInstance * 0x1)), &register_value, 0x3e, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Selcc2` register in the analog RXB memory map.
 *
 * @param device A pointer to the device context.
 * @param regInstance An instance identifier for the register.
 * @param value The value to be written to the `Selcc2` register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selcc2_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x5 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x3e, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the SELCC2 register from the analog RXB memory
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to access.
 * @param value A pointer to a uint8_t where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selcc2_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x5 + 0x0 + (regInstance * 0x1)), &register_value, 0x3e, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Selcc3` register in the analog RXB memory map.
 *
 * @param device A pointer to the device context.
 * @param regInstance An instance identifier for the register.
 * @param value The value to be written to the `Selcc3` register.
 * @return Returns an integer status code indicating success or failure of the
 * write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selcc3_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x7 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x3e, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Selcc3` register from the analog RXB
 * memory map.
 *
 * @param device A pointer to the device context used for communication.
 * @param regInstance An instance identifier for the register being accessed.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selcc3_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x7 + 0x0 + (regInstance * 0x1)), &register_value, 0x3e, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Selcc4` register in the analog RXB memory map.
 *
 * @param device A pointer to the device context.
 * @param regInstance An instance identifier for the register.
 * @param value The value to be written to the `Selcc4` register.
 * @return Returns an integer status code indicating success or failure of the
 * write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selcc4_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x9 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x3e, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the SELCC4 register from the analog RXB memory
 * map.
 *
 * @param device A pointer to the device context used for accessing the
 * hardware.
 * @param regInstance An instance identifier for the register being accessed.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selcc4_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x9 + 0x0 + (regInstance * 0x1)), &register_value, 0x3e, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific register in the ADRV9001 analog RXB
 * memory map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the instance of
 * the register to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selcc5_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0xb + 0x0 + (regInstance * 0x1)), (value >> 0), 0x3e, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the SELCC5 register from the analog RXB memory
 * map.
 *
 * @param device A pointer to the device context used for accessing the
 * hardware.
 * @param regInstance An instance identifier for the register being accessed.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selcc5_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0xb + 0x0 + (regInstance * 0x1)), &register_value, 0x3e, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Selcc6` register in the analog RXB memory map.
 *
 * @param device A pointer to the device context.
 * @param regInstance An instance identifier for the register.
 * @param value The value to be written to the `Selcc6` register.
 * @return Returns an integer status code indicating success or failure of the
 * write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selcc6_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0xd + 0x0 + (regInstance * 0x1)), (value >> 0), 0x3e, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the SELCC6 register from the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to access.
 * @param value A pointer to a uint8_t where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selcc6_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0xd + 0x0 + (regInstance * 0x1)), &register_value, 0x3e, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Selcc7` register in the analog RXB memory map.
 *
 * @param device A pointer to the device context.
 * @param regInstance An instance identifier for the register.
 * @param value The value to be written to the `Selcc7` register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selcc7_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0xf + 0x0 + (regInstance * 0x1)), (value >> 0), 0x3e, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Selcc7` register from the analog RXB
 * memory map.
 *
 * @param device A pointer to the device context used for communication.
 * @param regInstance An instance identifier for the register being accessed.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selcc7_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0xf + 0x0 + (regInstance * 0x1)), &register_value, 0x3e, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Selcc8` field in the analog RXB memory map.
 *
 * @param device A pointer to the device context used for the operation.
 * @param regInstance An instance identifier for the register being accessed.
 * @param value The value to be written to the `Selcc8` field.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selcc8_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x11 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x3e, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the SELCC8 register from the analog RXB memory
 * map.
 *
 * @param device A pointer to the device context.
 * @param regInstance An instance identifier for the register.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selcc8_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x11 + 0x0 + (regInstance * 0x1)), &register_value, 0x3e, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Selcc9` field in the analog RXB memory map.
 *
 * @param device A pointer to the device context.
 * @param regInstance An instance identifier for the register.
 * @param value The value to set for the `Selcc9` field.
 * @return Returns an integer status code indicating success or failure of the
 * operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selcc9_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x13 + 0x0 + (regInstance * 0x1)), (value >> 0), 0x3e, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to access.
 * @param value A pointer to a byte where the retrieved register value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selcc9_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x13 + 0x0 + (regInstance * 0x1)), &register_value, 0x3e, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Selrz0` register in the analog RXB memory map.
 *
 * @param device A pointer to the device context.
 * @param regInstance An instance identifier for the register.
 * @param value The value to be written to the `Selrz0` register.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selrz0_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x1 + 0x0 + (regInstance * 0x1)), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Selrz0` register from the analog RXB
 * memory map.
 *
 * @param device A pointer to the device context used for communication.
 * @param regInstance An instance identifier for the register being accessed.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selrz0_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x1 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Selrz1` register in the analog RXB memory map.
 *
 * @param device A pointer to the device context.
 * @param regInstance An instance identifier for the register.
 * @param value The value to be written to the `Selrz1` register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selrz1_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x3 + 0x0 + (regInstance * 0x1)), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Selrz1` register from the analog RXB
 * memory map.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param regInstance An unsigned 32-bit integer representing the instance of
 * the register to access.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selrz1_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x3 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Selrz2` register in the analog RXB memory map.
 *
 * @param device A pointer to the device context.
 * @param regInstance An instance identifier for the register.
 * @param value The value to be written to the `Selrz2` register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selrz2_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x5 + 0x0 + (regInstance * 0x1)), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Selrz2` register from the analog RXB
 * memory map.
 *
 * @param device A pointer to the device context used for communication.
 * @param regInstance An index indicating which instance of the register to
 * access.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selrz2_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x5 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Selrz3` register in the analog RXB memory map.
 *
 * @param device A pointer to the device context.
 * @param regInstance An instance identifier for the register.
 * @param value The value to be written to the `Selrz3` register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selrz3_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x7 + 0x0 + (regInstance * 0x1)), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Selrz3` register from the analog RXB
 * memory map.
 *
 * @param device A pointer to the device context used for communication.
 * @param regInstance An instance identifier for the register being accessed.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selrz3_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x7 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Selrz4` register in the analog RXB memory map.
 *
 * @param device A pointer to the device context.
 * @param regInstance An instance identifier for the register.
 * @param value The value to be written to the `Selrz4` register.
 * @return Returns an integer status code indicating success or failure of the
 * write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selrz4_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x9 + 0x0 + (regInstance * 0x1)), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the analog RXB memory
 * map.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param regInstance An unsigned integer representing the specific instance of
 * the register to access.
 * @param value A pointer to a byte where the retrieved register value will be
 * stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selrz4_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x9 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific register in the analog RXB memory map for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the instance of
 * the register to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selrz5_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0xb + 0x0 + (regInstance * 0x1)), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Selrz5` register from the analog RXB
 * memory map.
 *
 * @param device A pointer to the device context used for communication.
 * @param regInstance An instance identifier for the register being accessed.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selrz5_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0xb + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific register in the analog RXB memory map for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the instance of
 * the register to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selrz6_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0xd + 0x0 + (regInstance * 0x1)), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the analog RXB memory
 * map.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to access.
 * @param value A pointer to a byte where the retrieved register value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selrz6_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0xd + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific register in the analog RXB memory map for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the instance of
 * the register to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selrz7_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0xf + 0x0 + (regInstance * 0x1)), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Selrz7` register from the analog RXB
 * memory map.
 *
 * @param device A pointer to the device context used for accessing the
 * hardware.
 * @param regInstance An unsigned integer representing the specific instance of
 * the register to access.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selrz7_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0xf + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific register in the analog RXB memory map.
 *
 * @param device A pointer to the device context.
 * @param regInstance An index representing the specific register instance to be
 * modified.
 * @param value The 8-bit value to be written to the specified register.
 * @return Returns an integer status code indicating success or failure of the
 * write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selrz8_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x11 + 0x0 + (regInstance * 0x1)), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the analog RXB memory
 * map.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selrz8_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x11 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific register in the analog RXB memory map for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param regInstance An unsigned 32-bit integer representing the instance of
 * the register to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selrz9_Set(void *const device,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x3200 + 0x13 + 0x0 + (regInstance * 0x1)), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the analog RXB memory
 * map.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param regInstance An unsigned integer representing the instance of the
 * register to access.
 * @param value A pointer to a byte where the retrieved register value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_AnalogRxbMemMap_Selrz9_Get(void *const device,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x3200 + 0x13 + 0x0 + (regInstance * 0x1)), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


#endif // __ADRV9001_BF_ANALOG_RXB_MEM_MAP_H__