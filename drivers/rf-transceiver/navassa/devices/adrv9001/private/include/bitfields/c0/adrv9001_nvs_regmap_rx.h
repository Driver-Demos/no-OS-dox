/**
 * \file
 * \brief BitField accessors for nvs_regmap_rx
 *
 * Autogenerated with yoda-gen 1.2.0. Do not modify
 *
 * \copyright Copyright (c) 2020 Analog Devices, Inc. All Rights Reserved.
 * This software is proprietary to Analog Devices, Inc. and its licensors.
 */

 #ifndef __ADRV9001_BF_NVS_REGMAP_RX_H__
 #define __ADRV9001_BF_NVS_REGMAP_RX_H__

#include "adrv9001_bf_hal.h"

/***************************************************************************//**
 * @brief The `adrv9001_BfNvsRegmapRx_e` is an enumeration that defines symbolic
 * names for the core register map addresses of RX1 and RX2 in the
 * ADRV9001 device. These enumerators provide a convenient way to
 * reference specific register addresses associated with the RX1 and RX2
 * cores, facilitating easier and more readable code when working with
 * the device's register map.
 *
 * @param ADRV9001_BF_RX1_CORE Represents the core register map address for RX1,
 * with a value of 0xe00.
 * @param ADRV9001_BF_RX2_CORE Represents the core register map address for RX2,
 * with a value of 0x1200.
 ******************************************************************************/
typedef enum adrv9001_BfNvsRegmapRx_e
{
    ADRV9001_BF_RX1_CORE    =   0xe00,
    ADRV9001_BF_RX2_CORE    =   0x1200
} adrv9001_BfNvsRegmapRx_e;

/***************************************************************************//**
 * @brief The `nvsRegmapRxInstances` is a static constant array of type
 * `adrv9001_BfNvsRegmapRx_e`, which is an enumeration representing
 * different NVS register map instances for the RX cores in the ADRV9001
 * device. It contains two elements, `ADRV9001_BF_RX1_CORE` and
 * `ADRV9001_BF_RX2_CORE`, which likely correspond to the first and
 * second RX core register maps, respectively.
 *
 * @details This variable is used to reference the specific NVS register map
 * instances for RX cores in the ADRV9001 device.
 ******************************************************************************/
static const adrv9001_BfNvsRegmapRx_e nvsRegmapRxInstances[] = {
    ADRV9001_BF_RX1_CORE,
    ADRV9001_BF_RX2_CORE
};

/***************************************************************************//**
 * @brief Sets the RC Drive I Zero Selection field in the RX NVS register map
 * for the specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A uint8_t value that specifies the new setting for the RC Drive
 * I Zero Selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RCDriveIZeroSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xdc), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RCDriveIZeroSel field from a specific
 * register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * register map to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RCDriveIZeroSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xdc), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Q drive zero selection value in the RX register map for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A 8-bit unsigned integer representing the value to be set for
 * the Q drive zero selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RCDriveQZeroSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xdc), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RCDriveQZeroSel field from a specified
 * register and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RCDriveQZeroSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xdc), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RC drive selection for a specified instance in the ADRV9001
 * NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for which the RC drive selection is being
 * set.
 * @param value A uint8_t value representing the RC drive selection to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RCDriveSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x172), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RC drive selection value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RCDriveSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x172), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RKCaptureI selection value in the NVS register map for the
 * specified instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 8-bit unsigned integer representing the value to be set in the
 * RKCaptureI selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RKCaptureISel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x171), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RKCaptureISel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x171), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the 16-bit IQ capture selection for the RX register map in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the IQ capture selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RKCaptureIq16bitSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x171), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 16-bit IQ capture selection value from a specific register
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RKCaptureIq16bitSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x171), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC capture sample selection in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value A uint8_t value that specifies the sample selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AdcCaptSampleSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d9), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC capture sample selection value from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved sample
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AdcCaptSampleSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d9), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC capture current selection for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value An 8-bit unsigned integer representing the desired ADC capture
 * current selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AdcCaptureISel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d9), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC capture current selection value from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved ADC capture
 * current selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AdcCaptureISel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d9), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC capture enable register for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * ADC capture.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AdcCaptureEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d9), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC capture enable status from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved ADC capture
 * enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AdcCaptureEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d9), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC clock enable state in the ADRV9001 receiver register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver register map.
 * @param value A uint8_t value indicating the desired state of the ADC clock
 * enable (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AdcClockEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x170), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC clock enable status from the specified register for
 * a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved ADC clock
 * enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AdcClockEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x170), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC demultiplexer clock enable register for a specified
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX demux register.
 * @param value A uint8_t value indicating the clock enable state to be set (0
 * or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AdcDemuxClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1e7), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC demultiplexer clock enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * ADC demux.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AdcDemuxClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1e7), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC overload reset enable configuration in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value A uint8_t value indicating the desired state for the ADC
 * overload reset enable.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AdcOverloadResetEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1eb), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC overload reset enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AdcOverloadResetEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1eb), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC sample delay for a specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value An 8-bit unsigned integer representing the sample delay value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AdcRxSampleDelay_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3f), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC sample delay value from a specified register for a
 * given device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type indicating the specific instance of the
 * NVS register map for which the ADC sample delay is being
 * retrieved.
 * @param value A pointer to a uint8_t variable where the retrieved ADC sample
 * delay value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AdcRxSampleDelay_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3f), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC enable field in the RX register map for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value A uint8_t value indicating the AGC enable state to set (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AgcEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x175), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC enable status from the specified register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX AGC register.
 * @param value A pointer to a uint8_t variable where the retrieved AGC enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AgcEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x175), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the RX algorithm register of the ADRV9001
 * device without using a global reset.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX algorithm register.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AlgNbdemDPinFIFODontUseGlobalReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd5), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AlgNbdemDPinFIFODontUseGlobalReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd5), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software reset for the NBDem FIFO in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the reset state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AlgNbdemDPinFIFOSwReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd5), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AlgNbdemDPinFIFOSwReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd5), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the NVS register map for the RX algorithm
 * without using a global reset.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX algorithm.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AlgNbdemDpDontUseGlobalReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd5), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AlgNbdemDpDontUseGlobalReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd5), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software reset value for the NBDemodulator in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the reset field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AlgNbdemDpSwReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd5), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the software reset status of the NBDem digital processing
 * block from the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX algorithm.
 * @param value A pointer to a uint8_t variable where the retrieved reset status
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AlgNbdemDpSwReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd5), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the RX algorithm register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX algorithm register.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AlgNbdemRxpfir52DontUseGlobalReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd5), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AlgNbdemRxpfir52DontUseGlobalReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd5), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software reset for the NBDem RX PFIR 52 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX algorithm.
 * @param value A 8-bit unsigned integer that indicates the reset value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AlgNbdemRxpfir52SwReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd5), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the software reset status of the `NbdemRxpfir52` register
 * from the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to be accessed.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AlgNbdemRxpfir52SwReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd5), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the NVS register map for the RX algorithm
 * without using a global reset.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX algorithm.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AlgNbficDontUseGlobalReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x15e), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AlgNbficDontUseGlobalReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x15e), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the RX channel register of the ADRV9001
 * device without using a global reset.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX channel
 * instance to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AlgRxChFuncsDontUseGlobalReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x164), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AlgRxChFuncsDontUseGlobalReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x164), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI slicer configuration in the ADRV9001 device without
 * using the global reset.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX algorithm.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RSSI slicer configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AlgSlicerRssiDontUseGlobalReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x164), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI value from a specific register in the ADRV9001
 * device without using a global reset.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map for the RX algorithm.
 * @param value A pointer to a uint8_t variable where the retrieved RSSI value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AlgSlicerRssiDontUseGlobalReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x164), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX enable state for a specified instance in the ADRV9001 NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * be configured.
 * @param value A uint8_t value indicating the enable state to be set (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AllRxEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3c), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RX enable status from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific RX instance to
 * read from.
 * @param value A pointer to a uint8_t variable where the retrieved RX enable
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AllRxEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3c), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI clock enable state in the RX analog register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A uint8_t value indicating the desired state of the LSSI clock
 * enable (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AnaLssiClkEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1cf), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI clock enable status from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AnaLssiClkEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1cf), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the analog spare register for the RX NVS of the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX NVS register
 * instance to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the specified register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AnalogSpare_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x15f), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the analog spare register value from the RX NVS register
 * map.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_AnalogSpare_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x15f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the RX Arm or Group 1184 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value A uint8_t value representing the clock selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_ArmOrGroup1184ClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ec), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map for the RX path.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_ArmOrGroup1184ClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ec), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBDC enable state in the RX NVS register map for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A uint8_t value that indicates the BBDC enable state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_BbdcEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x175), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBDC enable status from the RX register map of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A pointer to a uint8_t variable where the retrieved BBDC enable
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_BbdcEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x175), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output buffer enable state for the RX clock generator in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance for
 * which the output buffer is being configured.
 * @param value A uint8_t value indicating the desired state of the output
 * buffer (enabled or disabled).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_ClkgenOutputBufferEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x161), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the output buffer enable status from the clock generator
 * register for a specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_ClkgenOutputBufferEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x161), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output multiplexer selection for the RX control register in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance for
 * which the control output multiplexer is being set.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the control output multiplexer.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_ControlOutMuxSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x173), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the control output multiplexer selection value from a
 * specific register for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_ControlOutMuxSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x173), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the correction control register for the RX path of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value A 16-bit value to be written to the correction control
 * registers.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CorrCtrl_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x9f), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x9e), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the correction control value from the RX register map for a
 * specified instance.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific RX instance to
 * read from.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, where a non-
 * zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CorrCtrl_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x9f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x9e), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CSSI RX clock enable field in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value indicating the desired state (enabled or
 * disabled) for the CSSI RX clock.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxClkEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the CSSI RX clock enable register for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX register.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxClkEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CSSI RX data format in the ADRV9001 device's NVS register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value representing the data format to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxDataFormat_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0x6, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CSSI RX data format from the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * RX register to read.
 * @param value A pointer to a uint8_t variable where the retrieved data format
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxDataFormat_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0x6, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CSSI RX data format for four lanes in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer representing the data format value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxDataFormatFourLanes_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the CSSI RX data
 * format for four lanes from the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxDataFormatFourLanes_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DDR clock inversion configuration for the specified instance
 * of the RX CSSI register map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX CSSI register map.
 * @param value A uint8_t value indicating the desired clock inversion setting.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxDdrClkInv_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DDR clock inversion setting from a specific register for
 * a given instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for which the DDR clock inversion setting is
 * being retrieved.
 * @param value A pointer to a uint8_t variable where the retrieved DDR clock
 * inversion value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxDdrClkInv_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DDR positive clock selection for the specified instance in
 * the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for which the clock selection is being set.
 * @param value An 8-bit unsigned integer representing the desired clock
 * selection value.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxDdrPosClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DDR positive clock selection value from a specific
 * register for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxDdrPosClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DDR selection for the CSSI receiver in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that specifies the DDR selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxDdrSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DDR selection value from a specific register for a given
 * instance of the RX NVS register map.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved DDR
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxDdrSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a debug error value in the RX CSSI register map for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer representing the error value to be
 * injected.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxDebugInjectError_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the debug error injection value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxDebugInjectError_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the debug load value for the CSSI receiver in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the debug load value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxDebugLoad_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a debug load value from a specific register for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxDebugLoad_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the 4-bit debug load mode for the CSSI RX in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the debug load mode.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxDebugLoad4bitsMode_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 4-bit debug load value from a specific register for the
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxDebugLoad4bitsMode_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the debug load value for the CSSI RX register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the debug load register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxDebugLoadValue_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a debug load value from a specific register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxDebugLoadValue_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the debug mode for the CSSI RX in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value that indicates the debug mode to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxDebugMode_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the debug mode value from the RX CSSI register for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific RX instance to
 * read from.
 * @param value A pointer to a uint8_t variable where the retrieved debug mode
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxDebugMode_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the debug nibble selection for the CSSI RX in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the debug nibble selection.
 * @return Returns the status of the write operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxDebugNibbleSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2), (value >> 0), 0x60, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific debug nibble value from a register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A pointer to a uint8_t variable where the retrieved debug nibble
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxDebugNibbleSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2), &register_value, 0x60, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the debug queue selection for the CSSI receiver in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the debug queue selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxDebugQSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the debug queue selection value from a specified register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxDebugQSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the debug start ramp value in the RX CSSI register map for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX CSSI register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxDebugStartRamp_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific debug register value from the ADRV9001 device and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxDebugStartRamp_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the debug start shift value in the RX CSSI register map for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the debug start shift.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxDebugStartShift_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the debug start shift value from a specific register for the
 * given instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxDebugStartShift_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CSSI RX enable field in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value indicating the desired state to set for the CSSI
 * RX enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CSSI RX enable status from a specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX register.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the force data valid state for the CSSI RX in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX.
 * @param value A uint8_t value that indicates the force data valid state to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxForceDataValid_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the forced data valid status from the CSSI RX register of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value A pointer to a uint8_t variable where the retrieved data valid
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxForceDataValid_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CSSI RX Invert Clock configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A 8-bit unsigned integer that specifies the value to set for the
 * RX Invert Clock.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxInvertClk_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the inverted clock value from a specific register for the
 * given instance of the receiver.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved inverted
 * clock value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxInvertClk_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the long strobe value for the CSSI RX register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the long strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxLongStrobe_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the long strobe value from the RX register map for a
 * specified instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific RX instance to
 * read from.
 * @param value A pointer to a uint8_t variable where the retrieved long strobe
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxLongStrobe_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the loopback configuration for the RX path in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value A 8-bit value that specifies the loopback configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxLoopbackFromTx_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the loopback configuration value from the RX register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * read from.
 * @param value A pointer to a uint8_t variable where the retrieved loopback
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxLoopbackFromTx_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the least significant bit first configuration for the CSSI
 * receiver in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxLsbFirst_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the least significant byte from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved least
 * significant byte will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxLsbFirst_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the first value of the CSSI RX queue in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxQFirst_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the first value from the CSSI RX queue register for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX register.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxQFirst_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CSSI RX strobe enable field in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value that indicates the strobe enable state to be set
 * (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxStrobeEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1e5), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the CSSI RX strobe enable register for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX register.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_CssiRxStrobeEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1e5), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the data capture drive enable configuration for a specified
 * instance of the ADRV9001 receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the desired state for the data
 * capture drive enable.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DataCaptureDriveEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x172), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the data capture drive enable status from a specific
 * register for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DataCaptureDriveEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x172), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DDC LO sync enable value in the ADRV9001 receiver register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver register map.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DdcLoSyncEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x176), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DDC low synchronization enable value from a specific
 * register for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DdcLoSyncEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x176), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the digital gain compensation offset for a specified instance in
 * the ADRV9001 register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map for which the digital gain compensation offset
 * is being set.
 * @param value An 8-bit unsigned integer representing the digital gain
 * compensation offset value to be written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DigGainCompOffset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x16d), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the digital gain compensation offset from a specific
 * register for a given instance.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DigGainCompOffset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x16d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the digital gain delay for a specified instance in the ADRV9001
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map for which the digital gain delay is being set.
 * @param value An 8-bit unsigned integer representing the digital gain delay
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DigitalGainDelay_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x166), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the digital gain delay value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved digital gain
 * delay value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DigitalGainDelay_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x166), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the digital gain enable field in the RX register map of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value A uint8_t value that indicates the digital gain enable state (0
 * or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DigitalGainEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x167), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the digital gain enable status from the ADRV9001 receiver
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved digital gain
 * enable value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DigitalGainEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x167), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific parameter in the NVS register map for the RX instance
 * of the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance in
 * the NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DparmSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9d), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DparmSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9d), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DPINFIFO clear register for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value to be written to the DPINFIFO clear register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DpinfifoClear_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xac), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value from a specific register in the ADRV9001 device
 * and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated type indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DpinfifoClear_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xac), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the detected value in the DPIN FIFO register for a specified
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the DPIN FIFO detected register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DpinfifoDetected_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xac), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the detected value from the DPINFIFO register for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DpinfifoDetected_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xac), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the differential absolute configuration for the Rx DPINFIFO in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Rx.
 * @param value A 16-bit unsigned integer representing the configuration value
 * to be set.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DpinfifoDiffabsConfig_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xb7), (value >> 8), 0x7, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xb6), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the differential absolute configuration value from the RX
 * DPINFIFO register map.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * configuration value will be stored.
 * @return Returns the status of the read operations, with the retrieved
 * configuration value stored in the provided `value` pointer.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DpinfifoDiffabsConfig_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xb7), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xb6), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the differential absolute update value in the RX DPINFIFO
 * register of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register update operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DpinfifoDiffabsUpdate_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xb7), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the differential absolute update value from the RX DPINFIFO
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DpinfifoDiffabsUpdate_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xb7), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the differential baseband configuration for the RX DPIN FIFO in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A 16-bit unsigned integer representing the configuration value
 * to be set.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DpinfifoDiffbpConfig_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xb9), (value >> 8), 0x7, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xb8), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the differential baseband configuration value from the RX
 * DPINFIFO register map.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * configuration value will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DpinfifoDiffbpConfig_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xb9), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xb8), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the differential baseband update value in the RX DPINFIFO
 * register for the specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register update operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DpinfifoDiffbpUpdate_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xb9), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and updates the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DpinfifoDiffbpUpdate_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xb9), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DPINFIFO enable state in the ADRV9001 receiver register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver register map.
 * @param value A uint8_t value indicating the desired enable state for the
 * DPINFIFO.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DpinfifoEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xac), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the DPINFIFO enable field from a specific
 * register for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DpinfifoEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xac), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the read address offset for the DPIN FIFO in the ADRV9001 NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value An 8-bit unsigned integer representing the value to be set as
 * the read address offset.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DpinfifoRdAddrOffset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xb5), (value >> 0), 0xe0, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the read address offset from the DPINFIFO register for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved address
 * offset will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DpinfifoRdAddrOffset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xb5), &register_value, 0xe0, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the start/stop configuration for the DPIN FIFO in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value A uint8_t value that specifies the start/stop configuration to
 * be written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DpinfifoRdStartstop_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xac), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DpinfifoRdStartstop_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xac), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the test data value in the DPINFIFO register for a specified
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the test data value to be
 * set in the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DpinfifoTestDataUpdate_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xb5), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves and updates a test data value from a specific register in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DpinfifoTestDataUpdate_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xb5), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the test data for the DPIN FIFO in the ADRV9001 device's RX
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A 32-bit unsigned integer containing the test data to be set in
 * the DPIN FIFO.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DpinfifoTestdataI_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xb0), (value >> 24), 0x7f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xaf), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xae), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xad), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves test data from the DPIN FIFO register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved test
 * data will be stored.
 * @return Returns the status of the last read operation, with a value of 0
 * indicating success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DpinfifoTestdataI_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xb0), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xaf), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xae), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xad), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the test data for the DPIN FIFO in the ADRV9001 device's RX
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated type representing the specific instance of the
 * RX register map.
 * @param value A 32-bit unsigned integer containing the test data to be written
 * to the DPIN FIFO.
 * @return Returns the status of the last write operation, which indicates
 * success (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DpinfifoTestdataQ_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xb4), (value >> 24), 0x7f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xb3), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xb2), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xb1), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves test data from the DPIN FIFO register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved test
 * data will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DpinfifoTestdataQ_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xb4), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xb3), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xb2), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xb1), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the test data selection for the DPIN FIFO in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer representing the test data selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DpinfifoTestdataSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xb5), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific test data selection value from the RX DPINFIFO
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX register.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DpinfifoTestdataSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xb5), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the start/stop configuration for the DPIN FIFO in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value that indicates the start/stop configuration to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DpinfifoWrStartstop_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xac), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated type indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_DpinfifoWrStartstop_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xac), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the external LNA digital gain delay for a specified instance in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A 16-bit unsigned integer representing the digital gain delay
 * value to be set.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_ExtLnaDigitalGainDelay_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x16c), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x16b), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the digital gain delay value from the external LNA register
 * of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * digital gain delay value will be stored.
 * @return Returns the status of the read operations, indicating success (0) or
 * an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_ExtLnaDigitalGainDelay_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x16c), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x16b), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the observation capture enable value for the RX QEC in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * observation capture.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_ExtlpbkRxqecObsCaptEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x174), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the observed capture enable status from the RX QEC register
 * for a specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_ExtlpbkRxqecObsCaptEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x174), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the frequency domain input selection for a specified instance in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_FdInSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xba), (value >> 0), 0xe0, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the frequency domain input selection value from the ADRV9001
 * device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A pointer to a uint8_t variable where the retrieved frequency
 * domain input selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_FdInSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xba), &register_value, 0xe0, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the frequency domain mode selection for the receiver in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver register.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_FdModeSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xba), (value >> 0), 0x18, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the field mode selection value from the RX register map of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A pointer to a uint8_t variable where the retrieved field mode
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_FdModeSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xba), &register_value, 0x18, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `Fdmax1` field in the RX register map of the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A 32-bit unsigned integer value to be written to the register
 * fields.
 * @return Returns the status of the last write operation, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Fdmax1_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xbd), (value >> 16), 0x3f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xbc), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xbb), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the `Fdmax1` value from the specified register map instance
 * of the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map to read from.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * `Fdmax1` value will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Fdmax1_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xbd), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xbc), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xbb), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `Fdmax2` register values for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A 32-bit unsigned integer containing the value to be written to
 * the registers.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any of the write operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Fdmax2_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc0), (value >> 16), 0x3f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xbf), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xbe), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the `Fdmax2` value from the RX register map of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * `Fdmax2` value will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Fdmax2_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc0), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xbf), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xbe), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FIC observation capture enable field in the ADRV9001 receiver
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver register map.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * FIC observation capture.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_FicObsCaptEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x174), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided pointer.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_FicObsCaptEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x174), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the flash clock enable state in the RX register map of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A uint8_t value indicating the desired state of the flash clock
 * enable (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_FlashClkEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf7), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the flash clock enable status from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_FlashClkEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf7), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ARM clock configuration for a specified instance in the
 * ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for which the clock setting is to be
 * applied.
 * @param value A 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_ForceArmClkOnArmOrGroup1184ClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ec), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_ForceArmClkOnArmOrGroup1184ClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ec), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the digital gain strobe for a specified instance in the ADRV9001
 * receiver register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the digital gain strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_ForceDigGainStrobe_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x168), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the digital gain strobe value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved digital gain
 * strobe value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_ForceDigGainStrobe_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x168), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific clock selection value in the ADRV9001 NVS register map
 * for RX group 1.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_ForceGroup1ClkOnArmOrGroup1184ClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ec), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific clock selection value from a register for a given
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_ForceGroup1ClkOnArmOrGroup1184ClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ec), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain change ramp step duration in the ADRV9001 receiver
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver register map.
 * @param value An 8-bit unsigned integer representing the desired gain change
 * ramp step duration.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_GainChangeRampStepDuration_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x168), (value >> 0), 0x18, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain change ramp step duration from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_GainChangeRampStepDuration_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x168), &register_value, 0x18, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain change ramp steps for the RX NVS register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register for which the gain change ramp steps are being
 * set.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the gain change ramp steps.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_GainChangeRampSteps_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x168), (value >> 0), 0x6, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain change ramp steps value from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX.
 * @param value A pointer to a uint8_t variable where the retrieved gain change
 * ramp steps value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_GainChangeRampSteps_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x168), &register_value, 0x6, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain compensation for a dual-band receiver in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * receiver configuration.
 * @param value An 8-bit unsigned integer representing the gain compensation
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_GainCompDualbandCommon_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x16a), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain compensation value from a specific register for a
 * dual-band receiver.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved gain
 * compensation value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_GainCompDualbandCommon_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x16a), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain compensation for external gain in the ADRV9001 receiver
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver register map.
 * @param value An 8-bit unsigned integer representing the gain compensation
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_GainCompForExtGain_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x16a), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain compensation value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved gain
 * compensation value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_GainCompForExtGain_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x16a), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain compensation for temperature in the RX register map of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer representing the gain compensation
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_GainCompForTempGain_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x16a), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain compensation value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved gain
 * compensation value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_GainCompForTempGain_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x16a), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the HD2 observation capture enable state in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the desired state to set for the HD2
 * observation capture (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Hd2ObsCaptEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x174), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the HD2 observation capture enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Hd2ObsCaptEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x174), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the internal delay configuration for the RX path of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * internal delay.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_IntDelay0Enable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x178), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RX internal delay 0 enable register for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX register.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_IntDelay0Enable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x178), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the internal delay configuration for the RX path of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value An 8-bit integer representing the delay value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_IntDelay1Enable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x178), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the internal delay 1 enable status from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_IntDelay1Enable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x178), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX or TX enable state in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX or TX
 * instance to configure.
 * @param value A uint8_t value indicating the enable state (0 or 1) to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_IntOrxEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x178), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RX interrupt or RX enable status from a specific
 * register.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value indicating the specific RX instance to
 * read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_IntOrxEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x178), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX enable field in the NVS register map for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value that indicates the desired state to set for the
 * RX enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_IntRxEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x178), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RX enable status from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * read from.
 * @param value A pointer to a uint8_t variable where the retrieved RX enable
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_IntRxEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x178), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the internal loopback RX QEC observation capture enable value in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance in
 * the NVS register map.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * observation capture.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_IntlpbkRxqecObsCaptEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x174), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_IntlpbkRxqecObsCaptEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x174), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX clock enable field in the ADRV9001 register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value indicating the desired state (enabled or
 * disabled) for the LSSI RX clock.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxClkEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x18), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI RX clock enable status from a specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX register.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxClkEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x18), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX clock inversion configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value representing the clock inversion setting to be
 * applied.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxClkInversion_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x13), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI RX clock inversion setting from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * inversion value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxClkInversion_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x13), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the 12-bit LSSI RX data format in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A 8-bit unsigned integer representing the value to be set in the
 * register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxDataFormat12bit_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 12-bit data format value from a specific register for the
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxDataFormat12bit_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX data for one lane in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxDataOneLane_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific LSSI RX data value from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxDataOneLane_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a debug error value in the LSSI RX debug register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX.
 * @param value A 8-bit unsigned integer representing the error value to be
 * injected into the debug register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation to the register.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxDebugInjectError_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x14), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI RX debug inject error value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxDebugInjectError_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x14), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX debug load value in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the debug load register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxDebugLoad_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x14), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a debug load value from a specific register for the LSSI RX
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific LSSI RX
 * instance.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxDebugLoad_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x14), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the debug load value for the LSSI RX by writing to specific
 * registers.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the value to be loaded
 * into the debug registers.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxDebugLoadValue_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x16), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x15), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 16-bit debug load value from two consecutive registers for
 * a specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the read operations, where a non-zero value
 * indicates an error, and the retrieved 16-bit value is stored in the
 * location pointed to by the value parameter.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxDebugLoadValue_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x16), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x15), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX debug mode for a specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value that indicates the debug mode to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxDebugMode_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x13), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI RX debug mode value from a specific register for a
 * given device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A pointer to a uint8_t variable where the retrieved debug mode
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxDebugMode_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x13), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PRBS15 enable state in the LSSI RX debug register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX.
 * @param value A uint8_t value indicating the desired state to set for the
 * PRBS15 enable (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxDebugPrbs15Enable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x17), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PRBS15 enable status from the LSSI RX debug register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX debug register.
 * @param value A pointer to a uint8_t variable where the retrieved PRBS15
 * enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxDebugPrbs15Enable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PRBS15 restart value in the LSSI RX debug register for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX.
 * @param value A uint8_t value that represents the PRBS15 restart value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxDebugPrbs15Restart_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x17), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PRBS15 restart value from the LSSI RX debug register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxDebugPrbs15Restart_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PRBS7 enable configuration for the LSSI RX debug register in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * PRBS7 feature.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxDebugPrbs7Enable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x17), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PRBS7 enable status from the LSSI RX debug register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX debug register.
 * @param value A pointer to a uint8_t variable where the retrieved PRBS7 enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxDebugPrbs7Enable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PRBS7 restart value in the LSSI RX debug register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the PRBS7 restart field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxDebugPrbs7Restart_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x17), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PRBS7 restart value from the LSSI RX debug register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX debug register.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxDebugPrbs7Restart_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PRBS7 odd/even swap configuration for the LSSI RX debug
 * register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX.
 * @param value A uint8_t value that indicates the configuration to be set for
 * the PRBS7 odd/even swap.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxDebugPrbs7SwapOddEven_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x17), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PRBS7 odd/even swap status from a specific register in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxDebugPrbs7SwapOddEven_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX debug queue selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the debug queue selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxDebugQSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x14), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI RX debug queue selection value from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxDebugQSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x14), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the debug start ramp value for the LSSI RX in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the debug start ramp.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxDebugStartRamp_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x13), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the debug start ramp value from a specific register for the
 * LSSI RX instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific LSSI RX
 * instance.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxDebugStartRamp_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x13), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX debug start shift value in the ADRV9001 register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer representing the value to be shifted
 * and set in the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxDebugStartShift_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x13), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI RX debug start shift value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX register.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxDebugStartShift_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x13), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX divider value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A 16-bit unsigned integer representing the divider value to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxDivValue_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x12), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x11), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI RX divider value from the register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * divider value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the register reads fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxDivValue_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x12), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x11), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX enable state in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value indicating the desired state to set for the LSSI
 * RX enable.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x10), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI RX enable status from a specific register for a
 * given device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x10), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX FIFO clear register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit value to be written to the LSSI RX FIFO clear register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxFifoClear_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x10), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI RX FIFO clear status from a specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxFifoClear_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x10), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX FIFO clock enable field in the ADRV9001 register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A 8-bit unsigned integer that indicates the value to set for the
 * clock enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxFifoClkEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x10), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI RX FIFO clock enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxFifoClkEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x10), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX FIFO enable configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value that indicates the desired state for the LSSI RX
 * FIFO enable.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxFifoEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x10), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI RX FIFO enable status from a specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX register.
 * @param value A pointer to a uint8_t variable where the retrieved FIFO enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxFifoEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x10), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX FIFO read reset value in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value that specifies the reset value to be set for the
 * LSSI RX FIFO.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation to the register.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxFifoReadReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief This function reads a specific field from a register and stores the
 * result in a provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated type indicating the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the read value will be
 * stored.
 * @return The function returns an integer status code indicating the success or
 * failure of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxFifoReadReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the write reset state of the LSSI RX FIFO in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value that indicates the desired state to set for the
 * write reset.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxFifoWriteReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI RX FIFO write reset status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxFifoWriteReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX Force Data Valid field in the ADRV9001 register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxForceDataValid_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI RX Force Data Valid register value from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxForceDataValid_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX Force MCS value in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxForceMcs_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x13), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI RX Force MCS value from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxForceMcs_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x13), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock gating enable for the LSSI RX full reference clock in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX.
 * @param value A uint8_t value that indicates the desired state for the clock
 * gating enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxFullRefclkClkGatingEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x18), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock gating enable status from a specific register for
 * the LSSI RX full reference clock.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX.
 * @param value A pointer to a uint8_t variable where the retrieved clock gating
 * enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxFullRefclkClkGatingEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x18), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the high longer duty cycle for the LSSI RX full reference clock
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer representing the duty cycle value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxFullRefclkDutyCycleHighLonger_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x18), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the high duty cycle value from a specific register for the
 * LSSI RX full reference clock.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A pointer to a uint8_t variable where the retrieved duty cycle
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxFullRefclkDutyCycleHighLonger_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x18), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX full reference clock enable field in the ADRV9001
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A 8-bit unsigned integer that indicates the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxFullRefclkEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x18), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the full reference clock enable status from the LSSI RX
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxFullRefclkEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x18), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bit inversion configuration for the LSSI RX I channel in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX.
 * @param value A uint8_t value representing the bit inversion setting to be
 * applied.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxIBitInversion_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bit inversion setting from a specific register for the
 * LSSI RX interface.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX register.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxIBitInversion_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the load divider for the LSSI RX in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer representing the load divider value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxLoadDivider_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x10), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the load divider value from a specific register for the LSSI
 * RX instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific LSSI RX
 * instance.
 * @param value A pointer to a uint8_t variable where the retrieved load divider
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxLoadDivider_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x10), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the long strobe value for the LSSI RX register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the long strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxLongStrobe_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the long strobe value from the LSSI RX register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A pointer to a uint8_t variable where the retrieved long strobe
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxLongStrobe_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX loopback configuration for the specified instance in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value that specifies the loopback configuration to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxLoopbackFromTx_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x10), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the loopback configuration value from the RX LSSI register
 * for a specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX LSSI register.
 * @param value A pointer to a uint8_t variable where the retrieved loopback
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxLoopbackFromTx_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x10), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSB first configuration for the LSSI RX register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value that indicates the configuration to be set for
 * the LSB first option.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxLsbFirst_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the least significant byte from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved least
 * significant byte will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxLsbFirst_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Q bit inversion configuration for the LSSI RX in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value that specifies the Q bit inversion setting to be
 * applied.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxQBitInversion_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Q bit inversion value from a specific register for the
 * LSSI RX configuration.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A pointer to a uint8_t variable where the retrieved Q bit
 * inversion value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxQBitInversion_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the first LSSI RX queue value in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxQFirst_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the first LSSI RX queue value from the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxQFirst_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX rate count in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxRateCnt_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1e6), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI RX rate count from a specified register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved rate count
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxRateCnt_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1e6), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX read FIFO enable delay in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer representing the delay value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxRdFifoEnableDelay_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x10), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI RX read FIFO enable delay value from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxRdFifoEnableDelay_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x10), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX strobe bit inversion configuration in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value representing the desired bit inversion setting.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxStrobeBitInversion_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI RX strobe bit inversion setting from a specified
 * register.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX register.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxStrobeBitInversion_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX strobe enable field in the ADRV9001 register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value that indicates the strobe enable state to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxStrobeEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1e5), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI RX strobe enable value from a specific register for
 * a given device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A pointer to a uint8_t variable where the retrieved strobe
 * enable value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxStrobeEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1e5), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the least significant bit usage in 12-bit mode for the LSSI RX
 * configuration.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX.
 * @param value A uint8_t value indicating the desired state of the least
 * significant bit.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxUseLsbIn12bitMode_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the least significant bit of a 12-bit mode register value
 * from the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_LssiRxUseLsbIn12bitMode_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Magp2Lshift field in the NVS register map for the specified
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the Magp2Lshift field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Magp2Lshift_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd3), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Magp2Lshift_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd3), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LDO bypass configuration for the RX mixer in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX mixer.
 * @param value A uint8_t value indicating the desired LDO bypass setting.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_MixerLdoBypass_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1e9), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LDO bypass setting from the RX mixer register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX mixer.
 * @param value A pointer to a uint8_t variable where the retrieved LDO bypass
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_MixerLdoBypass_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1e9), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain boost value for the RX mixer LDO in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX mixer.
 * @param value An 8-bit unsigned integer representing the gain boost value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_MixerLdoGmBoost_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1e8), (value >> 0), 0x18, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GM boost value from the RX mixer LDO register for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX mixer.
 * @param value A pointer to a uint8_t variable where the retrieved GM boost
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_MixerLdoGmBoost_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1e8), &register_value, 0x18, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the RX mixer LDO in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX mixer.
 * @param value A uint8_t value indicating the desired power-down state (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_MixerLdoPd_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1e9), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the RX mixer LDO
 * power-down state.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * RX mixer.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_MixerLdoPd_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1e9), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the resistor load value for the RX mixer LDO in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX mixer.
 * @param value An 8-bit unsigned integer representing the resistor load value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_MixerLdoResLoad_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1e8), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the mixer LDO resistor load value from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_MixerLdoResLoad_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1e8), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NBDem counter clear value in the ADRV9001 receiver register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the NBDem counter clear.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NbdemCnt1Clear_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd0), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NbdemCnt1Clear_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd0), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NBDemCnt1 threshold in the ADRV9001 device's RX register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A 16-bit unsigned integer representing the threshold value to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NbdemCnt1Threshold_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xd2), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xd1), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NBDemCnt1 threshold value from the specified register of
 * the device.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * threshold value will be stored.
 * @return Returns the status of the last register read operation, indicating
 * success (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NbdemCnt1Threshold_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xd2), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xd1), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Updates the NBDemCnt1 threshold in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the new threshold value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register update operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NbdemCnt1ThresholdUpdate_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd0), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the threshold value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved threshold
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NbdemCnt1ThresholdUpdate_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd0), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable state for the NBDemCnt3 register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the enable state to be set (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NbdemCnt3Enable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd0), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the NBDemCnt3Enable register for a specified
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NbdemCnt3Enable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd0), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FSK demodulation mode in the ADRV9001 receiver register.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * receiver register.
 * @param value A uint8_t value that specifies the FSK demodulation mode to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NbdemFskdemMode_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd0), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the FSK demodulation mode from the specified register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved FSK
 * demodulation mode will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NbdemFskdemMode_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd0), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NBF decimation interpolation ratio in the ADRV9001 device's
 * RX register.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NbfDecintpLRatio_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x157), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NBF decimation interpolation ratio from a specified
 * register.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NbfDecintpLRatio_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x157), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NBF decimation interpolation ratio in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the decimation interpolation ratio.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NbfDecintpMRatio_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x157), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NBF decimation ratio from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved decimation
 * ratio will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NbfDecintpMRatio_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x157), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NBF decimation ratio in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the decimation ratio to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NbfDecintpNRatio_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x158), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NBF decimation ratio from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved decimation
 * ratio will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NbfDecintpNRatio_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x158), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NBF decimation or interpolation ratio in the ADRV9001
 * device's RX register.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register to be modified.
 * @param value An 8-bit unsigned integer representing the new decimation or
 * interpolation ratio to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NbfDecintpORatio_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x158), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NBF decimation or interpolation ratio from a specified
 * register.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NbfDecintpORatio_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x158), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the narrowband frequency hopping mode for a specified instance in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * narrowband frequency hopping mode.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the narrowband frequency hopping mode.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NbfFhMode_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x156), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NBF FH mode value from the specified register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NbfFhMode_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x156), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO 'Don't Use Global Clock Gating' configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the setting to be applied to the
 * NCO configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NcoDontUseGlobalClockGating_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1e), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO clock gating configuration from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NcoDontUseGlobalClockGating_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1e), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO free-running clock divider for a specified instance in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value An 8-bit unsigned integer representing the clock divider value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NcoFreeRunClkDiv_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd8), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO free-running clock divider value from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * divider value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NcoFreeRunClkDiv_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd8), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO free-running clock enable state in the ADRV9001 device's
 * RX register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A 8-bit unsigned integer that indicates the desired state for
 * the NCO free-running clock enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NcoFreeRunClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd8), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO free-running clock enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NcoFreeRunClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd8), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low synchronization enable field in the ADRV9001 receiver
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver register map.
 * @param value A uint8_t value that indicates whether to enable (1) or disable
 * (0) the NCO low synchronization.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NcoLoSync0Enable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x176), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO low synchronization enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NcoLoSync0Enable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x176), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low synchronization 1 enable field in the ADRV9001
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the enable state to be set (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NcoLoSync1Enable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x176), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO low synchronization 1 enable status from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NcoLoSync1Enable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x176), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low synchronization 2 enable field in the ADRV9001
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the desired state to set for the
 * NCO low synchronization 2 enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NcoLoSync2Enable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x176), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO low synchronization 2 enable value from a specified
 * register.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NcoLoSync2Enable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x176), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO TXLO free-running clock divider value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer representing the clock divider value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NcoTxloFreeRunClkDiv_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd9), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO TXLO free-running clock divider value from a
 * specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * divider value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NcoTxloFreeRunClkDiv_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd9), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO TXLO free-running clock enable register for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * free-running clock.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NcoTxloFreeRunClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd9), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO TXLO free-running clock enable status from a
 * specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NcoTxloFreeRunClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd9), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the normalization enable field in the RX register map of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value A uint8_t value indicating the normalization enable state (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NormEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xba), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the normalized enable value from the RX register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific RX instance to
 * read from.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_NormEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xba), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the ORx1 algorithm gain compensation in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that specifies the clock selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgGainCompClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x18e), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the algorithm gain compensation clock selection value from a
 * specific register for the given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgGainCompClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x18e), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the algorithm gain compensation enable value for the ORX1
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * algorithm gain compensation.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgGainCompEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x18e), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the algorithm gain compensation enable status from the
 * specified register for the ORx1 instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgGainCompEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x18e), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain phase delay clock selection for the ORx1 instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgGainPhaseDelayClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x18e), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the ORx1
 * algorithm gain phase delay clock selection.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map for the receiver.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgGainPhaseDelayClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x18e), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain phase delay enable value for the ORx1 algorithm in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the gain phase delay enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgGainPhaseDelayEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x18e), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the ORx1
 * algorithm gain phase delay and stores it in the provided value
 * pointer.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgGainPhaseDelayEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x18e), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable state of the ORx1 algorithm group 1184 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the enable state to be set (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgGroup1184En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x18e), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register for the ORX1 algorithm
 * group in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map for the RX path.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgGroup1184En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x18e), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the ORx1 algorithm's magnitude
 * compensation in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgMagcompBbdcClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x18d), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value from a specific register for the
 * ORx1 algorithm in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgMagcompBbdcClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x18d), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBDC enable configuration for the ORX1 algorithm in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * BBDC.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgMagcompBbdcEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x18d), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided pointer.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgMagcompBbdcEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x18d), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the RX ORX1 algorithm register of the
 * ADRV9001 device without using a global reset.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgNbdemDPinFIFODontUseGlobalReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x192), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgNbdemDPinFIFODontUseGlobalReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x192), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software reset for the ORx1 algorithm NBDem FIFO in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the reset state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgNbdemDPinFIFOSwReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x192), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in a provided variable.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgNbdemDPinFIFOSwReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x192), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the NVS register map for the ORX1 algorithm
 * without using the global reset.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgNbdemDpDontUseGlobalReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x192), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgNbdemDpDontUseGlobalReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x192), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software reset state for the ORx1 algorithm in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A 8-bit unsigned integer that indicates the reset state to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgNbdemDpSwReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x192), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the NBDem
 * algorithm in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map for the RX path.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgNbdemDpSwReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x192), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the RX ORX1 algorithm register for the
 * ADRV9001 device without using a global reset.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX1 algorithm register.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgNbdemRxpfir52DontUseGlobalReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x192), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgNbdemRxpfir52DontUseGlobalReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x192), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software reset for the RX ORX1 algorithm NBDem RXPFIR52.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A 8-bit unsigned integer that indicates the reset value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgNbdemRxpfir52SwReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x192), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgNbdemRxpfir52SwReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x192), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NB-FIC correction clock enable field in the RX ORX1 algorithm
 * register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX1 algorithm.
 * @param value A 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgNbficCorrClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x18c), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Orx1AlgNbficCorrClkEn` register for a
 * specified instance and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgNbficCorrClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x18c), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the observation clock enable field in the RX ORX1 algorithm
 * register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX1 algorithm.
 * @param value A uint8_t value that indicates the desired state (enabled or
 * disabled) for the observation clock.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgNbficObsClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x184), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the observation clock enable status from a specific register
 * for the ORX1 algorithm.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * receiver register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgNbficObsClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x184), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the observation clock selection for the ORX1 algorithm in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that specifies the clock selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgNbficObsClockSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x184), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the observation clock selection value from a specific
 * register for the given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgNbficObsClockSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x184), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable field for the ORX1 algorithm in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value A uint8_t value that indicates the desired state (enabled or
 * disabled) for the clock.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgNbficObsScicMClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x185), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field from the device and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgNbficObsScicMClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x185), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC M ratio for the specified ORX1 algorithm instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the SCIC M ratio.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgNbficObsScicMRatio_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x185), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated type indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgNbficObsScicMRatio_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x185), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable field for the ORX1 algorithm in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value A uint8_t value that indicates the desired state (enabled or
 * disabled) for the clock.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgNbficObsScicNClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x186), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register for the `Orx1` algorithm in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgNbficObsScicNClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x186), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC N ratio for the specified ORX1 algorithm instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the SCIC N ratio.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgNbficObsScicNRatio_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x186), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SCIC N ratio value from a specific register for the
 * given instance of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved SCIC N ratio
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgNbficObsScicNRatio_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x186), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable field for the ORX1 algorithm in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the desired state (enabled or
 * disabled) for the clock.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgNbficObsScicOClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x187), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field from the device and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgNbficObsScicOClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x187), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC-O ratio for the specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver configuration.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the SCIC-O ratio.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgNbficObsScicORatio_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x187), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgNbficObsScicORatio_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x187), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFIR after RX QEC routing enable value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * RFIR after RX QEC routing.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgRfirAfterRxqecRoutEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x190), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field from the device and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgRfirAfterRxqecRoutEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x190), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC1 Decimation Enable field in the RX ORX1 algorithm
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX1 algorithm.
 * @param value A uint8_t value indicating the enable/disable state for the
 * SCIC1 decimation.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgScic1Dec8En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x182), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgScic1Dec8En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x182), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC2 Decimation 8 Enable field in the RX ORX1 register map
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * SCIC2 Decimation 8 feature.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgScic2Dec8En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x182), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field from the device and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgScic2Dec8En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x182), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC clock enable field in the ORX1 algorithm register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the desired state (enabled or
 * disabled) for the SCIC clock.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgScicClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x183), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SCIC clock enable status from the specified register for
 * the ORX1 algorithm.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgScicClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x183), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI enable state for the ORX1 algorithm slicer in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value A uint8_t value indicating the enable state for the RSSI slicer
 * (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgSlicerRssiEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x18d), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI enable status from the ORx1 algorithm slicer
 * register.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A pointer to a uint8_t variable where the retrieved RSSI enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgSlicerRssiEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x18d), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the transmit gain delay clock selection for the ORx1 algorithm in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgTxGainDelayClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x18b), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx Gain Delay Clock Select value from a specific
 * register for the given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgTxGainDelayClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x18b), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TX gain delay enable field in the ORx1 algorithm register of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A uint8_t value that indicates the desired state to set for the
 * TX gain delay enable.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgTxGainDelayEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xdc), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the TX gain delay enable value from the specified register
 * for the ORx1 instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific ORx1 instance
 * to read from.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1AlgTxGainDelayEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xdc), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CSSI divider value for the ORX1 clock generator in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value A 16-bit unsigned integer representing the divider value to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1ClkgenCssiDivValue_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x8), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x7), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock generator division value from the specified
 * register for the ORx1 instance.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * division value will be stored.
 * @return Returns the status of the last register read operation, with *value
 * containing the combined division value from the two registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1ClkgenCssiDivValue_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x8), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x7), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the realignment configuration for the ORx1 clock in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that specifies the realignment setting to be
 * applied.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1ClockUseRealign_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1cd), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the realignment clock value for the ORx1 instance from the
 * device's register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific ORx1 instance
 * to read from.
 * @param value A pointer to a uint8_t variable where the retrieved clock value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1ClockUseRealign_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1cd), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the drive enable value for the ORx1 data capture in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A 8-bit unsigned integer representing the drive enable value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DataCaptureDriveEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x172), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the data capture drive enable status from the specified
 * register for the ORX1 instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DataCaptureDriveEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x172), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DDC data selection for the specified ORX1 instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific ORX1 instance
 * to configure.
 * @param value A uint8_t value representing the DDC data selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DdcDataSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x18a), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DDC data selection value from a specific register for
 * the ORX1 instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific ORX instance to
 * read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DdcDataSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x18a), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC division factor for the ORX1 digital processing
 * algorithm in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the division factor to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpAlgScicDivFactor_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x182), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SCIC division factor from a specific register for the
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved division
 * factor will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpAlgScicDivFactor_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x182), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Orx1DpDec225En` field in the NVS register map
 * for a specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 8-bit unsigned integer that represents the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpDec225En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x17e), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpDec225En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17e), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX ORX1 DP DEC 227 register
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpDec227En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x17e), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpDec227En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17e), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the NVS register map for the RX
 * ORX1 DP DEC229.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpDec229En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x17e), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpDec229En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17e), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the NVS register map for the RX
 * ORX1 DP DEC231.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpDec231En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x17e), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpDec231En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17e), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the NVS register map for the
 * ORX1 DP DEC 2331.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpDec2331En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x17f), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpDec2331En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17f), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the NVS register map for the
 * ORX1 digital processing block.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the ORX1.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpDec233En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x17e), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpDec233En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17e), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the NVS register map for the
 * ORX1 DP DEC235.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpDec235En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x17e), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpDec235En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17e), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the NVS register map for the
 * ORX1 DP DEC237.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns the status of the write operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpDec237En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x17e), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpDec237En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17e), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX ORX1 DP DEC239 register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX1 DP DEC239 register.
 * @param value A uint8_t value to be written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpDec239En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x17f), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpDec239En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17f), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the NVS register map for the
 * ORx1 DP Dec241.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value to be written to the specified field in the
 * register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpDec241En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x17f), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpDec241En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17f), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX ORX1 DP DEC243 register
 * map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpDec243En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x17f), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpDec243En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17f), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX ORX1 DP DEC 247 register
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RX register to be modified.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpDec247En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x17f), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpDec247En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17f), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the ORx1 DP Dec 315 Enable field in the ADRV9001
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpDec315En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x17d), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpDec315En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17d), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the NVS register map for the
 * ORX1 DP DEC 345.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpDec345En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x17f), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpDec345En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17f), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the global reset value for the ORX1 data path in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the reset state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpGlobalReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x18f), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the global reset status from the ORX1 data path register of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map for the RX path.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpGlobalReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x18f), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Orx1DpHb2171En` field in the NVS register map
 * for a specified instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpHb2171En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x180), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpHb2171En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x180), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX ORX1 DP HB 2172 register
 * of the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX1 DP HB 2172 register.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpHb2172En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x180), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpHb2172En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x180), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX ORX1 DP HB2191 register
 * map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpHb2191En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x180), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpHb2191En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x180), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX ORX1 DP HB 2192 register
 * map for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX1 DP HB 2192 register.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpHb2192En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x180), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpHb2192En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x180), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX ORX1 DP HB26 register map
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX1 DP HB26 register.
 * @param value A 8-bit unsigned integer that represents the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpHb26En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x17d), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpHb26En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17d), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `Orx1DpHb27En` field in the NVS register map for a specified
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpHb27En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x180), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpHb27En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x180), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX ORX1 DP HB28 register map
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpHb28En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x17d), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpHb28En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17d), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC23 division factor for the ORX1 data path in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the division factor to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpScic23DivFactor_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x181), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SCIC23 division factor from the specified register for
 * the ORX1 data path.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved division
 * factor will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpScic23DivFactor_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x181), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC23 enable field in the RX ORX1 DP register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A uint8_t value that indicates the desired state to set for the
 * SCIC23 enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpScic23En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x17e), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpScic23En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17e), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable state of the ORX1 DP Sinc3 filter in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the desired enable state (0 or 1) for
 * the ORX1 DP Sinc3 filter.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpSinc3En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x180), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpSinc3En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x180), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DP Sinc4 enable configuration for the ORX1 instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the enable/disable state for the DP
 * Sinc4 feature.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpSinc4En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x180), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpSinc4En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x180), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DP Sinc6 enable field in the RX ORX1 register map for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * DP Sinc6.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpSinc6En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x180), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpSinc6En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x180), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable state for the ORX1 digital processing interface
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the desired clock enable state (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpSpiIntfClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x191), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock enable status from a specific register for the
 * `Orx1Dp` interface.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * `NvsRegmapRx` register.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpSpiIntfClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x191), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Dpinfifo enable state for the specified ORX1 instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the desired enable state for the
 * Dpinfifo.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpinfifoEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xac), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1DpinfifoEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xac), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX divider value for the ORX1 instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A 16-bit unsigned integer representing the divider value to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1LssiRxDivValue_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1d1), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1d0), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI RX divider value from the specified register of the
 * device.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * divider value will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the register read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1LssiRxDivValue_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1d1), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1d0), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output FIFO enable state for the ORx1 NBDem ARM in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the desired state of the output FIFO
 * enable (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1NbdemARMoutFIFOEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x193), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Orx1NbdemARMoutFIFOEnable` field from a
 * specified register.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1NbdemARMoutFIFOEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x193), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FIFO enable state for the ORx1 Nbdem CORR output in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the desired state to set for the FIFO
 * enable (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1NbdemCORRoutFIFOEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x193), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `CORRoutFIFOEnable` field from a specific
 * register for the given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1NbdemCORRoutFIFOEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x193), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FIFO enable state for the ORx1 NBDem DP output in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the desired state to set for the FIFO
 * enable (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1NbdemDpoutFIFOEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x193), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Orx1NbdemDpoutFIFOEnable` field from a
 * specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an `int32_t` status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1NbdemDpoutFIFOEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x193), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FIFO enable configuration for the ORx1 NBDem in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the desired FIFO enable
 * configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1NbdemTEDFIFOEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x193), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Orx1NbdemTEDFIFOEnable` field from a
 * specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1NbdemTEDFIFOEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x193), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable state of the NBDem counter 1 for the ORx1 instance in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A 8-bit unsigned integer that indicates the enable state to be
 * set for the NBDem counter.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1NbdemCounter1Enable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x193), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the NBDem counter 1 enable register for the
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1NbdemCounter1Enable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x193), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NBDem divider value for the ORx1 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A 16-bit unsigned integer representing the divider value to be
 * set.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1NbdemDivValue_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc9), (value >> 8), 0x7f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xc8), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NBDem divider value from the specified register map
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * divider value will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1NbdemDivValue_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc9), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xc8), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the frequency discriminator enable state for the ORx1 NBDem in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the enable state for the frequency
 * discriminator.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1NbdemFreqDiscriminatorEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x193), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the frequency discriminator enable status from a specific
 * register for the ORX1 instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A pointer to a uint8_t variable where the retrieved status will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1NbdemFreqDiscriminatorEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x193), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO50 enable state for the specified ORX1 NBDem instance in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NBDem register.
 * @param value A uint8_t value indicating the enable state to be set (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1NbdemNco50Enable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x194), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO 50 enable status from the specified register for the
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1NbdemNco50Enable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x194), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable state for the NBDem Pulse PFIR in the ORX1 channel of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A 8-bit unsigned integer that indicates the enable state to be
 * set (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1NbdemPulsePfirEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x194), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Orx1NbdemPulsePfirEnable` field from a
 * specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1NbdemPulsePfirEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x194), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NBWB selection for the ORX1 instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific ORX1 instance
 * to configure.
 * @param value A uint8_t value that specifies the NBWB selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1NbwbSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x196), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1NbwbSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x196), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO1 enable state for the specified ORX1 instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific ORX1 instance
 * to configure.
 * @param value A uint8_t value indicating the desired enable state (0 or 1) for
 * NCO1.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1Nco1Enable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x189), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO1 enable status from the specified register for the
 * ORX1 instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific ORX1 instance
 * to read from.
 * @param value A pointer to a uint8_t variable where the retrieved NCO1 enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1Nco1Enable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x189), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Overload High Band 2 Enable field in the RX ORX1 register of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register.
 * @param value A uint8_t value to be written to the register, indicating the
 * enable/disable state.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1OverloadHb2Enable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x190), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the overload status of the ORX1 channel from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map for the RX channel.
 * @param value A pointer to a uint8_t variable where the retrieved overload
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1OverloadHb2Enable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x190), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR 4x division value for the ORX1 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX channel.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the PFIR 4x division.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1Pfir4xDiv4p5_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3a), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1Pfir4xDiv4p5_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3a), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR 4x division value for the specified ORX instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific ORX instance to
 * configure.
 * @param value A 16-bit unsigned integer representing the PFIR 4x division
 * value to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1Pfir4xDivValue_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x34), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x35), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR 4x division value from the specified register of
 * the device.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumeration value representing the specific instance of
 * the register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved PFIR
 * 4x division value will be stored.
 * @return Returns the status of the register read operations, where a non-zero
 * value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1Pfir4xDivValue_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x34), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x35), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the global clock enable reset for the ORx1 profile in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the desired state for the global
 * clock enable reset.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1ProfileDpGlobalClkEnableReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x18f), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the global clock enable reset field from a
 * specific register for the given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1ProfileDpGlobalClkEnableReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x18f), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SSI global clock enable/reset configuration for the specified
 * ORX1 profile in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific ORX1 profile
 * instance.
 * @param value A uint8_t value that indicates the desired state for the SSI
 * global clock enable/reset.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1ProfileSsiGlobalClkEnableReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x18f), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SSI global clock enable/reset status from a specific
 * register for the given instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX profile.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1ProfileSsiGlobalClkEnableReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x18f), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the ORX1 RXQEC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value representing the clock selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1RxqecClockSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x188), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value from a specific register for the
 * ORx1 RXQEC instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific ORx1 RXQEC
 * instance.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1RxqecClockSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x188), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the resampling enable field in the NVS register map for the
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value indicating the resampling enable state to be set
 * (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1nbResampEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x195), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the resampling enable status from a specific register for
 * the ORX1NB instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX.
 * @param value A pointer to a uint8_t variable where the retrieved resampling
 * enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1nbResampEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x195), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the input enable for the ORX1NB RX PFIR 52 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1nbRxpfir52InEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x194), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx1nbRxpfir52InEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x194), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the algorithm gain compensation clock selection for the ORx2
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgGainCompClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a8), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the algorithm gain compensation clock selection value from a
 * specific register for the given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgGainCompClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a8), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the algorithm gain compensation enable value for the ORX2
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * algorithm gain compensation.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgGainCompEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a8), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the algorithm gain compensation enable status from the
 * specified register for the ORx2 instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific ORx2 instance
 * to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgGainCompEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a8), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the algorithm gain phase delay clock selection for the ORx2
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific ORx2 instance
 * to configure.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgGainPhaseDelayClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a8), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field from the device and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgGainPhaseDelayClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a8), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain phase delay enable value for the ORx2 algorithm in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the gain phase delay enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgGainPhaseDelayEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a8), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the algorithm gain phase delay enable status from a specific
 * register for the ORx2 instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific ORx2 instance.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgGainPhaseDelayEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a8), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable state of the ORx2 algorithm group 1184 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the enable state to be set (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgGroup1184En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a8), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgGroup1184En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a8), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the ORx2 algorithm's magnitude
 * compensation in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgMagcompBbdcClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a7), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value from a specific register for the
 * ORx2 algorithm in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgMagcompBbdcClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a7), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBDC enable configuration for the ORX2 algorithm in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * BBDC.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgMagcompBbdcEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a7), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgMagcompBbdcEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a7), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the ADRV9001 register map for the ORx2
 * algorithm without using a global reset.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the specified register field.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgNbdemDPinFIFODontUseGlobalReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ac), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgNbdemDPinFIFODontUseGlobalReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ac), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software reset for the ORx2 algorithm NBDem FIFO in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the reset state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgNbdemDPinFIFOSwReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ac), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgNbdemDPinFIFOSwReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ac), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the NVS register map for the RX ORX2
 * algorithm without using a global reset.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgNbdemDpDontUseGlobalReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ac), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgNbdemDpDontUseGlobalReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ac), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software reset value for the NBDem DP in the ORx2 algorithm
 * of the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the reset field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgNbdemDpSwReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ac), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgNbdemDpSwReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ac), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the RX ORX2 algorithm register for the
 * ADRV9001 device without using a global reset.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgNbdemRxpfir52DontUseGlobalReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ac), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgNbdemRxpfir52DontUseGlobalReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ac), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software reset for the `Orx2AlgNbdemRxpfir52` register in the
 * `adrv9001` device.
 *
 * @param device A pointer to the device structure that represents the
 * `adrv9001` device.
 * @param instance An enumerated value of type `adrv9001_BfNvsRegmapRx_e` that
 * specifies the instance of the register to be modified.
 * @param value A `uint8_t` value that indicates the reset state to be set.
 * @return Returns an `int32_t` status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgNbdemRxpfir52SwReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ac), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgNbdemRxpfir52SwReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ac), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NB-FIC correction clock enable field in the RX ORX2 register
 * map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX2 register map.
 * @param value A 8-bit unsigned integer that specifies the value to be written
 * to the correction clock enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgNbficCorrClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a6), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the `Orx2`
 * algorithm's clock enable status.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgNbficCorrClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a6), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the observation clock enable state for the ORX2 algorithm in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the desired state (enabled or
 * disabled) for the observation clock.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgNbficObsClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19e), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the observation clock enable status from a specific register
 * for the ORX2 algorithm.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgNbficObsClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19e), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the observation clock selection for the ORX2 algorithm in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgNbficObsClockSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19e), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field from the device and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgNbficObsClockSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19e), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable field for the ORX2 algorithm in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the desired state (enabled or
 * disabled) for the clock.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgNbficObsScicMClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19f), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgNbficObsScicMClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19f), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC M ratio for the specified ORX2 algorithm instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the SCIC M ratio.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgNbficObsScicMRatio_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19f), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgNbficObsScicMRatio_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19f), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable field for the ORX2 algorithm in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the desired state (enabled or
 * disabled) for the clock.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgNbficObsScicNClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a0), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgNbficObsScicNClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a0), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC N ratio value in the RX ORX2 algorithm register for the
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX2 algorithm.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgNbficObsScicNRatio_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a0), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SCIC N ratio value from a specific register for the
 * given instance of the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved SCIC N ratio
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgNbficObsScicNRatio_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a0), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable field for the ORX2 algorithm in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the desired state of the clock
 * enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgNbficObsScicOClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a1), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated type indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgNbficObsScicOClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a1), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC-O ratio for the specified ORX2 algorithm instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the SCIC-O ratio.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgNbficObsScicORatio_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a1), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated type indicating the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgNbficObsScicORatio_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a1), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFIR output enable configuration for the specified instance
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RFIR output enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgRfirAfterRxqecRoutEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1aa), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field from the device and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgRfirAfterRxqecRoutEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1aa), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC1 Decimation Enable field in the RX ORX2 algorithm
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX2 algorithm.
 * @param value A uint8_t value that indicates whether to enable or disable the
 * SCIC1 decimation.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgScic1Dec8En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19c), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgScic1Dec8En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19c), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC2 Decimation Enable field in the NVS register map for the
 * ORX2 algorithm.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the ORX2 algorithm.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * SCIC2 decimation.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgScic2Dec8En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19c), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific 8-bit value from a register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgScic2Dec8En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19c), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC clock enable field in the ORX2 algorithm register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the desired state (enabled or
 * disabled) for the SCIC clock.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgScicClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19d), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SCIC clock enable status from the specified ORX2
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific ORX2 instance
 * to read from.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgScicClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19d), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI enable state for the ORX2 algorithm slicer in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value A uint8_t value indicating the desired state to set for the RSSI
 * enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgSlicerRssiEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a7), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI enable status from the ORx2 algorithm slicer
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A pointer to a uint8_t variable where the retrieved RSSI enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgSlicerRssiEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a7), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain delay clock selection for the ORx2 algorithm in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgTxGainDelayClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a5), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the ORx2
 * algorithm's transmit gain delay clock selection.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map for RX.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgTxGainDelayClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a5), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the delay enable value for the `Orx2AlgTxGain` in the `adrv9001`
 * device's register map.
 *
 * @param device A pointer to the device structure that represents the
 * `adrv9001` device.
 * @param instance An enumerated value representing the specific instance of the
 * `NvsRegmapRx` register.
 * @param value A `uint8_t` value that indicates the delay enable setting to be
 * written to the register.
 * @return Returns an `int32_t` status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgTxGainDelayEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xdc), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Orx2AlgTxGainDelayEn` register for a
 * specified instance and stores it in the provided value pointer.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2AlgTxGainDelayEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xdc), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CSSI divider value for the ORX2 clock generator in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A 16-bit unsigned integer representing the divider value to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2ClkgenCssiDivValue_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xa), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x9), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock generator division value for the ORX2 channel from
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX channel.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * division value will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero). The retrieved division value is stored in the
 * location pointed to by the value parameter.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2ClkgenCssiDivValue_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xa), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x9), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the realignment configuration for the ORx2 clock in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2ClockUseRealign_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1cd), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the realignment clock value for the `Orx2` instance from the
 * device's register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific `Orx2` instance
 * to read from.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2ClockUseRealign_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1cd), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the drive enable configuration for the ORx2 data capture in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that specifies the drive enable configuration to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DataCaptureDriveEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x172), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the data capture drive enable status for the ORX2 instance
 * from the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value A pointer to a uint8_t variable where the retrieved drive enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DataCaptureDriveEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x172), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DDC data selection for the ORX2 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value representing the data selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DdcDataSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a4), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DDC data selection value from the ORX2 register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A pointer to a uint8_t variable where the retrieved DDC data
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DdcDataSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a4), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC division factor for the specified ORX2 digital
 * processing algorithm in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the division factor to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpAlgScicDivFactor_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19c), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SCIC division factor from a specific register for the
 * ORX2 digital processing algorithm.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved division
 * factor will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpAlgScicDivFactor_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19c), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable state for the ORX2 downconverter decimation rate in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the enable state to be set for
 * the ORX2 downconverter.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpDec225En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x198), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpDec225En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x198), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Orx2DpDec227En` field in the NVS register map
 * for a specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpDec227En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x198), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpDec227En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x198), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX ORX2 DP DEC 229 register
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpDec229En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x198), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpDec229En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x198), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the configuration for the ORX2 digital processing block in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpDec231En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x198), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpDec231En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x198), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the configuration for the ORX2 digital processing block in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpDec2331En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x199), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpDec2331En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x199), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the configuration for the ORX2 digital processing block in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpDec233En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x198), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpDec233En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x198), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Orx2DpDec235En` field in the NVS register map
 * for a specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpDec235En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x198), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpDec235En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x198), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the NVS register map for the RX
 * ORX2 DP DEC237.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpDec237En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x198), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpDec237En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x198), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX ORX2 DP DEC239 register
 * map for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX2 DP DEC239 register.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpDec239En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x199), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpDec239En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x199), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the NVS register map for the RX
 * ORX2 DP DEC241.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value to be written to the specified field in the
 * register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpDec241En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x199), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpDec241En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x199), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Orx2DpDec243En` field in the NVS register map
 * for a specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpDec243En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x199), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpDec243En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x199), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable state for the ORX2 downconverter decimation in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value representing the enable state to be set for the
 * ORX2 downconverter.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpDec247En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x199), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpDec247En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x199), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the NVS register map for the
 * ORX2 DP DEC 315.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpDec315En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x197), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpDec315En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x197), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable state for the ORX2 digital downconverter in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A 8-bit unsigned integer that indicates the enable state to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpDec345En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x199), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpDec345En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x199), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the global reset value for the ORX2 digital processing block in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the reset state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpGlobalReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a9), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the global reset value from the ORX2 DP register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map for the RX path.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpGlobalReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a9), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX ORX2 DP HB2171 register
 * map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX2 DP HB2171 register.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpHb2171En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19a), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpHb2171En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19a), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the RX ORX2 DP HB register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register to be modified.
 * @param value An 8-bit unsigned integer that contains the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpHb2172En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19a), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpHb2172En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19a), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the RX ORX2 DP HB 2191 register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX2 DP HB 2191 register.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpHb2191En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19a), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpHb2191En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19a), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX ORX2 DP HB2192 register
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX2 DP HB2192 register.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns the status of the write operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpHb2192En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19a), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpHb2192En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19a), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX ORX2 DP HB26 register map
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A 8-bit unsigned integer that represents the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpHb26En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x197), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpHb26En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x197), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX ORX2 DP HB27 register map
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpHb27En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19a), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpHb27En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19a), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX ORX2 DP HB28 register map
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpHb28En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x197), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpHb28En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x197), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the division factor for the SCIC23 in the ORX2 data path of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the division factor to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpScic23DivFactor_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19b), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SCIC23 division factor from the specified register for
 * the ORX2 data path.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved division
 * factor will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpScic23DivFactor_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19b), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC23 enable field in the RX ORX2 DP NVS register for the
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register to be modified.
 * @param value A uint8_t value that indicates the new state to set for the
 * SCIC23 enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpScic23En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x198), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpScic23En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x198), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable state of the ORX2 DP Sinc3 filter in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the desired state (enabled or
 * disabled) for the ORX2 DP Sinc3 filter.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpSinc3En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19a), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field for the ORX2 DP Sinc3
 * Enable setting in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpSinc3En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19a), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `Orx2DpSinc4En` field in the NVS register map for a specified
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value to be written to the register, indicating the
 * enable/disable state.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpSinc4En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19a), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpSinc4En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19a), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable state for the ORX2 digital downconverter sinc filter
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the enable state for the sinc filter.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpSinc6En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19a), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpSinc6En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19a), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable state for the ORX2 digital processing interface
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the desired clock enable state (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpSpiIntfClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ab), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock enable status from a specific register for the
 * ORX2 DP SPI interface.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpSpiIntfClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ab), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the ORX2 DPIN FIFO enable field in the ADRV9001
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map for the receiver.
 * @param value A 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpinfifoEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xac), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Orx2DpinfifoEn` field from a specific
 * register and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2DpinfifoEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xac), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX divider value for the ORX2 instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A 16-bit unsigned integer representing the divider value to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2LssiRxDivValue_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1d3), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1d2), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI RX divider value from the specified register for
 * the ORX2 instance.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * divider value will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2LssiRxDivValue_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1d3), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1d2), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output FIFO enable state for the ORx2 NBDem ARM in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the desired state to set for the
 * output FIFO enable.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2NbdemARMoutFIFOEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ad), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Orx2NbdemARMoutFIFOEnable` field from a
 * specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2NbdemARMoutFIFOEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ad), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FIFO enable state for the ORx2 NBDem in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the desired state to set for the FIFO
 * enable (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2NbdemCORRoutFIFOEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ad), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the CORRout FIFO enable field from a specific
 * register for the given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2NbdemCORRoutFIFOEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ad), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FIFO enable configuration for the ORX2 NBDem output in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the FIFO enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2NbdemDpoutFIFOEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ad), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Orx2NbdemDpoutFIFOEnable` register from
 * the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2NbdemDpoutFIFOEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ad), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FIFO enable state for the ORx2 NBDem in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the desired state to set for the
 * FIFO enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2NbdemTEDFIFOEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ad), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `TEDFIFOEnable` field from a specific
 * register for the `Orx2` instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * `NvsRegmapRx`.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2NbdemTEDFIFOEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ad), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable state of the NBDem counter 1 for the ORx2 instance in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the enable state to be set for
 * the NBDem counter.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2NbdemCounter1Enable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ad), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the NBDem Counter 1 enable register for the
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2NbdemCounter1Enable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ad), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NBDem divider value for the ORx2 instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A 16-bit unsigned integer representing the divider value to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2NbdemDivValue_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xcb), (value >> 8), 0x7f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xca), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NBDem divider value from the specified register map
 * instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * divider value will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2NbdemDivValue_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xcb), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xca), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the frequency discriminator enable state for the ORX2 NBDem in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the enable state for the frequency
 * discriminator.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2NbdemFreqDiscriminatorEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ad), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the frequency discriminator enable status from the specified
 * register for the ORX2 NBDem instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for ORX2.
 * @param value A pointer to a uint8_t variable where the retrieved status will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2NbdemFreqDiscriminatorEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ad), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO50 enable state for the specified ORX2 NBDem instance in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for ORX2.
 * @param value A uint8_t value indicating the desired state to set for the
 * NCO50 enable.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2NbdemNco50Enable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ae), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO 50 enable status from the specified register for the
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2NbdemNco50Enable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ae), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR enable value for the ORX2 NBDem module in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A 8-bit unsigned integer representing the PFIR enable value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2NbdemPulsePfirEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ae), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the
 * `Orx2NbdemPulsePfirEnable` setting from the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2NbdemPulsePfirEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ae), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NBWB selection for the ORX2 instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific ORX2 instance
 * to configure.
 * @param value A uint8_t value that specifies the NBWB selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2NbwbSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b0), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2NbwbSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b0), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO1 enable field in the RX ORX2 register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX2 register.
 * @param value A uint8_t value indicating the enable state to be set for NCO1
 * (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2Nco1Enable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a3), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO1 enable status from the specified register for the
 * ORX2 instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific ORX2 instance
 * to read from.
 * @param value A pointer to a uint8_t variable where the retrieved NCO1 enable
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2Nco1Enable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a3), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the overload high bit 2 enable for the ORx2 instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the desired state to set for the
 * overload high bit 2.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2OverloadHb2Enable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1aa), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the overload status of the ORX2 channel by reading a
 * specific field from a device register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX channel.
 * @param value A pointer to a uint8_t variable where the retrieved overload
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2OverloadHb2Enable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1aa), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR 4x division value for the specified ORX2 instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific ORX2 instance
 * to configure.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * PFIR 4x division.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2Pfir4xDiv4p5_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3a), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2Pfir4xDiv4p5_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3a), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR 4x division value in the RX ORX2 register map for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A 16-bit unsigned integer representing the PFIR 4x division
 * value to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2Pfir4xDivValue_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x36), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x37), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR 4x division value from the specified register of
 * the device.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved PFIR
 * division value will be stored.
 * @return Returns the status of the register read operations, where a non-zero
 * value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2Pfir4xDivValue_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x36), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x37), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the global clock enable reset for the ORX2 profile in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the desired state for the global
 * clock enable reset.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2ProfileDpGlobalClkEnableReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a9), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the ORx2
 * profile's global clock enable reset.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2ProfileDpGlobalClkEnableReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a9), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SSI global clock enable/reset field in the RX ORX2 profile
 * register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX2 profile.
 * @param value A 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2ProfileSsiGlobalClkEnableReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a9), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SSI global clock enable/reset value from a specific
 * register for the given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX profile.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2ProfileSsiGlobalClkEnableReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a9), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the ORx2 Rx QEC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2RxqecClockSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a2), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value from a specific register for the
 * ORx2 RxQEC instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2RxqecClockSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a2), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ORX2NB resampling enable field in the ADRV9001 NVS register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the desired state (enabled or
 * disabled) for the ORX2NB resampling.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2nbResampEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1af), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the ORX2NB
 * resampling enable setting.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2nbResampEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1af), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the input enable state for the ORX2nb RX PFIR 52 register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2nbRxpfir52InEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ae), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field from the device and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx2nbRxpfir52InEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ae), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the ORx3 algorithm gain compensation in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgGainCompClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c2), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the algorithm gain compensation clock selection value from a
 * specific register for the given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgGainCompClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c2), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the algorithm gain compensation enable register for the ORX3
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * algorithm gain compensation.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgGainCompEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c2), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the algorithm gain compensation enable status for the ORx3
 * instance from the device's register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgGainCompEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c2), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain phase delay clock selection for the ORx3 instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgGainPhaseDelayClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c2), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field from the device and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated type indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgGainPhaseDelayClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c2), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain phase delay enable value for the ORX3 algorithm in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the gain phase delay enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgGainPhaseDelayEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c2), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain phase delay enable value from a specific register
 * for the ORx3 instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific ORx3 instance
 * to read from.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgGainPhaseDelayEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c2), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable state of the ORx3 algorithm group 1184 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the enable state to be set (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgGroup1184En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c2), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgGroup1184En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c2), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the ORX3 algorithm's magnitude
 * compensation in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgMagcompBbdcClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c1), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value from a specific register for the
 * ORX3 algorithm in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgMagcompBbdcClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c1), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBDC enable value for the ORX3 algorithm in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A 8-bit unsigned integer representing the value to be set for
 * the BBDC enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgMagcompBbdcEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c1), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgMagcompBbdcEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c1), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the RX ORX3 algorithm register without using
 * the global reset.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX3 algorithm register.
 * @param value A uint8_t value to be written to the specified field in the
 * register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgNbdemDPinFIFODontUseGlobalReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c6), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgNbdemDPinFIFODontUseGlobalReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c6), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software reset for the ORx3 algorithm NBDem FIFO in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the reset state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgNbdemDPinFIFOSwReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c6), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgNbdemDPinFIFOSwReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c6), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the NVS register map for the RX ORX3
 * algorithm without using a global reset.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgNbdemDpDontUseGlobalReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c6), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgNbdemDpDontUseGlobalReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c6), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software reset value for the `Orx3AlgNbdemDp` register in the
 * `adrv9001` device.
 *
 * @param device A pointer to the device structure that represents the
 * `adrv9001` device.
 * @param instance An enumerated value representing the specific instance of the
 * `NvsRegmapRx` register.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgNbdemDpSwReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c6), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgNbdemDpSwReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c6), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the RX ORX3 algorithm register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX3 algorithm register.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgNbdemRxpfir52DontUseGlobalReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c6), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgNbdemRxpfir52DontUseGlobalReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c6), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software reset for the RX path of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgNbdemRxpfir52SwReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c6), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgNbdemRxpfir52SwReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c6), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable configuration for the `Orx3` algorithm in the
 * `NvsRegmapRx` of the `adrv9001` device.
 *
 * @param device A pointer to the device structure that represents the
 * `adrv9001` device.
 * @param instance An enumerated value representing the specific instance of the
 * `NvsRegmapRx` register.
 * @param value An 8-bit unsigned integer that specifies the clock enable
 * configuration to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgNbficCorrClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c0), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Orx3AlgNbficCorrClkEn` register from the
 * device and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgNbficCorrClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c0), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the observation clock enable state for the ORX3 algorithm in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the desired state of the observation
 * clock enable (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgNbficObsClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b8), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the observation clock enable status from a specific register
 * for the ORX3 algorithm.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgNbficObsClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b8), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the observation clock selection for the ORx3 algorithm in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgNbficObsClockSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b8), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the observation clock selection value from a specific
 * register for the given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgNbficObsClockSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b8), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable state for the `Orx3AlgNbficObsScic` register in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to be modified.
 * @param value A uint8_t value representing the clock enable state to be set (0
 * or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgNbficObsScicMClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b9), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgNbficObsScicMClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b9), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC M ratio for the specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the SCIC M ratio.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgNbficObsScicMRatio_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b9), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumeration value indicating the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgNbficObsScicMRatio_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b9), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCLK enable configuration for the ORX3 algorithm in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value A uint8_t value that indicates the desired state for the NCLK
 * enable configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgNbficObsScicNClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ba), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgNbficObsScicNClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ba), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC N ratio value in the RX ORX3 algorithm register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgNbficObsScicNRatio_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ba), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SCIC N ratio value from a specific register for the
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved SCIC N ratio
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgNbficObsScicNRatio_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ba), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable state for the ORX3 algorithm in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value A uint8_t value indicating the desired clock enable state (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgNbficObsScicOClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1bb), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgNbficObsScicOClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1bb), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC-O ratio for the specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the SCIC-O ratio.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgNbficObsScicORatio_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1bb), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgNbficObsScicORatio_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1bb), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFIR output enable configuration for the specified instance
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RFIR output enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgRfirAfterRxqecRoutEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c4), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgRfirAfterRxqecRoutEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c4), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC1 Decimation Enable field in the RX ORX3 register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX3 register.
 * @param value A uint8_t value indicating the enable/disable state for the
 * SCIC1 decimation.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgScic1Dec8En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b6), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgScic1Dec8En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b6), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC2 Decimation 8 Enable field in the RX ORX3 register of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX3 register.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * SCIC2 Decimation 8.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgScic2Dec8En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b6), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field from the device and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgScic2Dec8En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b6), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC clock enable field in the RX ORX3 algorithm register for
 * the specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX3 register.
 * @param value A uint8_t value indicating the desired state of the SCIC clock
 * enable field (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgScicClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b7), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SCIC clock enable status from the specified ORX3
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific ORX3 instance
 * to read from.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgScicClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b7), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI enable state for the ORX3 algorithm slicer in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the desired enable state for the
 * RSSI.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgSlicerRssiEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c1), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI enable status from a specific register for the ORX3
 * algorithm slicer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved RSSI enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgSlicerRssiEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c1), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx gain delay clock selection for the specified ORx3 instance
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific ORx3 instance
 * to configure.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgTxGainDelayClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1bf), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the ORx3
 * algorithm's transmit gain delay clock selection.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map for RX.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgTxGainDelayClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1bf), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TX gain delay enable field in the RX ORX3 register map for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A uint8_t value that indicates the desired state for the TX gain
 * delay enable.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgTxGainDelayEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xdc), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx Gain Delay Enable value from a specific register for
 * the given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3AlgTxGainDelayEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xdc), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CSSI divider value for the ORX3 clock generator in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value A 16-bit unsigned integer representing the divider value to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3ClkgenCssiDivValue_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xc), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xb), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock generator division value for the ORX3 instance
 * from the device's register.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for ORX3.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * division value will be stored.
 * @return Returns the status of the last register read operation, with the
 * combined division value stored in the location pointed to by `value`.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3ClkgenCssiDivValue_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xc), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xb), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the drive enable configuration for the ORx3 data capture in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DataCaptureDriveEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x172), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the data capture drive enable status from the specified
 * register for the ORX3 instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific ORX3 instance.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DataCaptureDriveEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x172), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DDC data selection for the ORX3 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX channel.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the DDC data selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DdcDataSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1be), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DDC data selection value from the specified register for
 * the given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DdcDataSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1be), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC division factor for the specified ORX3 DP algorithm
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the division factor to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpAlgScicDivFactor_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b6), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SCIC division factor from a specific register for the
 * given instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved division
 * factor will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpAlgScicDivFactor_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b6), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the 3D decimation enable field in the RX ORX register map for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * 3D decimation.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpDec225En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b2), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register for the ORX3 DP DEC225
 * configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map for the receiver.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpDec225En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b2), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX ORX3 DP DEC227 register
 * map for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX3 DP DEC227 register.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpDec227En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b2), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpDec227En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b2), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX ORX3 DP DEC 229 register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX3 DP DEC 229 register.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpDec229En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b2), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpDec229En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b2), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the NVS register map for the RX
 * ORX3 DP DEC231.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpDec231En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b2), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpDec231En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b2), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX ORX3 DP DEC 2331 register
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX3 DP DEC 2331 register.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpDec2331En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b3), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpDec2331En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b3), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the NVS register map for the RX
 * ORX 3DP decoder.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX ORX 3DP decoder.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpDec233En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b2), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpDec233En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b2), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX ORX3 DP DEC235 register
 * map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpDec235En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b2), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpDec235En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b2), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX ORX3 DP DEC237 register
 * map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpDec237En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b2), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpDec237En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b2), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the NVS register map for the RX
 * ORX3 DP DEC239.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpDec239En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b3), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpDec239En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b3), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX ORX3 DP DEC241 register
 * map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX3 DP DEC241 register.
 * @param value A uint8_t value to be written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpDec241En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b3), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpDec241En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b3), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX ORX3 DP DEC243 register
 * map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpDec243En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b3), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpDec243En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b3), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Orx3DpDec247En` field in the NVS register map
 * for a specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpDec247En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b3), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpDec247En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b3), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX ORX3 DP DEC 315 register
 * map for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX3 DP DEC 315 register.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpDec315En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b1), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpDec315En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b1), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX ORX3 DP DEC 345 register
 * of the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register to be modified.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpDec345En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b3), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpDec345En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b3), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the global reset value for the ORx3 digital processing block in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the reset state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpGlobalReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c3), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the global reset value from the ORX3 DP register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map for the receiver.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpGlobalReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c3), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX ORX3 DP HB2171 register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX3 DP HB2171 register.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpHb2171En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b4), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpHb2171En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b4), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX ORX3 DP HB2172 register
 * map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpHb2172En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b4), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpHb2172En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b4), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the RX ORX3 DP HB 2191 register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX3 DP HB 2191 register.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpHb2191En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b4), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpHb2191En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b4), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the NVS register map for the RX
 * ORX3 DP HB 2192.
 *
 * @param device A pointer to the device context that is used for hardware
 * access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpHb2192En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b4), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpHb2192En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b4), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX ORX3 DP HB26 register map
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX3 DP HB26 register.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpHb26En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b1), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpHb26En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b1), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Orx3DpHb27En` field in the NVS register map for
 * a specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpHb27En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b4), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpHb27En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b4), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX ORX3 DP HB28 register map
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpHb28En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b1), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpHb28En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b1), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the division factor for the SCIC23 in the ORX3 data path of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the division factor to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpScic23DivFactor_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b5), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SCIC23 division factor from the specified register for
 * the given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved division
 * factor will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpScic23DivFactor_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b5), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC23 enable field in the RX ORX3 DP register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX3 DP register.
 * @param value A uint8_t value that indicates whether to enable or disable the
 * SCIC23 feature.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpScic23En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b2), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpScic23En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b2), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Orx3DpSinc3En` field in the NVS register map
 * for a specified instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value to be written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpSinc3En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b4), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register for the `Orx3DpSinc3En`
 * configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpSinc3En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b4), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Sinc4 filter enable state for the ORX3 data path in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value A uint8_t value indicating the desired state to set for the
 * Sinc4 filter (enabled or disabled).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpSinc4En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b4), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpSinc4En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b4), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `Orx3DpSinc6En` field in the NVS register map for a specified
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpSinc6En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b4), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpSinc6En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b4), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SPI interface clock enable for the specified ORX3 DP instance
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific ORX3 DP
 * instance to configure.
 * @param value A uint8_t value indicating the desired state of the clock enable
 * (1 to enable, 0 to disable).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpSpiIntfClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c5), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SPI interface clock enable status for the specified
 * instance of the receiver.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpSpiIntfClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c5), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the ORX3 DPIN FIFO enable field in the ADRV9001
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpinfifoEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xac), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3DpinfifoEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xac), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI RX divider value for the ORX3 instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A 16-bit unsigned integer representing the divider value to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3LssiRxDivValue_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1d5), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1d4), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI RX divider value from the specified register for
 * the given instance.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * divider value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3LssiRxDivValue_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1d5), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1d4), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output FIFO enable state for the ORx3 NBDem ARM in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the desired state of the output FIFO
 * enable (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3NbdemARMoutFIFOEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c7), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `Orx3NbdemARMoutFIFOEnable` register from
 * the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3NbdemARMoutFIFOEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c7), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FIFO enable state for the ORx3 Nbdem CORR output in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the desired state to set for the FIFO
 * enable (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3NbdemCORRoutFIFOEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c7), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `CORRoutFIFOEnable` field from a specific
 * register for the given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3NbdemCORRoutFIFOEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c7), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FIFO enable state for the ORx3 NBDem output in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A 8-bit unsigned integer indicating the desired FIFO enable
 * state.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3NbdemDpoutFIFOEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c7), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the ORx3 NBDem DPOut FIFO enable register from
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3NbdemDpoutFIFOEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c7), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FIFO enable state for the ORx3 NBDem TED in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the desired state to set for the FIFO
 * enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3NbdemTEDFIFOEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c7), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `TEDFIFOEnable` field from a specific
 * register for the given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3NbdemTEDFIFOEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c7), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable state of the NBDem counter 1 for the ORX3 instance in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the enable state to be set for the
 * NBDem counter.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3NbdemCounter1Enable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c7), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the NBDem Counter 1 enable register for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3NbdemCounter1Enable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c7), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NBDem divider value for the ORx3 instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A 16-bit unsigned integer representing the divider value to be
 * set.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3NbdemDivValue_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xcd), (value >> 8), 0x7f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xcc), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NBDem divider value from the specified register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map for the RX path.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * divider value will be stored.
 * @return Returns the status of the read operations, indicating success (0) or
 * an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3NbdemDivValue_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xcd), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xcc), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the frequency discriminator enable state for the ORx3 NBDem in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the enable state for the frequency
 * discriminator.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3NbdemFreqDiscriminatorEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c7), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the frequency discriminator enable status from the specified
 * register for the given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved status will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3NbdemFreqDiscriminatorEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c7), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO50 enable state for the specified ORX3 NBDem instance in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for ORX3.
 * @param value A uint8_t value indicating the enable state to be set (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3NbdemNco50Enable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c8), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO 50 enable status from a specific register for the
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3NbdemNco50Enable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c8), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable state for the ORX3 NBDem Pulse PFIR in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the enable state to be set (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3NbdemPulsePfirEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c8), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the
 * `Orx3NbdemPulsePfirEnable` setting in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3NbdemPulsePfirEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c8), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `Orx3NbwbSel` field in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3NbwbSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ca), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3NbwbSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ca), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO1 enable field in the RX ORX3 register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX3 register.
 * @param value A uint8_t value indicating the enable state to be set for NCO1
 * (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3Nco1Enable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1bd), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO1 enable status from the specified ORX3 instance in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific ORX3 instance
 * to read from.
 * @param value A pointer to a uint8_t variable where the retrieved NCO1 enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3Nco1Enable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1bd), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the overload high bit 2 enable for the ORX3 instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the desired state to set for the
 * overload high bit 2.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3OverloadHb2Enable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c4), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the ORX3 Overload HB2 Enable register from the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3OverloadHb2Enable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c4), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR 4x division value for the ORX3 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3Pfir4xDiv4p5_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3a), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3Pfir4xDiv4p5_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3a), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR 4x division value in the RX ORX3 register map for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX3 register map.
 * @param value A 16-bit unsigned integer representing the division value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3Pfir4xDivValue_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x38), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x39), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR 4x division value from the specified register of
 * the device.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumeration value representing the specific instance of
 * the register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * division value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3Pfir4xDivValue_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x38), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x39), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the global clock enable/reset configuration for the ORx3 profile
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the desired state for the global
 * clock enable/reset.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3ProfileDpGlobalClkEnableReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c3), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the `Orx3`
 * profile and stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * `Orx3` profile.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3ProfileDpGlobalClkEnableReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c3), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SSI global clock enable/reset configuration for the specified
 * ORX3 profile in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific ORX3 profile
 * instance.
 * @param value A 8-bit unsigned integer representing the value to set for the
 * SSI global clock enable/reset.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3ProfileSsiGlobalClkEnableReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c3), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SSI global clock enable/reset value from a specific
 * register for the given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX profile.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * enable/reset value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3ProfileSsiGlobalClkEnableReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c3), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the ORx3 RXQEC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3RxqecClockSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1bc), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value for the ORx3 RXQEC from the NVS
 * register map.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3RxqecClockSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1bc), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the resampling enable field for the ORX3 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the desired state (enabled or
 * disabled) for the resampling feature.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3nbResampEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c9), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the ORX 3NB
 * resampling enable setting.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3nbResampEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c9), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX PFIR 52 input enable field in the ADRV9001 register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3nbRxpfir52InEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c8), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Orx3nbRxpfir52InEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c8), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ORX profile selection in the NVS register map for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value A uint8_t value that specifies the profile selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_OrxProfileSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd6), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the selected profile value from the RX ORX register map for
 * a specified instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific RX ORX instance
 * to read from.
 * @param value A pointer to a uint8_t variable where the retrieved profile
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_OrxProfileSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd6), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ORX selection value in the NVS register map for the specified
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the ORX selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_OrxSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd6), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific value from a register in the ADRV9001 device's
 * NVS register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating which instance of the NVS
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_OrxSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd6), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SSI profile selection for the RX ORX of the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX.
 * @param value A uint8_t value that specifies the profile selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_OrxSsiProfileSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd6), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SSI profile selection value from the RX ORX register
 * map.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific RX instance.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_OrxSsiProfileSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd6), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SSI selection for the ORX instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific ORX instance to
 * configure.
 * @param value A uint8_t value representing the SSI selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_OrxSsiSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd6), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SSI selection value from the RX ORX register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX ORX register map.
 * @param value A pointer to a uint8_t variable where the retrieved SSI
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_OrxSsiSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd6), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the observation capture enable state for the ORX QEC in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX.
 * @param value A uint8_t value indicating the desired state to set for the
 * observation capture enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_OrxqecObsCaptEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x174), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the observed capture enable status from the ORX QEC
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_OrxqecObsCaptEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x174), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the overflow RFIR register value from the device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_OverflowRfir_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x16f), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the overload clock enable state in the RX NVS register map for
 * the specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific RX NVS register
 * map instance.
 * @param value A uint8_t value indicating the desired state for the overload
 * clock enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_OverloadClkEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf7), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the overload clock enable status from the RX register map of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance
 * from which to read the overload clock enable status.
 * @param value A pointer to a uint8_t variable where the retrieved overload
 * clock enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_OverloadClkEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf7), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the overload high bit 2 enable value in the RX register map for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A uint8_t value that indicates the enable state for the overload
 * high bit 2.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_OverloadHb2Enable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf7), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the overload status of the second half-band filter from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value A pointer to a uint8_t variable where the retrieved overload
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_OverloadHb2Enable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf7), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PDI distortion value in the RX NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value An 8-bit unsigned integer representing the distortion value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_PdIDist_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ea), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_PdIDist_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ea), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the phase synchronization frequency tuning word in the ADRV9001
 * receiver register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver register map.
 * @param value An 8-bit unsigned integer representing the frequency tuning word
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_PhaseSyncFtwUpdate_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2c), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the phase synchronization frequency tuning word from the
 * specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved frequency
 * tuning word will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_PhaseSyncFtwUpdate_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2c), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the average threshold for the NCO phase synchronization in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A 16-bit unsigned integer representing the threshold value to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_PhaseSyncNcoPhaseAvThreshold_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xa6), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xa5), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the average threshold value for the NCO phase
 * synchronization from the specified register.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * threshold value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the register reads fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_PhaseSyncNcoPhaseAvThreshold_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xa6), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xa5), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO software control for phase synchronization in the
 * ADRV9001 receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * receiver's NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the NCO control field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_PhaseSyncNcoSwControl_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa4), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO software control value from the specified register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_PhaseSyncNcoSwControl_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa4), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI power monitoring enable state in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A uint8_t value indicating the desired state to enable or
 * disable RSSI power monitoring.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_PwrMonRssiEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x175), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI enable status from the RX power monitor register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX power monitor.
 * @param value A pointer to a uint8_t variable where the retrieved RSSI enable
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_PwrMonRssiEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x175), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific register value in the ADRV9001 device's RX reserved
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX reserved register.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Reserved0_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x17b), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Reserved0_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x17b), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific reserved register value in the ADRV9001 device's RX
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Reserved1_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x17c), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the ADRV9001 device and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Reserved1_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x17c), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC A Arm or Group 1184 clock selection in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register map.
 * @param value A uint8_t value representing the clock selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RfdcAArmOrGroup1184ClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ed), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC A Arm or Group 1184 clock selection value from a
 * specified device register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RfdcAArmOrGroup1184ClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ed), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC A Force Arm Clock Select field in the NVS register map
 * for the specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RfdcAForceArmClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ed), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC A Force Arm Clock Select value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RfdcAForceArmClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ed), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC A Force Group 1 Clock Select field in the NVS register
 * map for a specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RfdcAForceGroup1ClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ed), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC A Force Group 1 Clock Select value from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved clock select
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RfdcAForceGroup1ClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ed), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC B Arm or Group 1184 clock selection in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value representing the clock selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RfdcBArmOrGroup1184ClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ee), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC B Arm or Group 1184 clock selection value from a
 * specified device register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RfdcBArmOrGroup1184ClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ee), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC B Force Arm Clock Select field in the ADRV9001 register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register map.
 * @param value A 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RfdcBForceArmClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ee), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC B Force Arm Clock Select value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RfdcBForceArmClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ee), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC B Force Group 1 Clock Select field in the ADRV9001
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC register map.
 * @param value A 8-bit unsigned integer representing the clock select value to
 * be set.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RfdcBForceGroup1ClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ee), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC B Force Group 1 Clock Select value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved clock select
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RfdcBForceGroup1ClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ee), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC enable state in the ADRV9001 device's RX register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A 8-bit unsigned integer representing the value to set for the
 * RFDC enable state.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RfdcEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x175), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC enable status from a specific register for a given
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RFDC.
 * @param value A pointer to a uint8_t variable where the retrieved RFDC enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RfdcEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x175), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RPFIR input selection for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value An 8-bit unsigned integer representing the input selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RpfirInSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa3), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RPFIR input selection value from a specific register for
 * a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RpfirInSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa3), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves ADC calibration data from the device's register map.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * calibration data will be stored.
 * @return Returns the status of the last register read operation, with the
 * output variable containing the combined ADC calibration data.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcFlashCal2Data_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xe1), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xe0), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xdf), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xde), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC Flash Calibration 2 Length in the NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the ADC Flash Calibration 2 Length.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcFlashCal2Length_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xdd), (value >> 0), 0x1c, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC Flash Calibration length from the NVS register map.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved calibration
 * length will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcFlashCal2Length_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xdd), &register_value, 0x1c, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC Flash Calibration Read Selection value in the NVS
 * register map for a specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcFlashCal2ReadSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xdd), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific ADC calibration value from the device's register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved calibration
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcFlashCal2ReadSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xdd), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC Flash Calibration enable state in the RX register map of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A uint8_t value indicating the enable state to be set (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcFlashCal2RxEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xdd), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC flash calibration value from the specified register
 * and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcFlashCal2RxEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xdd), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC Flash Calibration 2 Start Selection in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcFlashCal2StartSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xdd), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific ADC calibration value from a register and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcFlashCal2StartSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xdd), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC flash compensation address in the RX NVS register map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcFlashCompAddr_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf2), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC flash compensation address from the NVS register
 * map.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcFlashCompAddr_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf2), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC flash read selection in the NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcFlashReadSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf1), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC flash read selection value from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcFlashReadSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf1), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC flash wait configuration in the ADRV9001 device's RX NVS
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcFlashWait_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf1), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC flash wait value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcFlashWait_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf1), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the lower threshold for ADC overload in the ADRV9001 receiver
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver register map.
 * @param value An 8-bit unsigned integer representing the lower threshold value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcOverloadLowerThreshold_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xe9), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the lower threshold value for ADC overload from a specified
 * register.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved lower
 * threshold value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcOverloadLowerThreshold_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xe9), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC overload reset duration in the ADRV9001 device's RX
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance of
 * the ADRV9001.
 * @param value An 8-bit unsigned integer representing the reset duration value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcOverloadResetDuration_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe4), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC overload reset duration from a specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcOverloadResetDuration_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe4), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFIR input duration for ADC overload reset in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RFIR input duration.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcOverloadResetRfirInDuration_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe5), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFIR input duration value from the ADC overload reset
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcOverloadResetRfirInDuration_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe5), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFIR output duration for ADC overload reset in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RFIR output duration.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcOverloadResetRfirOutDuration_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe6), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFIR output duration value from the ADC overload reset
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved RFIR output
 * duration will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcOverloadResetRfirOutDuration_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe6), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC overload reset size in the ADRV9001 device's NVS register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value An 8-bit unsigned integer representing the new ADC overload
 * reset size to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcOverloadResetSize_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe2), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC overload reset size from a specified register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcOverloadResetSize_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe2), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC overload reset threshold for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the threshold value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcOverloadResetThreshold_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe3), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC overload reset threshold value from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved threshold
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcOverloadResetThreshold_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe3), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the upper threshold for ADC overload in the RX register map of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer representing the upper threshold value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcOverloadUpperThreshold_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xe8), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the upper threshold value for ADC overload from a specified
 * register.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved threshold
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcOverloadUpperThreshold_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xe8), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC overload duration in the ADRV9001 receiver register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver register map.
 * @param value An 8-bit unsigned integer representing the ADC overload duration
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcOvldDuration_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe7), (value >> 0), 0x6, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC overload duration value from a specific register for
 * a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved ADC overload
 * duration will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcOvldDuration_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe7), &register_value, 0x6, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC profile value in the RX register map for the specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific ADC profile
 * instance to be set.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the ADC profile.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcProfile_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x162), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC profile value from the specified register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific ADC profile
 * instance.
 * @param value A pointer to a uint8_t variable where the retrieved ADC profile
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcProfile_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x162), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC selection for a specified instance in the ADRV9001 NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for which the ADC selection is being set.
 * @param value An 8-bit unsigned integer representing the ADC selection value
 * to be written.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf1), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC selection value from the NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved ADC
 * selection value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf1), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC speed selection in the RX register map for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer representing the ADC speed selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcSpeedSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xab), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC speed selection value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved ADC speed
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAdcSpeedSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xab), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC GT SRAM nap retention PSD value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX AGC GT SRAM.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the AGC GT SRAM nap retention PSD.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAgcGtSramNapRetPsd_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d6), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC GT SRAM NAP retention PSD value from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAgcGtSramNapRetPsd_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d6), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI enable field in the RX AGC register for a specified
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX AGC register.
 * @param value A uint8_t value indicating whether to enable or disable the RSSI
 * feature.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAgcRssiEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4b), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI value from the RX AGC register for a specified
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific RX AGC
 * instance.
 * @param value A pointer to a uint8_t variable where the retrieved RSSI value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAgcRssiEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4b), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the RX algorithm gain compensation in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgGainCompClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xfa), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value for the RX algorithm gain
 * compensation from a specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgGainCompClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xfa), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the algorithm gain compensation enable field in the RX NVS
 * register map for a specified instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific RX instance in
 * the NVS register map.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * gain compensation.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgGainCompEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xfa), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain compensation enable status from a specific register
 * for the RX algorithm.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX algorithm.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgGainCompEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xfa), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX algorithm gain phase delay clock selection in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgGainPhaseDelayClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xfa), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain phase delay clock selection value from a specific
 * register for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX algorithm.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgGainPhaseDelayClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xfa), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the algorithm gain phase delay enable value in the ADRV9001
 * receiver register.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * receiver register.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgGainPhaseDelayEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xfa), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain phase delay enable status from a specific register
 * for a given instance of the receiver.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgGainPhaseDelayEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xfa), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the RX algorithm group 1184 register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX algorithm group.
 * @param value A uint8_t value to be written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgGroup1184En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xfa), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgGroup1184En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xfa), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the RX algorithm's magnitude compensation
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgMagcompBbdcClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf9), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value for the Rx algorithm's magnitude
 * compensation BBDC from the device's register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgMagcompBbdcClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf9), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the RX algorithm register for the ADRV9001
 * device without using a global reset.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX algorithm register.
 * @param value A uint8_t value to be written to the specified field in the
 * register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgMagcompBbdcDontUseGlobalReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xfc), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgMagcompBbdcDontUseGlobalReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xfc), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBDC enable value in the RX algorithm register for the
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX algorithm register.
 * @param value A uint8_t value that indicates the enable state for BBDC.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgMagcompBbdcEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf9), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgMagcompBbdcEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf9), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX algorithm multiplexer
 * register for the A selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgMux200ASel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf8), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field from the device and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgMux200ASel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf8), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Rx Algorithm Mux 200 selection in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the Rx Algorithm Mux 200 selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgMux200Sel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf8), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field from the device and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumeration value indicating the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgMux200Sel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf8), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX algorithm multiplexer
 * register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgMux201Sel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf8), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific value from a register in the ADRV9001 device's RX
 * algorithm multiplexer.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * RX register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgMux201Sel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf8), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the RX algorithm multiplexer for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgMux202BRDSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf8), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific value from a register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgMux202BRDSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf8), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX algorithm multiplexer
 * register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgMux202BRJSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf8), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgMux202BRJSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf8), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX algorithm multiplexer
 * register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgMux202Sel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf8), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific value from a register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated type indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgMux202Sel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf8), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX algorithm multiplexer
 * register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgMux203RHSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf8), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated type indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgMux203RHSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf8), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Rx Algorithm Mux 204 selection in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the Rx Algorithm Mux 204 selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgMux204Sel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf8), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated type indicating the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgMux204Sel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf8), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX algorithm multiplexer
 * register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgMux205NbficSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf9), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated type indicating the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgMux205NbficSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf9), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the correction selection for the RX1 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX algorithm multiplexing.
 * @param value A 8-bit unsigned integer representing the correction selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgMux206RxqecRx1CorrSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf9), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the correction selection value from a specific register for
 * the RX algorithm.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * RX algorithm.
 * @param value A pointer to a uint8_t variable where the retrieved correction
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgMux206RxqecRx1CorrSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf9), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX algorithm multiplexer
 * register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgMux207Sel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf9), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated type indicating the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgMux207Sel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf9), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Rx Algorithm Mux 208 selection in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the Rx Algorithm Mux 208 selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgMux208Sel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf9), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated type indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgMux208Sel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf9), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NB-FIC correction clock enable field in the RX algorithm
 * register of the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX algorithm register.
 * @param value A 8-bit unsigned integer that specifies the value to be written
 * to the correction clock enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgNbficCorrClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xdb), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the Nbfic correction clock enable field from a
 * specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgNbficCorrClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xdb), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the observation clock enable field in the RX algorithm register
 * for the specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX algorithm register.
 * @param value A uint8_t value that indicates whether to enable (1) or disable
 * (0) the observation clock.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgNbficObsClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x15a), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field from the device and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgNbficObsClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x15a), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the observation clock selection for the RX algorithm in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A uint8_t value representing the clock selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgNbficObsClockSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x15a), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field from the device and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgNbficObsClockSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x15a), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable field for the RX algorithm in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX algorithm.
 * @param value A uint8_t value indicating the desired state of the clock enable
 * field (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgNbficObsScicMClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x15b), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field from the device and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgNbficObsScicMClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x15b), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC M ratio for a specified instance in the ADRV9001
 * receiver register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the SCIC M ratio.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgNbficObsScicMRatio_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x15b), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated type indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgNbficObsScicMRatio_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x15b), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCLK enable field in the RX algorithm register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX algorithm register.
 * @param value A uint8_t value to be written to the NCLK enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgNbficObsScicNClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x15c), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgNbficObsScicNClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x15c), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC N ratio value in the RX algorithm register for the
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX algorithm register.
 * @param value An 8-bit unsigned integer representing the SCIC N ratio value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgNbficObsScicNRatio_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x15c), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated type indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgNbficObsScicNRatio_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x15c), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable field for the RX algorithm in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX algorithm.
 * @param value A uint8_t value that indicates the desired state of the clock
 * enable field (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgNbficObsScicOClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x15d), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgNbficObsScicOClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x15d), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC-O ratio in the RX algorithm register for the specified
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX algorithm register.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the SCIC-O ratio.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgNbficObsScicORatio_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x15d), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgNbficObsScicORatio_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x15d), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reset value for the SCIC observation algorithm in the
 * ADRV9001 receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the reset state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgNbficObsScicReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x159), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgNbficObsScicReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x159), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFIR output enable state in the RX algorithm register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX algorithm register.
 * @param value A uint8_t value that indicates the desired state to set for the
 * RFIR output enable.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgRfirAfterRxqecRoutEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf7), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgRfirAfterRxqecRoutEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf7), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the QEC enable configuration for the RX algorithm in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX algorithm.
 * @param value A uint8_t value indicating the enable/disable state for the QEC.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgRxqecEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf9), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field from the device and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgRxqecEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf9), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC1 Decimation Enable field in the RX algorithm register
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX algorithm register.
 * @param value A uint8_t value that indicates whether the decimation is enabled
 * or disabled.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgScic1Dec8En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xda), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgScic1Dec8En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xda), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reset value for the SCIC1 Decimation 8 algorithm in the
 * ADRV9001 receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgScic1Dec8Reset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3b), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgScic1Dec8Reset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3b), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC2 Decimation 8 Enable field in the RX algorithm register
 * of the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX algorithm register.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * SCIC2 Decimation 8 feature.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgScic2Dec8En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xda), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific 8-bit value from a register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgScic2Dec8En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xda), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reset value for the SCIC2 Decimation 8 algorithm in the
 * ADRV9001 receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgScic2Dec8Reset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3b), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated type indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgScic2Dec8Reset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3b), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC clock enable field in the RX algorithm register for the
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX algorithm register.
 * @param value A uint8_t value that indicates the desired state of the SCIC
 * clock enable field (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgScicClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4e), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SCIC clock enable status from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgScicClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4e), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC reset value in the RX algorithm register for the
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX algorithm register.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgScicReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4e), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SCIC reset value from the RX algorithm register for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific RX algorithm
 * instance.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgScicReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4e), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI enable field in the RX algorithm slicer register for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX algorithm slicer.
 * @param value A uint8_t value that indicates whether to enable or disable the
 * RSSI.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgSlicerRssiEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf9), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI enable status from a specific register for the
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved RSSI enable
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgSlicerRssiEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf9), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx gain delay clock selection for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX algorithm.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgTxGainDelayClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xdc), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx Gain Delay Clock Select value from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgTxGainDelayClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xdc), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx Gain Delay Enable field in the ADRV9001 register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map for the receiver.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * Tx Gain Delay.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgTxGainDelayEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xdc), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx Gain Delay Enable value from the specified register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX algorithm.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAlgTxGainDelayEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xdc), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the averaging end value from a specific register for a given
 * instance of the receiver.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved averaging
 * end value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxAveragingEnd_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x44), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBDC (Baseband Digital Converter) state for a specified RX
 * channel in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX channel
 * instance.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the BBDC state.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxChanFuncsRadioStateBbdc_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x163), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBDC radio state from a specific register for a given RX
 * channel instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific RX channel
 * instance.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxChanFuncsRadioStateBbdc_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x163), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NB-FIC radio state for a specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * radio channel.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the NB-FIC radio state.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxChanFuncsRadioStateNbfic_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x163), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NB-FIC radio state value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * radio channel.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxChanFuncsRadioStateNbfic_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x163), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC state for a specified RX channel in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX channel
 * instance.
 * @param value An 8-bit unsigned integer representing the RFDC state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxChanFuncsRadioStateRfdc_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x163), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC value from a specific register for a given RX
 * channel instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific RX channel
 * instance.
 * @param value A pointer to a uint8_t variable where the retrieved RFDC value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxChanFuncsRadioStateRfdc_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x163), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the radio states for a specified RX channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX channel
 * instance.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the radio states.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxChanFuncsRadioStates_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x163), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the radio state value from a specific register for a given
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * radio channel.
 * @param value A pointer to a uint8_t variable where the retrieved radio state
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxChanFuncsRadioStates_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x163), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock generator division value for the RX CSSI in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A 16-bit unsigned integer representing the division value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxClkgenCssiDivValue_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x6), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x5), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock generator CSSI division value from the specified
 * register map instance.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * division value will be stored.
 * @return Returns the status of the last register read operation, which
 * indicates success (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxClkgenCssiDivValue_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x6), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x5), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the load divider for the RX clock generator in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the load divider.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxClkgenCssiLoadDivider_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the load divider value from the RX clock generator register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX register.
 * @param value A pointer to a uint8_t variable where the retrieved load divider
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxClkgenCssiLoadDivider_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the realignment configuration for the RX clock in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A uint8_t value that indicates the desired configuration for the
 * RX clock realignment.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxClockUseRealign_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1cd), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the realignment status of the RX clock from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX register.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxClockUseRealign_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1cd), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the force zero configuration for the RX datapath in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value A uint8_t value indicating the force zero setting to apply (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDatapathForceZero_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd7), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the RX datapath
 * force zero setting.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * RX datapath.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDatapathForceZero_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd7), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DDC data selection for a specified instance in the ADRV9001
 * receiver register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver register map.
 * @param value A uint8_t value that specifies the DDC data selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDdcDataSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2d), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DDC data selection value from a specified register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved DDC data
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDdcDataSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2d), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DDC DIN1 selection for a specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver register map.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the DDC DIN1 selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDdcDin1Sel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x69), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field from the device and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDdcDin1Sel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x69), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DDC DIN2 selection value in the RX NVS register map for the
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the DDC DIN2 selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDdcDin2Sel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x69), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDdcDin2Sel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x69), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DDC zero I value in the RX NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the DDC zero I.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDdcZeroI_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xaa), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DDC zero I value from the specified register for a given
 * instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved DDC zero I
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDdcZeroI_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xaa), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DDC zero Q value in the RX register map for the specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * DDC zero Q.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDdcZeroQ_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xaa), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DDC zero Q value from the RX register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific RX instance to
 * read from.
 * @param value A pointer to a uint8_t variable where the retrieved DDC zero Q
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDdcZeroQ_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xaa), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the overload duration count for the RX decimator in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance of
 * the ADRV9001.
 * @param value An 8-bit unsigned integer representing the overload duration
 * count to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDecOverloadDurationCount_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xea), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the overload duration count from a specific register for a
 * given instance of the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDecOverloadDurationCount_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xea), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the overload power mode for the RX decimator in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value An 8-bit unsigned integer representing the desired overload
 * power mode setting.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDecOverloadPowerMode_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xeb), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the overload power mode value from a specific register for a
 * given instance of the receiver.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDecOverloadPowerMode_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xeb), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the overload threshold count for the RX decimator in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance for
 * which the overload threshold count is being set.
 * @param value An 8-bit unsigned integer representing the overload threshold
 * count to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDecOverloadThresholdCount_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xea), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the overload threshold count from a specific register for a
 * given instance of the receiver.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved threshold
 * count will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDecOverloadThresholdCount_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xea), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX Decimation Threshold configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value An 8-bit unsigned integer representing the threshold value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDecThresholdConfig_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xeb), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RX decoder threshold configuration value from a
 * specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific RX instance to
 * read from.
 * @param value A pointer to a uint8_t variable where the retrieved threshold
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDecThresholdConfig_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xeb), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the lower threshold for the decimated data overload interrupt in
 * the ADRV9001 receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A 16-bit unsigned integer representing the threshold value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDecimatedDataOverloadInt0LowerThreshold_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1dd), (value >> 8), 0x3f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xee), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the lower threshold value for the decimated data overload
 * interrupt from the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated type indicating the specific instance of the
 * NVS register map for the receiver.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved lower
 * threshold value will be stored.
 * @return Returns the status of the read operations, indicating success (0) or
 * an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDecimatedDataOverloadInt0LowerThreshold_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1dd), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xee), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the lower threshold for the decimated data overload interrupt in
 * the ADRV9001 receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A 16-bit unsigned integer representing the threshold value to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDecimatedDataOverloadInt1LowerThreshold_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1de), (value >> 8), 0x3f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xef), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the lower threshold value for the decimated data overload
 * interrupt from the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved lower
 * threshold value will be stored.
 * @return Returns the status of the read operations, indicating success (0) or
 * an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDecimatedDataOverloadInt1LowerThreshold_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1de), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xef), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the upper threshold for the decimated data overload IP3 in the
 * ADRV9001 receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A 16-bit unsigned integer representing the threshold value to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDecimatedDataOverloadIp3UpperThreshold_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1db), (value >> 8), 0x3f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xf0), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the upper threshold value for the decimated data overload
 * IP3 from the specified register.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * threshold value will be stored.
 * @return Returns the status of the read operations, with *value containing the
 * combined upper threshold value if successful.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDecimatedDataOverloadIp3UpperThreshold_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1db), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xf0), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the lower threshold for decimated data overload in the ADRV9001
 * receiver.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A 16-bit unsigned integer representing the lower threshold value
 * to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDecimatedDataOverloadLowerThreshold_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1dc), (value >> 8), 0x3f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xed), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the lower threshold value for decimated data overload from
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved lower
 * threshold value will be stored.
 * @return Returns the status of the read operations, with *value containing the
 * combined lower threshold value from two registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDecimatedDataOverloadLowerThreshold_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1dc), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xed), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the upper threshold for decimated data overload in the RX
 * register map of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A 16-bit unsigned integer representing the upper threshold value
 * to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDecimatedDataOverloadUpperThreshold_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1da), (value >> 8), 0x3f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xec), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the upper threshold value for decimated data overload from
 * the specified register.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * threshold value will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDecimatedDataOverloadUpperThreshold_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1da), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xec), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the digital gain saturation value from the RX register map
 * of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A pointer to a uint8_t variable where the retrieved digital gain
 * saturation value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDigitalGainSaturation_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x16f), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC startup reset disable value in the RX register map for
 * the specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * ADC startup reset disable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDisableAdcStartupReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe3), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC startup reset disable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDisableAdcStartupReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe3), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the RxDpAgcWb10En field in the NVS register map for
 * the specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpAgcWb10En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpAgcWb10En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC division factor in the RX digital processing algorithm
 * of the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value An 8-bit unsigned integer representing the division factor to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpAlgScicDivFactor_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xda), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SCIC division factor from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved division
 * factor will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpAlgScicDivFactor_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xda), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ripple selection for the RX DP algorithm in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value that specifies the ripple selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpAlgScicRippleSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xda), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SCIC ripple selection value from a specific register for
 * a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved ripple
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpAlgScicRippleSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xda), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the RxDpDec225En field in the NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 8-bit unsigned integer representing the value to be set in the
 * register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDec225En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field from the device and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDec225En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX digital processing
 * register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX digital processing register.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDec227En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDec227En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX DP DEC 229 register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDec229En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to be accessed.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDec229En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX DP DEC 231 register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX DP DEC 231 register.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDec231En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDec231En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX digital processing
 * register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDec2331En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDec2331En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RxDpDec233 enable field in the NVS register map for the
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDec233En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param instance An enumerated value indicating which instance of the register
 * map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDec233En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RxDpDec235 enable field in the NVS register map for the
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that indicates the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDec235En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDec235En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX DP decoder register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX DP decoder register.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDec237En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDec237En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX DP DEC239 register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX DP DEC239 register.
 * @param value A uint8_t value to be written to the specified field in the
 * register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDec239En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field from the device and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDec239En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX DP DEC 241 register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX DP DEC 241 register.
 * @param value A uint8_t value to be written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDec241En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDec241En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX DP DEC243 register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX DP DEC243 register.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDec243En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDec243En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX DP DEC 247 register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX DP DEC 247 register.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDec247En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDec247En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX DP DEC 315 register of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDec315En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to be accessed.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDec315En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RxDpDec345En field in the NVS register map for the specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDec345En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDec345En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the RX DPD DMR R0 register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX DPD DMR register.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDmrR0En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated type indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDmrR0En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX DPD DMR register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDmrR1En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpDmrR1En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RxDpFic54 enable field in the NVS register map for the
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpFic54En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpFic54En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX DP FM R1 register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX DP FM register.
 * @param value A uint8_t value to be written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpFmR1En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpFmR1En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain compensation for the RX data path in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer representing the gain compensation
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGainComp9En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4d), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain compensation value from a specific register for the
 * RX DP Gain Compensation 9 feature.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX register.
 * @param value A pointer to a uint8_t variable where the retrieved gain
 * compensation value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGainComp9En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4d), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain compensation value for the specified instance in the
 * ADRV9001 receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * receiver configuration.
 * @param value A 16-bit unsigned integer representing the gain compensation
 * value to be set.
 * @return Returns the status of the last register write operation, indicating
 * success (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGainComp9GainI0_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x51), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x50), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain compensation value from the specified register for
 * a given instance.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved gain
 * compensation value will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGainComp9GainI0_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x51), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x50), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain compensation value for a specific receiver instance in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific receiver
 * instance for which the gain compensation is being set.
 * @param value A 16-bit unsigned integer representing the gain compensation
 * value to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGainComp9GainI1_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x55), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x54), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain compensation value from two registers for a
 * specified instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved gain
 * compensation value will be stored.
 * @return Returns the status of the register read operations, where a status of
 * 0 indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGainComp9GainI1_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x55), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x54), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain compensation value for the specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A 16-bit unsigned integer representing the gain compensation
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGainComp9GainI2_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x59), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x58), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain compensation value from specific registers for a
 * given instance of the device.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved gain
 * compensation value will be stored.
 * @return Returns the status of the last register read operation, indicating
 * success (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGainComp9GainI2_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x59), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x58), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain compensation value for a specific instance in the
 * ADRV9001 receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * receiver configuration.
 * @param value A 16-bit unsigned integer representing the gain compensation
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGainComp9GainI3_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x5d), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x5c), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain compensation value from two registers for a
 * specified instance of the receiver.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved gain
 * compensation value will be stored.
 * @return Returns the status of the last register read operation, which
 * indicates success (0) or failure (non-zero). The retrieved gain
 * compensation value is stored in the variable pointed to by value.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGainComp9GainI3_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x5d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x5c), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain compensation value for a specific instance in the
 * ADRV9001 receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * receiver configuration.
 * @param value A 16-bit unsigned integer representing the gain compensation
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGainComp9GainI4_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x61), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x60), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain compensation value from the specified register for
 * a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved gain
 * compensation value will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero). The retrieved gain compensation value is
 * stored in the location pointed to by value.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGainComp9GainI4_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x61), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x60), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain compensation value for the specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A 16-bit unsigned integer representing the gain compensation
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGainComp9GainI5_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x65), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x64), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain compensation value from two registers for a
 * specified instance of the receiver.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved gain
 * compensation value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the register reads fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGainComp9GainI5_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x65), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x64), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain compensation value for the specified instance in the
 * ADRV9001 receiver.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver configuration.
 * @param value A 16-bit unsigned integer representing the gain compensation
 * value to be set.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGainComp9GainQ0_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x53), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x52), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain compensation value from two specific registers for
 * a given instance of the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved gain
 * compensation value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any read operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGainComp9GainQ0_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x53), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x52), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain compensation value for a specific receiver instance in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific receiver
 * instance for which the gain compensation is being set.
 * @param value A 16-bit unsigned integer representing the gain compensation
 * value to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGainComp9GainQ1_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x57), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x56), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain compensation value from two registers for a
 * specified instance of the receiver.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved gain
 * compensation value will be stored.
 * @return Returns the status of the last register read operation, where a value
 * of 0 indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGainComp9GainQ1_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x57), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x56), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain compensation value for the specified instance in the
 * ADRV9001 receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * receiver configuration.
 * @param value A 16-bit unsigned integer representing the gain compensation
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGainComp9GainQ2_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x5b), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x5a), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain compensation value from two registers for a
 * specified instance of the receiver.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved gain
 * compensation value will be stored.
 * @return Returns the status of the last register read operation, where a value
 * of 0 indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGainComp9GainQ2_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x5b), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x5a), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain compensation value for a specific instance in the
 * ADRV9001 receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * receiver configuration.
 * @param value A 16-bit unsigned integer representing the gain compensation
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGainComp9GainQ3_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x5f), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x5e), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain compensation value from two specific registers for
 * a given instance of the receiver.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved gain
 * compensation value will be stored.
 * @return Returns the status of the last register read operation, which
 * indicates success or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGainComp9GainQ3_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x5f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x5e), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain compensation value for the RxDpGainComp9GainQ4 register
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A 16-bit unsigned integer representing the gain compensation
 * value to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGainComp9GainQ4_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x63), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x62), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain compensation value from the specified register for
 * a given instance.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved gain
 * compensation value will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGainComp9GainQ4_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x63), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x62), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain compensation value for the RxDpGainComp9GainQ5 register
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the gain compensation
 * value to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGainComp9GainQ5_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x67), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x66), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain compensation value from specific registers for a
 * given instance of the receiver.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved gain
 * compensation value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the register reads fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGainComp9GainQ5_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x67), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x66), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Updates a single gain compensation value in the RX register map of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer representing the gain compensation
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register update operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGainComp9UpdateSingle_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6a), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific gain compensation value from a register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGainComp9UpdateSingle_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6a), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the global clock enable/reset configuration for the RX data path
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGlobalClkEnableReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3b), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the RX DP global
 * clock enable reset.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * RX NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGlobalClkEnableReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3b), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the global reset value for the RX data path in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value A uint8_t value that indicates the reset state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGlobalReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3b), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the global reset status from the RX data path register of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpGlobalReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3b), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX DP HB 2171 register map
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX DP HB 2171 register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpHb2171En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4f), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpHb2171En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4f), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX DP HB 2172 register map
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpHb2172En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4f), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpHb2172En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4f), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX DP HB 2191 register map
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX DP HB 2191 register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpHb2191En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4f), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpHb2191En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4f), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX DP HB2192 register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpHb2192En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4f), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated type indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpHb2192En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4f), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX DP HB26 register map for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX DP HB26 register map.
 * @param value A 8-bit unsigned integer representing the value to be set in the
 * register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpHb26En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpHb26En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX DP HB27 register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX DP HB27 register.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpHb27En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4f), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpHb27En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4f), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RxDpHb28En field in the NVS register map for a specified
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpHb28En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpHb28En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the RX DP register of the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX DP register.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpP25R1En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpP25R1En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reset value for the RxDpPfir52 register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpPfir52Reset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3b), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reset value of the RxDpPfir52 register for a specified
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpPfir52Reset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3b), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI input selection for the RX DP in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpRssiInSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa3), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI input selection value from a specific register for
 * the given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved RSSI input
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpRssiInSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa3), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX DP RXQEC21 register of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX DP RXQEC21 register.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpRxqec21En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpRxqec21En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the mux selection for the RxDpRxqec in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that specifies the mux selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpRxqecMuxSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x68), (value >> 0), 0x6, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field from the device and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpRxqecMuxSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x68), &register_value, 0x6, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the division factor for the SCIC23 in the RX DP register map of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer representing the division factor to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpScic23DivFactor_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x31), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the division factor from a specific register for the RX DP
 * SCIC 23 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved division
 * factor will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpScic23DivFactor_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x31), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SCIC23 enable field in the RX DP register map for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX DP register map.
 * @param value A uint8_t value that indicates the enable state to be set for
 * the SCIC23 field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpScic23En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumeration value indicating which instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpScic23En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reset value for the RxDpScic23 register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that specifies the reset value to be set in the
 * register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpScic23Reset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3b), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpScic23Reset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3b), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ripple selection for the RX DP SCIC23 register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value that specifies the ripple selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpScic23RippleSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3d), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ripple selection value from a specific register for the
 * RX DP SCIC 23 instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX DP SCIC 23.
 * @param value A pointer to a uint8_t variable where the retrieved ripple
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpScic23RippleSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3d), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain level for the RxDp Sinc2 and Sinc3 filters in the
 * ADRV9001 device using SPI.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the gain level to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpSinc2Sinc3GainLevelFromSpi_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4d), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain level from a specific register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the ADRV9001.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A pointer to a uint8_t variable where the retrieved gain level
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpSinc2Sinc3GainLevelFromSpi_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4d), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `RxDpSinc3En` field in the NVS register map for
 * a specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value to be written to the `RxDpSinc3En` field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpSinc3En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4f), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxDpSinc3En` field from a specific
 * register in the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpSinc3En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4f), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RxDpSinc4 enable field in the ADRV9001 register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A uint8_t value that indicates whether to enable or disable the
 * RxDpSinc4 feature.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpSinc4En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4f), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpSinc4En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4f), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RxDpSinc6 enable field in the NVS register map for the
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * RxDpSinc6.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpSinc6En_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4f), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxDpSinc6En` field from a specified
 * register and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumeration value representing the specific instance of
 * the register to read from.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpSinc6En_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4f), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the spectral inversion configuration for the RxDp channel in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value indicating the desired spectral inversion
 * setting (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpSpectralInvertI_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1cb), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the spectral inversion value from a specific register for a
 * given instance of the receiver.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved spectral
 * inversion value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpSpectralInvertI_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1cb), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the spectral inversion configuration for the Q channel in the
 * ADRV9001 receiver.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * receiver configuration.
 * @param value A uint8_t value indicating the desired spectral inversion
 * setting.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpSpectralInvertQ_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1cb), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the spectral inversion status from a specific register for a
 * given instance of the receiver.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved spectral
 * inversion value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpSpectralInvertQ_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1cb), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SPI interface clock enable bit for a specified instance in
 * the ADRV9001 receiver register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver register map.
 * @param value A uint8_t value that indicates the desired state of the clock
 * enable bit (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpSpiIntfClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4c), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpSpiIntfClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4c), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX DP WBAGC MUX selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value that specifies the MUX selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpWbagcMuxSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3e), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxDpWbagcMuxSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3e), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC overload enable state in the RX register map for the
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value A uint8_t value indicating the desired state for ADC overload
 * enable (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxEnableAdcOverload_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe7), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC overload status from a specific register for a given
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved ADC overload
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxEnableAdcOverload_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe7), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the overload enable configuration for the RX instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value A uint8_t value indicating the overload enable setting to apply.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxEnableDecOverload_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xea), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the overload status from a specific register for a given
 * instance of the receiver.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxEnableDecOverload_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xea), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the synchronization value for the receive enable counter in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxEnableGcounterSync_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1df), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the Gcounter synchronization register for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxEnableGcounterSync_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1df), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FIR selection for the RX path in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value An 8-bit value representing the FIR selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxFirSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x130), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the FIR selection value from the RX register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific RX instance to
 * read from.
 * @param value A pointer to a uint8_t variable where the retrieved FIR
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxFirSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x130), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC overload reset value in the RX register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific RX instance in
 * the register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the ADC overload reset.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxForceAdcOverloadReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe2), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC overload reset status from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A pointer to a uint8_t variable where the retrieved ADC overload
 * reset status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxForceAdcOverloadReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe2), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain compensation enable field in the RX function register of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value A uint8_t value indicating the desired state (enabled or
 * disabled) for gain compensation.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxFuncGainCompEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x165), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain compensation enable status from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX function.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxFuncGainCompEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x165), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the segment selection for the RX Gcounter in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxGcounterSegmentSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1df), (value >> 0), 0xe, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific segment from the RX Gcounter
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX Gcounter segment.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxGcounterSegmentSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1df), &register_value, 0xe, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software reset for the RxMagComp PFIR21 register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the reset state to be set (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxMagCompPfir21SwReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd4), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the RX Mag Comp
 * PFIR 21 software reset.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX Mag Comp.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxMagCompPfir21SwReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd4), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX MISR bypass configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value A uint8_t value that specifies the configuration to be set for
 * the RX MISR bypass.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxMisrBypass_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf4), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxMisrBypass_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf4), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the MISR datapath selection for the RX NVS register map in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxMisrDatapathSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf4), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field from the device and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated type indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxMisrDatapathSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf4), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX MISR enable field in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * RX MISR.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxMisrEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf4), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RX MISR enable status from a specific register for the
 * given device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxMisrEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf4), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX MISR length in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value An 8-bit unsigned integer representing the length value to set
 * for the RX MISR.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxMisrLength_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf4), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the MISR length value from the RX register map of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance
 * from which to read the MISR length.
 * @param value A pointer to a uint8_t variable where the retrieved MISR length
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxMisrLength_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf4), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the MISR signature from the RX register map of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated type indicating the specific RX instance from
 * which to read the MISR signature.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved MISR
 * signature will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxMisrSignature_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xf5), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xf6), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FIFO enable state for the specified instance in the ADRV9001
 * receiver register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver register map.
 * @param value A uint8_t value indicating the desired state to set for the FIFO
 * enable (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbdemARMoutFIFOEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xce), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the RX Nbdem ARM
 * output FIFO enable setting.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX Nbdem register.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbdemARMoutFIFOEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xce), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FIFO enable configuration for the Rx Nbdem CORR output in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NvsRegmapRx.
 * @param value A uint8_t value indicating the desired FIFO enable state.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbdemCORRoutFIFOEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xce), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `CORRoutFIFOEnable` field from a specified
 * register for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbdemCORRoutFIFOEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xce), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FIFO enable configuration for the RX NBDem DP output in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NBDem register map.
 * @param value A uint8_t value indicating the desired FIFO enable
 * configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbdemDpoutFIFOEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xce), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RxNbdemDpoutFIFOEnable field from a
 * specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbdemDpoutFIFOEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xce), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FIFO enable configuration for the specified receiver instance
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific receiver
 * instance to configure.
 * @param value A uint8_t value indicating the FIFO enable configuration to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbdemTEDFIFOEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xce), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RxNbdemTEDFIFOEnable field from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbdemTEDFIFOEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xce), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the parallel enable configuration for the Rx Nbdem correlator in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NvsRegmapRx.
 * @param value A uint8_t value that specifies the enable/disable state for the
 * correlator.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbdemCorrelatorParallelEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xce), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RxNbdemCorrelatorParallelEnable register
 * for a specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RxNbdem correlator.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbdemCorrelatorParallelEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xce), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable state of the RxNbdemCounter1 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the enable state to be set for
 * the RxNbdemCounter1.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbdemCounter1Enable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xce), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RxNbdemCounter1Enable register from the
 * device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbdemCounter1Enable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xce), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable state of the RxNbdemCounter2 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the enable state to be set for
 * the RxNbdemCounter2.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbdemCounter2Enable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xce), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RxNbdemCounter2Enable register for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbdemCounter2Enable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xce), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NBDem divider value in the RX NVS register map for the
 * specified instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A 16-bit unsigned integer representing the divider value to be
 * set.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbdemDivValue_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc7), (value >> 8), 0x7f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xc6), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the demodulator division value from the specified register
 * map for a given instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * division value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any read operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbdemDivValue_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc7), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xc6), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the frequency discriminator enable state in the ADRV9001 receiver
 * register.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * receiver register.
 * @param value A uint8_t value indicating the enable state for the frequency
 * discriminator.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbdemFreqDiscriminatorEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xce), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the frequency discriminator enable status from a specific
 * register for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved status will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbdemFreqDiscriminatorEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xce), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO 50 enable field in the RX NBDem register for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NBDem register.
 * @param value A uint8_t value indicating the enable state to be set (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbdemNco50Enable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xcf), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO 50 enable status from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbdemNco50Enable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xcf), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR enable configuration for the RX NBDem module in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NBDem module.
 * @param value A uint8_t value indicating the PFIR enable configuration to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbdemPulsePfirEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xcf), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `RxNbdemPulsePfirEnable` field from a
 * specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbdemPulsePfirEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xcf), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX NBF enable field in the ADRV9001 register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NBF register.
 * @param value A uint8_t value that indicates the enable state to be set for
 * the RX NBF.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x130), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RxNbfEn register for a specified instance
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x130), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX NBF enable count limit in the ADRV9001 device by writing
 * to specific registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NBF register map.
 * @param value A 32-bit unsigned integer representing the count limit value to
 * be set.
 * @return Returns the status of the last write operation, where 0 indicates
 * success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfEnableCntLimit_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x135), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x134), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x133), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x132), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the count limit for the Rx NBF enable by reading multiple
 * registers.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated type indicating the specific instance of the
 * NVS register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved count
 * limit will be stored.
 * @return Returns the status of the last register read operation, with a value
 * of 0 indicating success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfEnableCntLimit_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x135), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x134), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x133), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x132), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the threshold for enabling the NBF receiver in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the threshold value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfEnableThld_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x13e), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the threshold value for enabling the NBF receiver from a
 * specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved threshold
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfEnableThld_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x13e), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the NBF FIC coefficient DCI value from the specified device
 * and instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * coefficient value will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicCoefDci_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x110), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x10f), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x10e), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DCQ coefficient from the RX NBF FIC register map for a
 * specified instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX NBF FIC.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * coefficient will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicCoefDcq_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x113), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x112), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x111), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the NBF FIC coefficient gain value from a device's register
 * map.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated type indicating the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * coefficient gain value will be stored.
 * @return Returns the status of the last register read operation, with the
 * retrieved coefficient gain value stored in the provided pointer.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicCoefGain_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x10d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x10c), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x10b), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x10a), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the phase coefficient value from the RX NBF register map by
 * reading multiple registers.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * RX NBF register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * coefficient phase value will be stored.
 * @return Returns the status of the last register read operation, with the
 * output variable containing the combined phase coefficient value from
 * the four registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicCoefPhase_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x109), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x108), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x107), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x106), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NBF FIC coefficient in the RX NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value An 8-bit unsigned integer representing the coefficient value to
 * be written.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicCoefWr_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x105), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the coefficient value from a specific register for the RX
 * NBF FIC.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX NBF.
 * @param value A pointer to a uint8_t variable where the retrieved coefficient
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicCoefWr_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x105), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the configuration for the NBF FIC register in the RX NVS regmap.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS regmap.
 * @param value A 16-bit unsigned integer representing the configuration value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicConfig_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x115), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x114), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the configuration value from the RX NBF FIC register map for
 * a specified instance.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * RX NBF FIC configuration.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * configuration value will be stored.
 * @return Returns the status of the last register read operation, with a value
 * of 0 indicating success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicConfig_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x115), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x114), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a 32-bit value from a series of registers by reading four
 * consecutive register values and combining them.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumeration value representing the specific instance of
 * the register map.
 * @param value A pointer to a 32-bit integer where the combined register values
 * will be stored.
 * @return Returns the status of the last register read operation, where a
 * status of 0 indicates success and any non-zero value indicates an
 * error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicCtlRdata_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x129), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x128), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x127), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x126), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control register for the RX NBF FIC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NBF FIC control register.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the control register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicCtrlWr_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x11a), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific control register value from the ADRV9001 device
 * and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicCtrlWr_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x11a), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicEstCtrl_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x131), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the forced estimation value for the RX NBF FIC in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NBF FIC register.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicEstForce_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x130), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicEstForce_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x130), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX NBF FIC GCTL register values for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NBF register map.
 * @param value A 16-bit value to be written to the RX NBF FIC GCTL registers.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicGctl_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x119), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x118), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 16-bit value from two consecutive registers for a
 * specified instance of the receiver.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated type indicating the specific instance of the
 * receiver.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, which
 * indicates success or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicGctl_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x119), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x118), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain value for the RX NBF FIC register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NBF FIC register.
 * @param value A 32-bit unsigned integer representing the gain value to be set.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicGn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x104), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x103), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x102), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x101), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain value from the RX NBF FIC register map by reading
 * multiple registers.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * RX NBF FIC register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved gain
 * value will be stored.
 * @return Returns the status of the last register read operation, with the
 * output variable containing the combined gain value from the
 * registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicGn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x104), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x103), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x102), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x101), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX NBF FIC GP register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NBF FIC GP register.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicGpRdSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x156), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicGpRdSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x156), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX NBF FIC control register values for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NBF FIC control register.
 * @param value A 16-bit unsigned integer representing the value to be written
 * to the control registers.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicPctl_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x117), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x116), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 16-bit value from two consecutive registers for a
 * specified instance of the receiver.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, which
 * indicates success (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicPctl_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x117), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x116), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NBF FIC phase register values for a given instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value A 32-bit unsigned integer containing the value to be written to
 * the registers.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicPh_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x100), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xff), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xfe), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xfd), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 32-bit value from a series of registers for a specified
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, where a zero
 * indicates success and a non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicPh_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x100), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xff), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xfe), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xfd), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the configuration value from two specific registers for a
 * given instance of the receiver.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * configuration value will be stored.
 * @return Returns the status of the last register read operation, which
 * indicates success or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicRegConfig_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x11c), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x11b), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the count of the NBF FIC register from the RX NVS register
 * map.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * register count will be stored.
 * @return Returns the status of the last register read operation, where a
 * status of 0 indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicRegCount_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x11e), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x11d), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to be accessed.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicRegDc_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x123), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the gain value from the RX NBF FIC register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NBF FIC register.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved gain
 * value will be stored.
 * @return Returns the status of the read operations, with the gain value stored
 * in the location pointed to by the value parameter.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicRegGain_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x122), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x121), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the phase value from the NBF register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved phase
 * value will be stored.
 * @return Returns the status of the last register read operation, which
 * indicates success (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicRegPhase_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x120), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x11f), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the state of the NBF FIC register for a specified instance
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicState_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x125), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the FIC status from the RX NBF register map for a specified
 * instance.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific RX NBF
 * instance.
 * @param value A pointer to a uint8_t variable where the retrieved FIC status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFicStatus_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x124), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bypass configuration for the NBF FIR filter in the RX path of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A uint8_t value indicating the bypass configuration to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFirByp_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x130), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfFirByp_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x130), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the halt count limit for the RX NBF in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NBF register map.
 * @param value A 32-bit unsigned integer representing the halt count limit to
 * be set.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfHaltCntLimit_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x13d), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x13c), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x13b), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x13a), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the halt count limit value from the RX NBF register map by
 * reading multiple registers.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated type indicating the specific instance of the RX
 * NBF register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved halt
 * count limit will be stored.
 * @return Returns the status of the last register read operation, where a
 * status of 0 indicates success and any non-zero value indicates an
 * error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfHaltCntLimit_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x13d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x13c), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x13b), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x13a), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the halt threshold value for the RX NBF in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NBF register map.
 * @param value An 8-bit unsigned integer representing the halt threshold value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfHaltThld_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x13f), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the halt threshold value from a specific register for a
 * given instance of the receiver.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved halt
 * threshold value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfHaltThld_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x13f), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `RxNbfPgobsDsel` field in the RX NVS register
 * map for a specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfPgobsDsel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x131), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific bit field value from a register and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfPgobsDsel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x131), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the restart value for the RX NBF register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NBF register.
 * @param value A uint8_t value that specifies the restart setting to be
 * applied.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfRestart_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x130), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated type indicating the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfRestart_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x130), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RSSI value from multiple registers for a specified
 * instance of the receiver.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved RSSI
 * value will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfRssiA_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x14f), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x14e), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x14d), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x14c), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RSSI value from the specified register map for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved RSSI
 * value will be stored.
 * @return Returns the status of the last read operation, with the RSSI value
 * stored in the provided `value` pointer if successful.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfRssiB_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x153), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x152), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x151), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x150), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI compensation enable field in the RX NBF register map for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NBF register map.
 * @param value A uint8_t value that indicates the enable/disable state for RSSI
 * compensation.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfRssiCompEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x130), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI compensation enable value from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX NBF register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfRssiCompEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x130), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI division value in the RX NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A 32-bit unsigned integer representing the RSSI division value
 * to be set.
 * @return Returns the status of the last register write operation, indicating
 * success (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfRssiDiv_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x12f), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x12e), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x12d), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x12c), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI division value from the RX NVS register map by
 * reading multiple registers.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved RSSI
 * division value will be stored.
 * @return Returns the status of the last register read operation, where a
 * status of 0 indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfRssiDiv_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x12f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x12e), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x12d), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x12c), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RSSI control value from a specific register for the
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfRssiFicCtrl_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x131), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI interval for the RX NBF in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NBF register map.
 * @param value A 16-bit unsigned integer representing the RSSI interval value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfRssiIntvl_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x12b), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x12a), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI interval value from the specified register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved RSSI
 * interval value will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfRssiIntvl_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x12b), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x12a), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RSSI metric from the specified register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated type indicating the specific instance of the
 * receiver for which the RSSI metric is being retrieved.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved RSSI
 * metric will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfRssiMetric_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x155), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x154), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RSSI compensation counter value from the specified
 * device registers.
 *
 * @param device A pointer to the device context from which the registers will
 * be read.
 * @param instance An enumerated type indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved RSSI
 * compensation counter value will be stored.
 * @return Returns the status of the last register read operation, with the RSSI
 * compensation counter value stored in the provided output pointer.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfRssicompEnableCntr_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x143), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x142), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x141), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x140), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RSSI comparator halt counter value from the specified
 * device registers.
 *
 * @param device A pointer to the device context from which the register values
 * will be read.
 * @param instance An enumerated type indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved halt
 * counter value will be stored.
 * @return Returns the status of the last read operation, with the halt counter
 * value stored in the provided pointer if successful.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfRssicompHaltCntr_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x14b), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x14a), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x149), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x148), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the RSSI compensation transaction counter value from the
 * specified device registers.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * counter value will be stored.
 * @return Returns the status of the last register read operation, with the
 * retrieved RSSI compensation transaction counter value stored in the
 * provided value pointer.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfRssicompTransCntr_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x147), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x146), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x145), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x144), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NBF SCOBS enable field in the RX NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * NBF SCOBS.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfScobsEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x130), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfScobsEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x130), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX NBF transaction count limit in the ADRV9001 device by
 * writing to specific registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A 32-bit unsigned integer representing the transaction count
 * limit to be set.
 * @return Returns the status of the last write operation, which is 0 for
 * success or a negative error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfTransCntLimit_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x139), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x138), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x137), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x136), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Rx NBF transaction count limit from the device's
 * register map.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * transaction count limit will be stored.
 * @return Returns the status of the last register read operation, with the
 * retrieved transaction count limit stored in the provided value
 * pointer.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbfTransCntLimit_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x139), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x138), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x137), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x136), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX NB gain mux selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A uint8_t value representing the mux selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbgainMuxSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x68), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NB gain mux selection value from a specific register for
 * a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved mux
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNbgainMuxSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x68), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO1 enable state in the RX NVS register map for the
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A uint8_t value indicating the enable state to be set (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1Enable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1e), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO1 enable status from a specific register for a given
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved NCO1 enable
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1Enable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1e), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO frequency tuning word for the specified RX instance in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value An 8-bit unsigned integer representing the frequency tuning word
 * to set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1Ftw158_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x21), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO frequency tuning word from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved frequency
 * tuning word will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1Ftw158_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x21), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO frequency tuning word for the specified RX instance in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value An 8-bit unsigned integer representing the frequency tuning word
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1Ftw2316_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x20), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO frequency tuning word from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved frequency
 * tuning word will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1Ftw2316_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x20), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO frequency tuning word for the specified RX instance in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value An 8-bit unsigned integer representing the frequency tuning word
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1Ftw3124_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1f), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO frequency tuning word from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved frequency
 * tuning word will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1Ftw3124_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO frequency tuning word for the specified RX instance in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value An 8-bit unsigned integer representing the frequency tuning word
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1Ftw70_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x22), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO frequency tuning word from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved frequency
 * tuning word will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1Ftw70_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x22), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Updates the NCO frequency tuning word in the RX register map of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer representing the frequency tuning word
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register update operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1FtwUpdate_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2c), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO frequency tuning word from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved frequency
 * tuning word will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1FtwUpdate_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2c), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the NCO1 phase value from the RX register map for a
 * specified instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific RX instance
 * from which to read the NCO1 phase.
 * @param value A pointer to a uint8_t variable where the retrieved NCO1 phase
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1Phase_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x44), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO1 phase offset for a specified RX instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value An 8-bit unsigned integer representing the phase offset value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1PhaseOffset158_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x23), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO1 phase offset value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved phase offset
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1PhaseOffset158_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x23), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO1 phase offset for a specified receiver instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific receiver
 * instance to configure.
 * @param value An 8-bit unsigned integer representing the phase offset value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1PhaseOffset70_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x24), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO1 phase offset value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved phase offset
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1PhaseOffset70_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x24), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO1 phase synchronization in 32-bit mode for a specified
 * instance of the receiver.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the NCO1 phase synchronization.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1PhaseSync32bitMode_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1f1), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO1 phase synchronization value from a specific
 * register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map for the receiver.
 * @param value A pointer to a uint8_t variable where the retrieved phase
 * synchronization value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1PhaseSync32bitMode_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1f1), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO1 phase synchronization frequency tuning word for a
 * specified instance of the receiver.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value An 8-bit unsigned integer representing the frequency tuning word
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1PhaseSyncFtw158_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x2f), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the phase synchronization frequency tuning word from a
 * specified register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * receiver register map.
 * @param value A pointer to a uint8_t variable where the retrieved frequency
 * tuning word will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1PhaseSyncFtw158_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x2f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO1 phase synchronization frequency tuning word in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver register map.
 * @param value An 8-bit unsigned integer representing the frequency tuning word
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1PhaseSyncFtw2316_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x2e), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO1 phase synchronization frequency tuning word from a
 * specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1PhaseSyncFtw2316_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x2e), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO1 phase synchronization frequency tuning word for a
 * specified instance of the receiver.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value An 8-bit unsigned integer representing the frequency tuning word
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1PhaseSyncFtw3124_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1ef), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO1 phase synchronization frequency tuning word from a
 * specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1PhaseSyncFtw3124_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1ef), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO1 phase synchronization frequency tuning word for a
 * specified instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the frequency tuning word
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1PhaseSyncFtw70_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x30), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO1 phase synchronization frequency tuning word from a
 * specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1PhaseSyncFtw70_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x30), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO1 phase synchronization frequency tuning word in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1PhaseSyncFtwReadback_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1f1), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Reads back the NCO1 phase synchronization frequency tuning word from a
 * specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the read value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1PhaseSyncFtwReadback_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1f1), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the NCO1 phase synchronization frequency tuning word from
 * the device's register map.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated type indicating the specific instance of the
 * receiver for which the frequency tuning word is being read.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * frequency tuning word will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero). The retrieved frequency tuning word is stored
 * in the variable pointed to by value.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1PhaseSyncFtwReadbackValue_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1f5), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1f4), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1f3), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1f2), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Reads the NCO1 phase synchronization fractional frequency tuning word
 * remainder from a device's register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type indicating the specific instance of the
 * NVS register map for the RX.
 * @param value A pointer to a 32-bit unsigned integer where the read value will
 * be stored.
 * @return Returns the status of the last read operation, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1PhaseSyncFtwRemainderReadback_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1f8), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1f7), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1f6), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO1 real output enable field in the RX NVS register map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * NCO1 real output.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1RealOutEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1e), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the real output enable status of the NCO1 from the RX
 * register map.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A pointer to a uint8_t variable where the retrieved real output
 * enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco1RealOutEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1e), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO frequency tuning word for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the frequency tuning word
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco2Ftw158_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x27), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO frequency tuning word from a specific register for a
 * given instance of the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved frequency
 * tuning word will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco2Ftw158_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x27), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO frequency tuning word for the specified RX instance in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value An 8-bit unsigned integer representing the frequency tuning word
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco2Ftw2316_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x26), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO frequency tuning word from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved frequency
 * tuning word will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco2Ftw2316_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x26), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the frequency tuning word for the NCO in the RX path of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NCO register.
 * @param value An 8-bit unsigned integer representing the frequency tuning word
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco2Ftw3124_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x25), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO frequency tuning word from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved frequency
 * tuning word will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco2Ftw3124_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x25), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO frequency tuning word for the specified RX instance in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value An 8-bit unsigned integer representing the frequency tuning word
 * to set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco2Ftw70_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x28), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO frequency tuning word from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved frequency
 * tuning word will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco2Ftw70_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x28), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Updates the NCO frequency tuning word in the RX NVS register map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register update operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco2FtwUpdate_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2c), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO frequency tuning word from a specific register and
 * updates the provided value.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco2FtwUpdate_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2c), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO2 phase offset for a specified receiver instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific receiver
 * instance to configure.
 * @param value An 8-bit unsigned integer representing the phase offset value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco2PhaseOffset158_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x29), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the phase offset value from a specific register for a given
 * instance of the receiver.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved phase offset
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco2PhaseOffset158_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x29), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO2 phase offset for a specified receiver instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific receiver
 * instance to configure.
 * @param value An 8-bit unsigned integer representing the phase offset value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco2PhaseOffset70_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x2a), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO2 phase offset value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved phase offset
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco2PhaseOffset70_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x2a), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO2 real output enable field in the RX NVS register map for
 * a specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * NCO2 real output.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco2RealOutEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1e), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the real output enable status of the NCO2 from the specified
 * device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX.
 * @param value A pointer to a uint8_t variable where the retrieved real output
 * enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNco2RealOutEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1e), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO Gcount clock ratio in the RX NVS register map for the
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the NCO Gcount clock ratio.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNcoGcountClkRatio_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1e0), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO Gcount clock ratio from a specified register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock ratio
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNcoGcountClkRatio_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1e0), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the average NCO phase value from the specified register of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver for which the NCO phase is being retrieved.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved NCO
 * phase value will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNcoPhaseAv_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x45), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x46), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO phase offset for a specified RX instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * update.
 * @param value An 8-bit unsigned integer representing the new phase offset
 * value to set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNcoPhaseOffset2Update_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1df), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO phase offset value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved phase offset
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNcoPhaseOffset2Update_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1df), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO phase offset in the RX register map for the specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific RX instance in
 * the register map.
 * @param value A 16-bit unsigned integer representing the phase offset value to
 * be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNcoPhaseOffset2Word_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1e2), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1e1), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO phase offset value from the RX register map and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific RX instance
 * from which to read the NCO phase offset.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved NCO
 * phase offset will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any read operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNcoPhaseOffset2Word_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1e2), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1e1), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the NCO phase output value from the RX register map by
 * reading multiple consecutive registers.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific RX instance to
 * read from.
 * @param value A pointer to a 32-bit integer where the retrieved NCO phase
 * output value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNcoPhaseOut_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x47), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x48), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x49), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x4a), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Non-Tx Local Oscillator MCS Phase Accumulator value in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NCO register.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the phase accumulator.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNcoUseNonTxLOMcsPhaseAccum_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1e), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO phase accumulation value from a specific register
 * for a given RX instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific RX instance to
 * read from.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxNcoUseNonTxLOMcsPhaseAccum_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1e), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO Gcount clock ratio for a specified RX instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value An 8-bit unsigned integer representing the clock ratio value to
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxOverrideNcoGcountClkRatio_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1e0), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO Gcount clock ratio from the specified RX instance of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance
 * from which to read the NCO Gcount clock ratio.
 * @param value A pointer to a uint8_t variable where the retrieved clock ratio
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxOverrideNcoGcountClkRatio_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1e0), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR 4x division value for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the PFIR 4x division.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxPfir4xDiv4p5_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3a), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated type indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxPfir4xDiv4p5_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3a), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR 4x division value in the RX register map for the
 * specified instance.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value A 16-bit unsigned integer representing the PFIR 4x division
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxPfir4xDivValue_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x32), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x33), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR 4x division value from the RX register map of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure used for communication with
 * the ADRV9001.
 * @param instance An enumerated value representing the specific RX instance
 * from which to read the PFIR 4x division value.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved PFIR
 * 4x division value will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxPfir4xDivValue_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x32), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x33), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the remainder of the Rx phase synchronization frequency tuning
 * word in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A 16-bit unsigned integer representing the value to be set for
 * the Rx phase sync frequency tuning word remainder.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxPhaseSyncFtwRemainder_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x42), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x43), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the remainder of the RxPhaseSync frequency tuning word from
 * the specified device register.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * Rx register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the register read operations, with the
 * retrieved frequency tuning word remainder stored in the provided
 * value pointer.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxPhaseSyncFtwRemainder_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x42), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x43), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the phase synchronization fractional part for the RX FTW in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * phase synchronization.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxPhaseSyncFtwRemainder2316_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1f0), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the FTW remainder value from a specific register for the RX
 * phase synchronization.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * RX phase synchronization.
 * @param value A pointer to a uint8_t variable where the retrieved FTW
 * remainder value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxPhaseSyncFtwRemainder2316_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1f0), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO sync cycles for the RX phase synchronization in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance for
 * which the NCO sync cycles are being set.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the NCO sync cycles.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxPhaseSyncNcoSyncCycles_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x41), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO sync cycles value from the RX phase synchronization
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific RX instance to
 * read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxPhaseSyncNcoSyncCycles_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x41), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX phase synchronization start sync value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * configure.
 * @param value An 8-bit unsigned integer representing the synchronization value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxPhaseSyncStartSync_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x41), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Rx Phase Sync Start Sync value from a specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * Rx register.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxPhaseSyncStartSync_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x41), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the global clock enable reset value for a specified RX profile in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX profile
 * instance.
 * @param value A 8-bit unsigned integer representing the value to be set for
 * the global clock enable reset.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxProfileDpGlobalClkEnableReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3b), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field from the ADRV9001
 * device and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxProfileDpGlobalClkEnableReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3b), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SSI global clock enable/reset configuration for a specified
 * RX profile in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX profile
 * instance.
 * @param value A uint8_t value that indicates the desired configuration for the
 * SSI global clock enable/reset.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxProfileSsiGlobalClkEnableReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3b), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SSI global clock enable reset value from a specific
 * register for a given RX profile instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific RX profile
 * instance to access.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * reset value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxProfileSsiGlobalClkEnableReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3b), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the realignment clock status from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock status
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxRealignClk1105Status_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1cc), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the realignment clock restart value in the RX register map of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxRealignClkRestart_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1cc), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the realignment clock restart value from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxRealignClkRestart_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1cc), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the realignment status of the RX core clock from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxRealignRxCoreClkStatus_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1cc), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a shadow register value for the RX register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX register
 * instance to be modified.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the shadow register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxRegLoadShadow_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x131), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a shadow register value from the RX register map of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX register
 * instance to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxRegLoadShadow_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x131), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the RX RFDC SRAM 0 NAP Ret PSD
 * register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxRfdcSram0NapRetPsd_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d7), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxRfdcSram0NapRetPsd_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d7), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the RX RFDC SRAM 1 NAP Retention PSD
 * register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxRfdcSram1NapRetPsd_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d7), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxRfdcSram1NapRetPsd_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d7), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX QEC clock selection in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxRxqecClockSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x40), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value from a specific register for the
 * RX QEC of the ADRV9001 device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxRxqecClockSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x40), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the free-running clock enable state for the RX SSI in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value indicating the desired state of the free-running
 * clock enable (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxSsiFreeRunningClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1e3), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the free-running clock enable bit from a
 * specific register for the RX SSI.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxSsiFreeRunningClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1e3), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the global reset state for the RX SSI in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A uint8_t value that indicates the desired reset state to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxSsiGlobalReset_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1e4), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the global reset status from the RX SSI register for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX SSI register.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxSsiGlobalReset_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1e4), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SSI invert configuration for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX path.
 * @param value A uint8_t value indicating the desired SSI invert setting.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxSsiIInvert_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ce), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the inverted SSI value from the RX register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific RX instance to
 * read from.
 * @param value A pointer to a uint8_t variable where the retrieved inverted SSI
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxSsiIInvert_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ce), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SSI I-swap configuration for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value representing the I-swap configuration to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxSsiISwap_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ce), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SSI input swap configuration value from the specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxSsiISwap_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ce), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Q-inversion configuration for the RX SSI of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A uint8_t value indicating the Q-inversion setting to be
 * applied.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxSsiQInvert_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ce), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the inverted Q value from the RX SSI register for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX SSI register.
 * @param value A pointer to a uint8_t variable where the retrieved inverted Q
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxSsiQInvert_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ce), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SSI Q swap configuration for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxSsiQSwap_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ce), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the RX SSI Q
 * swap configuration.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX SSI configuration.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxSsiQSwap_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ce), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SSI zero selection field in the RX NVS register map for the
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxSsiZeroSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd7), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific value from a register in the ADRV9001 device's RX
 * SSI configuration.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * RX SSI configuration.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxSsiZeroSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd7), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the temperature gain compensation value in the RX register map of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance in
 * the register map.
 * @param value An 8-bit unsigned integer representing the temperature gain
 * compensation value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxTempGainComp_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf3), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the temperature gain compensation value from the RX register
 * map for a specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific RX instance to
 * read from.
 * @param value A pointer to a uint8_t variable where the retrieved temperature
 * gain compensation value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxTempGainComp_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf3), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RXDDC position EJWTC selection in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxddcPosEjwtSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa9), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxddcPosEjwtSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa9), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RXGT clock enable field in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A 1-bit value indicating whether to enable (1) or disable (0)
 * the RXGT clock.
 * @return Returns the status of the write operation, indicating success (0) or
 * an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxgtClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x160), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock enable status from a specific register for the
 * given instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for which the clock enable status is being
 * retrieved.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxgtClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x160), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the RX NVS register map for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxnbDpinfifoSramNapRetPsd_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d8), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxnbDpinfifoSramNapRetPsd_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d8), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR gain for a specified RX instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance for
 * which the PFIR gain is being set.
 * @param value An 8-bit unsigned integer representing the gain value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxnbPfirGain_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6b), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR gain value from a specific register for a given RX
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific RX instance
 * from which to read the PFIR gain.
 * @param value A pointer to a uint8_t variable where the retrieved PFIR gain
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxnbPfirGain_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6b), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the symmetric PFIR value for a specified instance in the ADRV9001
 * receiver register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the PFIR register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxnbPfirSymmetric_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6b), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the symmetric PFIR value from the RXNB register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXNB register.
 * @param value A pointer to a uint8_t variable where the retrieved PFIR value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxnbPfirSymmetric_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6b), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR taps value for a specified RX instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance for
 * which the PFIR taps are being set.
 * @param value An 8-bit unsigned integer representing the PFIR taps value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxnbPfirTaps_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6c), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR tap values from the RXNB register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXNB register.
 * @param value A pointer to a uint8_t variable where the retrieved PFIR tap
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxnbPfirTaps_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6c), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RXNB resampling enable field in the ADRV9001 NVS register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value that indicates whether to enable (1) or disable
 * (0) the resampling.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxnbResampEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc1), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the resampling enable status from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map for the receiver.
 * @param value A pointer to a uint8_t variable where the retrieved resampling
 * enable status will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxnbResampEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc1), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the resampling phase I configuration for a specified receiver
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific receiver
 * instance to configure.
 * @param value A 16-bit unsigned integer representing the resampling phase I
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxnbResampPhaseI_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xc3), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xc2), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the resampling phase I value from the RX NVS register map
 * for a specified instance.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * resampling phase I value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the register reads failed.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxnbResampPhaseI_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xc3), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xc2), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Q component of the resampling phase for a specified receiver
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific receiver
 * instance to configure.
 * @param value A 16-bit unsigned integer representing the resampling phase
 * value to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxnbResampPhaseQ_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xc5), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xc4), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the resampling phase Q value from the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * resampling phase Q value will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxnbResampPhaseQ_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xc5), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xc4), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RXNB RXPFIR52 input enable field in the ADRV9001 register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXNB register.
 * @param value A 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxnbRxpfir52InEn_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xcf), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxnbRxpfir52InEn_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xcf), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX output selection in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value that specifies the desired RX output selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxoutSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xba), (value >> 0), 0x6, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RXOUT selection value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RXOUT selection.
 * @param value A pointer to a uint8_t variable where the retrieved RXOUT
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxoutSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xba), &register_value, 0x6, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX QEC observation capture enable value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value A uint8_t value that indicates the enable state for the RX QEC
 * observation capture.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxqecObsCaptEnable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x174), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the observation capture enable status from a specific
 * register for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_RxqecObsCaptEnable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x174), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the second NCO phase average value from the specified
 * register of the device.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved phase
 * average value will be stored.
 * @return Returns the status of the last register read operation, which
 * indicates success (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_SecondNcoPhaseAv_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xa8), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xa7), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the slicer gain disable offset word in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map for the receiver.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_SlicerGainDisableOffsetWord_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x16e), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the slicer gain disable offset word from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_SlicerGainDisableOffsetWord_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x16e), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the slicer pin control mode in the ADRV9001 receiver register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * receiver register map.
 * @param value An 8-bit unsigned integer representing the control mode value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_SlicerPinControlMode_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x168), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the slicer pin control mode value from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * receiver.
 * @param value A pointer to a uint8_t variable where the retrieved control mode
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_SlicerPinControlMode_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x168), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the slicer pin control step in the ADRV9001 device's RX NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_SlicerPinControlStep_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x169), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the slicer pin control step value from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the RX slicer.
 * @param value A pointer to a uint8_t variable where the retrieved slicer pin
 * control step value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_SlicerPinControlStep_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x169), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software status register for the RX NVS of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_SwStatus0_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x179), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the software status from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_SwStatus0_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x179), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software status register for the RX instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific RX instance to
 * be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the software status register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_SwStatus1_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x17a), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the software status from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_SwStatus1_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x17a), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ARM0 enable register for the specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value that indicates the enable state to be set (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_SysArm0Enable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x177), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the RX system
 * ARM0 and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * RX register.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_SysArm0Enable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x177), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ARM1 enable register for the RX NVS of the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX NVS register.
 * @param value A uint8_t value that indicates the enable state to be set (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_SysArm1Enable_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x177), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the RX system
 * ARM1 enable state.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * RX register.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_SysArm1Enable_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x177), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TED count clear field in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A uint8_t value that indicates the new value to set for the TED
 * count clear field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_TedCntClear_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa2), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the TED count clear value from a specified register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the receiver.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_TedCntClear_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa2), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TED data selection for a specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value A uint8_t value that specifies the data selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_TedDataSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa1), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the TED data selection value from the RX register map of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * RX register map.
 * @param value A pointer to a uint8_t variable where the retrieved TED data
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_TedDataSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa1), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the observation source selection for the RXMUX301 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_TxAlgRxmux301ObsSourceSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xfb), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_TxAlgRxmux301ObsSourceSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xfb), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the observation source selection for the RXMUX302 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_TxAlgRxmux302ObsSourceSel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xfb), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_TxAlgRxmux302ObsSourceSel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xfb), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Vcorrsig register values for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated type indicating the specific instance of the
 * NVS register map.
 * @param regInstance An unsigned integer representing the specific register
 * instance to be modified.
 * @param value A 32-bit unsigned integer containing the value to be written to
 * the registers.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Vcorrsig_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint32_t regInstance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x8d + 0x0 + (regInstance * 0x1)), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x7d + 0x0 + (regInstance * 0x1)), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x6d + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from a series of registers for a specified
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated type indicating the specific instance of the
 * NVS register map.
 * @param regInstance An unsigned integer representing the specific register
 * instance to read from.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, where a
 * status of 0 indicates success and any non-zero value indicates an
 * error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_Vcorrsig_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint32_t regInstance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x8d + 0x0 + (regInstance * 0x1)), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x7d + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x6d + 0x0 + (regInstance * 0x1)), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the NVS register map for the RX path of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for RX.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_X4x5Sel_Set(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa0), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapRx_X4x5Sel_Get(void *const device,
    adrv9001_BfNvsRegmapRx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa0), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


#endif // __ADRV9001_BF_NVS_REGMAP_RX_H__