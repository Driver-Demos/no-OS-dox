/**
 * \file
 * \brief BitField accessors for nvs_regmap_core_2
 *
 * Autogenerated with yoda-gen 1.1.0. Do not modify
 *
 * \copyright Copyright (c) 2020 Analog Devices, Inc. All Rights Reserved.
 * This software is proprietary to Analog Devices, Inc. and its licensors.
 */

 #ifndef __ADRV9001_BF_NVS_REGMAP_CORE_2_H__
 #define __ADRV9001_BF_NVS_REGMAP_CORE_2_H__

#include "adrv9001_bf_hal.h"



/***************************************************************************//**
 * @brief Sets the inversion state of the GPIO 118 pin in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the inversion state to be
 * set (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_AnalogGpio118Invert_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1c7), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the inverted state of GPIO 118 from the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the inverted GPIO state
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_AnalogGpio118Invert_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1c7), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the source selection for the Analog GPIO 118 on the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the source selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_AnalogGpio118SourceSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1c6), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the source selection for the analog GPIO 118 from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved source
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_AnalogGpio118SourceSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1c6), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the inversion state of the GPIO30 pin in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value indicating the desired inversion state (0 or 1)
 * for GPIO30.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_AnalogGpio30Invert_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1c7), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the inverted state of GPIO 30 from the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved inverted
 * GPIO state will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_AnalogGpio30Invert_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1c7), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the source selection for the Analog GPIO 30 on the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the source selection
 * value for the Analog GPIO 30.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_AnalogGpio30SourceSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1c4), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the source selection for Analog GPIO 30 from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved source
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_AnalogGpio30SourceSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1c4), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the inversion state of the GPIO74 pin in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value indicating the desired inversion state (0 or 1)
 * for GPIO74.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_AnalogGpio74Invert_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1c7), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the inverted state of GPIO74 from the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved inverted
 * GPIO74 value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_AnalogGpio74Invert_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1c7), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the source selection for the Analog GPIO 74 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the source selection
 * value for the Analog GPIO 74.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_AnalogGpio74SourceSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1c5), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the source selection for the analog GPIO 74 from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved source
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_AnalogGpio74SourceSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1c5), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the auxiliary DAC0 register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the value to be set for
 * the auxiliary DAC0.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any of the write operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Auxdac0_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x0), (value >> 0));
    if (0 != status) return status;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1), (value >> 8), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the auxiliary DAC0 from the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved DAC
 * value will be stored.
 * @return Returns the status of the read operations, which indicates success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Auxdac0_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x0), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the configuration for the auxiliary DAC0 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the auxiliary DAC0 configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Auxdac0Config_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the configuration value of the auxiliary DAC0 from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved
 * configuration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Auxdac0Config_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the auxiliary DAC 0 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value indicating the desired power-down state (0 or 1)
 * for the auxiliary DAC 0.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Auxdac0Pd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x8), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power-down status of the auxiliary DAC0 from the
 * device's register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved power-down
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Auxdac0Pd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x8), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the auxiliary DAC1 register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the value to be set for
 * the auxiliary DAC1.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Auxdac1_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x2), (value >> 0));
    if (0 != status) return status;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x3), (value >> 8), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the auxiliary DAC1 from the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved DAC1
 * value will be stored.
 * @return Returns the status of the read operations, which indicates success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Auxdac1_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x3), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x2), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the configuration for the auxiliary DAC1 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the configuration value
 * to be set for the auxiliary DAC1.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Auxdac1Config_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x3), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the configuration value of the auxiliary DAC1 from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved
 * configuration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Auxdac1Config_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x3), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the auxiliary DAC1 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the power-down state to
 * be set for the auxiliary DAC1.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Auxdac1Pd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x8), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power-down status of the auxiliary DAC1 from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved power-down
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Auxdac1Pd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x8), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the auxiliary DAC2 register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the value to be set in
 * the auxiliary DAC2 register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Auxdac2_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x4), (value >> 0));
    if (0 != status) return status;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x5), (value >> 8), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the auxiliary DAC2 from the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved DAC2
 * value will be stored.
 * @return Returns the status of the read operations, with `*value` containing
 * the combined 16-bit value from the two registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Auxdac2_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x5), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x4), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the configuration for the auxiliary DAC2 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the auxiliary DAC2.
 * @return Returns an integer status code indicating the success or failure of
 * the configuration operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Auxdac2Config_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x5), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the configuration value of the auxiliary DAC2 from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved
 * configuration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Auxdac2Config_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x5), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the auxiliary DAC 2 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the power-down state to
 * be set for auxiliary DAC 2.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Auxdac2Pd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x8), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the auxiliary DAC2 power-down status from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Auxdac2Pd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x8), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the auxiliary DAC 3 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the value to be set for
 * the auxiliary DAC 3.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the operations performed.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Auxdac3_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x6), (value >> 0));
    if (0 != status) return status;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x7), (value >> 8), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the auxiliary DAC 3 from the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved DAC
 * value will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Auxdac3_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x7), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x6), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the configuration for the auxiliary DAC 3 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the auxiliary DAC 3 configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the configuration write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Auxdac3Config_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x7), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the configuration value of the auxiliary DAC 3 from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * configuration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Auxdac3Config_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x7), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down state of the auxiliary DAC 3 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the power-down state to
 * be set for auxiliary DAC 3.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Auxdac3Pd_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x8), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power-down status of the auxiliary DAC 3 from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved power-down
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Auxdac3Pd_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x8), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the auxiliary DAC multiplexer selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the multiplexer selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_AuxdacMuxsel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x11), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the auxiliary DAC multiplexer selection from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * multiplexer selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_AuxdacMuxsel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x11), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the auxiliary DAC configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the auxiliary DAC configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_AuxdacXconfig_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x11), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific auxiliary DAC configuration register
 * from the device.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_AuxdacXconfig_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x11), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fall mask for GPIO0 in the BBIC register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO0 fall mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio0FallMaskSp_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ec), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the fall mask status of GPIO0 from the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved fall mask
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio0FallMaskSp_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ec), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC GPIO0 pin mask in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO0 pin mask.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio0PinMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d7), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO0 pin mask value from a specific register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved GPIO0 pin
 * mask value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio0PinMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d7), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO0 pin selection for the BBIC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * GPIO0 pin selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio0PinSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d7), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO0 pin selection value from a specific register in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO0 pin
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio0PinSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d7), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the rise mask for GPIO0 in the BBIC register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the rise mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio0RiseMaskSp_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ec), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the rise mask value for GPIO0 from a specific register in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved rise mask
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio0RiseMaskSp_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ec), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fall mask for BBIC GPIO1 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the fall mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio1FallMaskSp_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ec), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the fall mask setting for BBIC GPIO1 from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved fall mask
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio1FallMaskSp_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ec), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC GPIO1 pin mask in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO1 pin mask.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio1PinMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d8), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO pin mask value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO pin
 * mask value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio1PinMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d8), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO1 pin selection for the BBIC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * GPIO1 pin selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio1PinSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d8), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO1 pin selection value from a specific register of
 * the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO1 pin
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio1PinSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d8), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the rise mask for GPIO1 in the BBIC register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the rise mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio1RiseMaskSp_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ec), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the rise mask value for BBIC GPIO1 from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved rise mask
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio1RiseMaskSp_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ec), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fall mask for GPIO2 in the BBIC register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the fall mask.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio2FallMaskSp_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ec), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the fall mask setting for BBIC GPIO2 from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved fall mask
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio2FallMaskSp_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ec), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pin mask for BBIC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO pin mask.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO pin mask setting operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio2PinMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d9), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO pin mask value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO pin
 * mask value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio2PinMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d9), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pin selection for the BBIC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the GPIO pin selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO pin selection operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio2PinSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d9), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO pin selection value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO pin
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio2PinSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d9), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the rise mask for GPIO2 in the BBIC register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the rise mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio2RiseMaskSp_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ec), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO2 rise mask setting from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO2 rise
 * mask value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio2RiseMaskSp_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ec), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fall mask for GPIO 3 in the BBIC of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the fall mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio3FallMaskSp_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ec), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the fall mask setting for GPIO3 from the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved fall mask
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio3FallMaskSp_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ec), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pin mask for BBIC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * as the GPIO pin mask.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO pin mask setting operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio3PinMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1da), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific GPIO pin mask from a hardware
 * register.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO pin
 * mask value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio3PinMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1da), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO3 pin selection for the BBIC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * GPIO3 pin selection.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio3PinSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1da), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific GPIO pin selection from a hardware
 * register.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO pin
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio3PinSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1da), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the rise mask for GPIO3 in the BBIC of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the rise mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio3RiseMaskSp_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ec), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the rise mask value for GPIO3 from the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved rise mask
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicGpio3RiseMaskSp_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ec), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC hop value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the hop value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicHop1_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1c9), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicHop1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1c9), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pin selection for BBIC hop in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the GPIO pin selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO pin selection operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicHop1GpioPinSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1c9), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO pin selection value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO pin
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicHop1GpioPinSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1c9), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Hop1 pin mode in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired pin mode
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicHop1PinMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1c9), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC Hop1 pin mode value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved pin mode
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicHop1PinMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1c9), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC hop value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the hop value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicHop2_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ca), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicHop2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ca), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pin selection for BBIC hop in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO pin selection.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicHop2GpioPinSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ca), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO pin selection value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO pin
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicHop2GpioPinSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ca), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Hop2 pin mode in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired pin mode
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicHop2PinMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ca), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC Hop2 pin mode value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved pin mode
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicHop2PinMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ca), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC hop edge selection value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the hop edge selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicHopEdge0Sel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1db), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC hop edge selection value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved hop edge
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicHopEdge0Sel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1db), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC hop edge selection value in the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the hop edge selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicHopEdge1Sel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1dc), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC hop edge selection value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved hop edge
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicHopEdge1Sel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1dc), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC hop edge selection value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the hop edge selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicHopEdge2Sel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1dd), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC hop edge selection value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicHopEdge2Sel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1dd), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC hop edge 3 selection in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicHopEdge3Sel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1de), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC hop edge 3 selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicHopEdge3Sel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1de), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC hop mode in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the hop mode value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicHopMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1c8), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC hop mode value from a specific register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved hop mode
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicHopMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1c8), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC monitor enable state in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the state to set for the BBIC
 * monitor enable.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicMonitorEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1df), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC monitor enable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved monitor
 * enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicMonitorEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1df), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC monitor enable pin selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the BBIC monitor enable pin selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicMonitorEnablePinSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1df), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC monitor enable pin selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicMonitorEnablePinSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1df), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC ORX1 ARM override control value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the BBIC ORX1 ARM override control.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicOrx1ArmOverrideCtrl_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1cf), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC ORX1 ARM override control value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicOrx1ArmOverrideCtrl_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1cf), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC ORX1 enable state in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the enable state to be set for BBIC
 * ORX1.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicOrx1Enable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1cf), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC ORX1 enable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved enable
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicOrx1Enable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1cf), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC ORX1 enable state by writing a specified value to a
 * hardware register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicOrx1EnableByArm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1cf), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC ORX1 enable status from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicOrx1EnableByArm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1cf), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pin selection for the BBIC ORX1 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the GPIO pin selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO pin selection write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicOrx1GpioPinSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1cf), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO pin selection value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO pin
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicOrx1GpioPinSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1cf), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC ORX1 pin mode in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired pin mode
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicOrx1PinMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1cf), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC ORX1 pin mode from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved pin mode
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicOrx1PinMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1cf), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC ORX2 ARM override control value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the BBIC ORX2 ARM override control.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicOrx2ArmOverrideCtrl_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d0), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC ORX2 ARM override control value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicOrx2ArmOverrideCtrl_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d0), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC ORX2 enable state in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the enable state to be set
 * for BBIC ORX2.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicOrx2Enable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d0), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC ORX2 enable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicOrx2Enable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d0), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC ORX2 enable state in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicOrx2EnableByArm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d0), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC ORX2 enable status from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicOrx2EnableByArm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d0), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO pin selection for the BBIC ORX2 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the GPIO pin selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO pin selection write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicOrx2GpioPinSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d0), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO pin selection value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO pin
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicOrx2GpioPinSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d0), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC ORX2 pin mode in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired pin mode
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicOrx2PinMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d0), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC ORX2 pin mode from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved pin mode
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicOrx2PinMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d0), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the lock state of the BBIC PLL1 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the lock state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicPll1Lock_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1e0), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the lock status of the BBIC PLL1 by reading a specific
 * hardware register.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved lock status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicPll1Lock_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1e0), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC PLL1 lock net selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the lock net selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicPll1LockNetSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1e0), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PLL1 lock network selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved PLL1 lock
 * network selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicPll1LockNetSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1e0), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PLL2 lock status in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the lock status to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicPll2Lock_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1e0), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PLL2 lock status from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the PLL2 lock status will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicPll2Lock_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1e0), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PLL2 lock network selection for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the network selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicPll2LockNetSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1e0), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PLL2 lock network selection value from a specific
 * register.
 *
 * @param device A pointer to the device context used for reading the register.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicPll2LockNetSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1e0), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the auxiliary lock value for the BBIC PLL in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * auxiliary lock.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicPllAuxLock_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1e0), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the auxiliary lock status of the BBIC PLL from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved lock
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicPllAuxLock_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1e0), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the auxiliary lock network selection for the BBIC PLL in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicPllAuxLockNetSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1e0), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the auxiliary lock network selection value from a specific
 * register of the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicPllAuxLockNetSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1e0), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC RX1 arm override control value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the BBIC RX1 arm override control.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx1ArmOverrideCtrl_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1cb), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC RX1 arm override control value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx1ArmOverrideCtrl_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1cb), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC RX1 DDC LO sync value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the BBIC RX1 DDC LO sync.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx1DdcLoSync_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1cc), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization value from the BBIC RX1 DDC register
 * and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved low
 * synchronization value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx1DdcLoSync_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1cc), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC RX1 DDC LO sync network selection in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx1DdcLoSyncNetSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1cc), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC RX1 DDC LO sync net select value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx1DdcLoSyncNetSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1cc), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC RX1 enable state in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the enable state to be set for BBIC
 * RX1.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx1Enable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1cb), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC RX1 enable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx1Enable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1cb), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC RX1 enable state by writing a specified value to a
 * hardware register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx1EnableByArm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1cb), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC RX1 enable status from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx1EnableByArm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1cb), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC RX1 external LPB enable state in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the enable state to be set
 * for the BBIC RX1 external LPB.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx1ExtlpbEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1cc), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC RX1 external LPB enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx1ExtlpbEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1cc), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC RX1 hop edge during RX1 high mask in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx1HopEdgeDuringRx1HighMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1cc), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC Rx1 Hop Edge During Rx1 High Mask value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx1HopEdgeDuringRx1HighMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1cc), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC RX1 hop selection value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the hop selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx1HopSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1cc), (value >> 0), 0x38, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC RX1 hop selection value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved hop
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx1HopSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1cc), &register_value, 0x38, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC RX1 internal loopback enable value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to set for the
 * internal loopback enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx1IntlpbEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1cc), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC RX1 internal loopback enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved loopback
 * enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx1IntlpbEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1cc), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC RX1 pin mode in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired pin mode
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx1PinMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1cb), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC RX1 pin mode from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved pin mode
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx1PinMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1cb), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC RX2 arm override control value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the BBIC RX2 arm override control.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx2ArmOverrideCtrl_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1cd), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC RX2 arm override control value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx2ArmOverrideCtrl_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1cd), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC RX2 DDC LO sync value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the BBIC RX2 DDC LO sync.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx2DdcLoSync_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ce), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx2DdcLoSync_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ce), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC RX2 DDC LO sync net selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx2DdcLoSyncNetSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ce), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC RX2 DDC LO sync net selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx2DdcLoSyncNetSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ce), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC RX2 enable state in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the enable state to be set
 * for BBIC RX2.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx2Enable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1cd), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC RX2 enable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx2Enable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1cd), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC RX2 enable state in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to set for the
 * BBIC RX2 enable state.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx2EnableByArm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1cd), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC RX2 enable status from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx2EnableByArm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1cd), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC RX2 external LPB enable state in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the enable state to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx2ExtlpbEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ce), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC RX2 external LPB enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved status will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx2ExtlpbEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ce), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC RX2 hop edge during RX2 high mask in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx2HopEdgeDuringRx2HighMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ce), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx2HopEdgeDuringRx2HighMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ce), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC RX2 hop selection value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the hop selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx2HopSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ce), (value >> 0), 0x38, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC RX2 hop selection value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved hop
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx2HopSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ce), &register_value, 0x38, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC RX2 interleaved path enable register for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that specifies the enable state for the BBIC RX2
 * interleaved path.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx2IntlpbEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ce), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC RX2 interleaved enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx2IntlpbEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ce), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC RX2 pin mode by writing a specified value to a hardware
 * register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the pin mode value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx2PinMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1cd), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC RX2 pin mode from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved pin mode
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicRx2PinMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1cd), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx1 arm override control register for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the control register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1ArmOverrideCtrl_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d1), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC Tx1 Arm Override Control register value from the
 * device.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1ArmOverrideCtrl_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d1), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx1 enable state in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the enable state to be set for BBIC
 * Tx1.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1Enable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d1), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC Tx1 enable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved BBIC Tx1
 * enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1Enable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d1), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx1 enable state in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to set for the
 * BBIC Tx1 enable state.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1EnableByArm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d1), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC Tx1 enable status from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved BBIC Tx1
 * enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1EnableByArm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d1), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx1 gain by writing a specified value to a hardware
 * register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the gain value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1GainChange_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d2), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC Tx1 gain change value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved gain
 * change value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1GainChange_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d2), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx1 gain change net selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the gain change net
 * selection value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1GainChangeNetSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d2), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC Tx1 gain change net selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1GainChangeNetSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d2), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx1 gain ramp-up value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the gain ramp-up value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1GainRampup_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d2), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC Tx1 gain ramp-up value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved gain ramp-up
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1GainRampup_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d2), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx1 gain ramp-up net selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the gain ramp-up net
 * selection value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1GainRampupNetSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d2), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC Tx1 gain ramp-up net selection value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1GainRampupNetSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d2), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx1 hop edge during Tx1 high mask in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1HopEdgeDuringTx1HighMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d1), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC Tx1 Hop Edge During Tx1 High Mask value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1HopEdgeDuringTx1HighMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d1), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx1 hop selection value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the hop selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1HopSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d1), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC Tx1 hop selection value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved hop
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1HopSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d1), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx1 NCO Lo Sync0 register value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1NcoLoSync0_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d3), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization value from the BBIC Tx1 NCO
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved
 * synchronization value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1NcoLoSync0_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d3), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx1 NCO Lo Sync0 Net Select value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the NCO Lo Sync0 Net Select.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1NcoLoSync0NetSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d3), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization net selection value from a specific
 * register of the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1NcoLoSync0NetSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d3), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx1 NCO Lo Sync1 register value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1NcoLoSync1_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d3), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization value from the BBIC Tx1 NCO
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * synchronization value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1NcoLoSync1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d3), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx1 NCO Lo Sync 1 Net Select value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the BBIC Tx1 NCO Lo Sync 1 Net Select.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1NcoLoSync1NetSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d3), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO low synchronization net selection value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1NcoLoSync1NetSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d3), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx1 NCO Lo Sync2 register value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1NcoLoSync2_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d3), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1NcoLoSync2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d3), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx1 NCO Lo Sync 2 Net Select register value for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1NcoLoSync2NetSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d3), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1NcoLoSync2NetSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d3), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx1 pin mode in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired pin mode
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1PinMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d1), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC Tx1 pin mode from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved pin mode
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx1PinMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d1), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx2 ARM override control value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the BBIC Tx2 ARM override control.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2ArmOverrideCtrl_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d4), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC Tx2 arm override control value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2ArmOverrideCtrl_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d4), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx2 enable state in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the enable state to be set
 * for BBIC Tx2.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2Enable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d4), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC Tx2 enable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved BBIC Tx2
 * enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2Enable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d4), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx2 enable state in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to set for the
 * BBIC Tx2 enable state.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2EnableByArm_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d4), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC Tx2 enable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved status
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2EnableByArm_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d4), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx2 gain by writing a specified value to a hardware
 * register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the gain value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2GainChange_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d5), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC Tx2 gain change value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved gain change
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2GainChange_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d5), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx2 gain change net selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the gain change net
 * selection value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2GainChangeNetSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d5), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC Tx2 gain change net selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2GainChangeNetSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d5), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx2 gain ramp-up value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the gain ramp-up value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2GainRampup_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d5), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC Tx2 gain ramp-up value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved gain ramp-up
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2GainRampup_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d5), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx2 gain ramp-up network selection in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the gain ramp-up network
 * selection value.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2GainRampupNetSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d5), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC Tx2 gain ramp-up net selection value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2GainRampupNetSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d5), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx2 Hop Edge During Tx2 High Mask in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2HopEdgeDuringTx2HighMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d4), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC Tx2 Hop Edge During Tx2 High Mask value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2HopEdgeDuringTx2HighMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d4), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx2 hop selection value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the hop selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2HopSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d4), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC Tx2 hop selection value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved hop
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2HopSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d4), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low synchronization value for the BBIC Tx2 NCO in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the low synchronization.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2NcoLoSync0_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d6), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization value of the NCO from the BBIC
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved low
 * synchronization value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2NcoLoSync0_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d6), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx2 NCO Lo Sync0 Net Select value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the BBIC Tx2 NCO Lo Sync0 Net Select.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2NcoLoSync0NetSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d6), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO low synchronization net selection value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2NcoLoSync0NetSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d6), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx2 NCO Lo Sync1 register value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2NcoLoSync1_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d6), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2NcoLoSync1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d6), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx2 NCO Lo Sync 1 Net Select value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the NCO Lo Sync 1 Net Select.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2NcoLoSync1NetSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d6), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO low synchronization net selection value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2NcoLoSync1NetSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d6), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx2 NCO Lo Sync2 register value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2NcoLoSync2_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d6), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2NcoLoSync2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d6), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx2 NCO Lo Sync to Net Select value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the BBIC Tx2 NCO Lo Sync to Net Select.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2NcoLoSync2NetSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d6), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2NcoLoSync2NetSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d6), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBIC Tx2 pin mode in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the desired pin mode
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2PinMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d4), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBIC Tx2 pin mode from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved pin mode
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_BbicTx2PinMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d4), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO4 ARM interrupt mask in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO4 ARM interrupt mask.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Gpio4ArmIrqMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ea), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO4 ARM interrupt mask value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved interrupt
 * mask value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Gpio4ArmIrqMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ea), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO4 ARM IRQ pin selection in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO4 ARM IRQ pin selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Gpio4ArmIrqPinSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ea), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO4 ARM IRQ pin selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO4 ARM
 * IRQ pin selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Gpio4ArmIrqPinSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ea), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO5 ARM interrupt mask in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * GPIO5 ARM interrupt mask.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Gpio5ArmIrqMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1eb), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO5 ARM interrupt mask value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved interrupt
 * mask value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Gpio5ArmIrqMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1eb), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO5 ARM IRQ pin selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * GPIO5 ARM IRQ pin selection.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Gpio5ArmIrqPinSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1eb), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO5 ARM IRQ pin selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO5 ARM
 * IRQ pin selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Gpio5ArmIrqPinSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1eb), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the interrupt delay enable value in the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to set for the
 * interrupt delay enable.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_IntDelay0Enable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the interrupt delay enable status from a specific register
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_IntDelay0Enable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the internal delay 1 enable configuration for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the internal delay 1 enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_IntDelay1Enable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1d), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the interrupt delay setting from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_IntDelay1Enable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1d), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LUT address in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the LUT address to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_LutAddr_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xf), (value >> 8), 0x1, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xe), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 16-bit value from two specific registers in the device's
 * memory.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, which indicates
 * success or failure of the register reads.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_LutAddr_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xf), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xe), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LUT read enable value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the LUT read enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_LutRdEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xf), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LUT read enable status from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_LutRdEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xf), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LUT write data in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the result of the register
 * write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_LutWrData_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x10), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in a
 * provided variable.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_LutWrData_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x10), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LUT write enable status in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to set for the
 * LUT write enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_LutWrEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xf), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LUT write enable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_LutWrEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xf), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Main Hop 1 Enable Pedestal Enable register for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that specifies the enable state for the Main Hop
 * 1 Pedestal.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop1EnablePedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x181), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop1EnablePedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x181), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Main Hop 1 Enable Ped End in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop1EnablePedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x181), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop1EnablePedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x181), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the end position edge detection for the main hop 1 enable in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop1EnablePedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x181), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the ADRV9001
 * device and stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop1EnablePedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x181), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the main hop 1 enable pedestrian mode in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that indicates the state to set for the main hop
 * 1 enable pedestrian mode.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop1EnablePedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x181), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop1EnablePedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x181), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the main hop 1 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop1EnablePedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x181), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the Main Hop 1 Enable Ped Soft Override Enable
 * register from the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop1EnablePedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x181), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Main Hop 1 Enable Pedestal in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop1EnablePedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x181), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop1EnablePedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x181), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Main Hop 1 Enable Ped Start in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop1EnablePedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x181), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type for the Main Hop 1 Enable Ped Start
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop1EnablePedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x181), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection for the main hop 1 enable in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * for negative edge detection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop1EnablePedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x181), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the Main Hop 1
 * Enable Ped Start Negedge Detect feature.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop1EnablePedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x181), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the end delay for the main hop 1 enable pedestrian trigger by
 * writing to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer that contains the value to be written
 * to the registers, which is split into three parts.
 * @return Returns the status of the last write operation, where a non-zero
 * value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop1EnablePedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x187), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x186), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x185), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, with the
 * retrieved 24-bit value stored in the location pointed to by the input
 * 'value'.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop1EnablePedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x187), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x186), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x185), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the start delay for the Main Hop 1 Enable Ped Trigger in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the value to be written,
 * which is split across three registers.
 * @return Returns the status of the last register write operation, indicating
 * success (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop1EnablePedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x184), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x183), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x182), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive registers and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, with the
 * combined 24-bit value stored in the location pointed to by value.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop1EnablePedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x184), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x183), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x182), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the main hop 1 toggle value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * main hop 1 toggle.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop1Toggle_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1c0), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop1Toggle_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1c0), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in a
 * provided variable.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop1ToggleDelayed_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1c1), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Main Hop 2 Enable Pedestal Enable configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop2EnablePedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x188), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop2EnablePedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x188), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Main Hop 2 Enable Ped End in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop2EnablePedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x188), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop2EnablePedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x188), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the end position edge detection for the main hop 2 enable in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop2EnablePedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x188), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the Main Hop 2
 * Enable Ped End Posedge Detect feature.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop2EnablePedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x188), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Pedestal Mode for Main Hop 2 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop2EnablePedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x188), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop2EnablePedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x188), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the main hop 2 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop2EnablePedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x188), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop2EnablePedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x188), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Main Hop 2 Enable Pedestal in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop2EnablePedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x188), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value for the Main Hop 2 Enable Pedestal
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved soft
 * override value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop2EnablePedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x188), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Main Hop 2 Enable Ped Start in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop2EnablePedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x188), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop2EnablePedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x188), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection for the Main Hop 2 Enable in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop2EnablePedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x188), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop2EnablePedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x188), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the end delay for the Main Hop 2 Enable Ped Trigger by writing to
 * specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer that contains the value to be written
 * to the registers, which is split into three parts.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop2EnablePedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x18e), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x18d), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x18c), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers.
 *
 * @param device A pointer to the device structure used for hardware
 * communication.
 * @param value A pointer to a 32-bit integer where the retrieved value will be
 * stored.
 * @return Returns the status of the last register read operation, indicating
 * success or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop2EnablePedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x18e), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x18d), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x18c), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the start delay for the Main Hop 2 Enable Ped Trigger by writing
 * to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer representing the value to be written,
 * which is split across three registers.
 * @return Returns the status of the last write operation, which indicates
 * success (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop2EnablePedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x18b), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x18a), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x189), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit integer where the retrieved value will be
 * stored.
 * @return Returns the status of the last read operation, with the output
 * variable containing the combined 24-bit value from the three
 * registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop2EnablePedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x18b), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x18a), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x189), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Main Hop 2 Toggle register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the Main Hop 2 Toggle register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop2Toggle_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1c0), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the main hop 2
 * toggle from the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop2Toggle_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1c0), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a delayed toggle value from a specific register in the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainHop2ToggleDelayed_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1c1), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the main interrupt delay 1 enable value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * main interrupt delay 1 enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainIntDelay1Enable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1c0), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the Main Interrupt Delay 1 Enable register from
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainIntDelay1Enable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1c0), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Main Interrupt Delay 2 Enable configuration in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainIntDelay2Enable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1c0), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the Main Interrupt Delay 2 Enable register from
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainIntDelay2Enable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1c0), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the main interrupt delay enable for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that indicates whether to enable or disable the
 * main interrupt delay.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainIntDelayEnablePedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x17a), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the main interrupt delay enable status from a specific
 * register and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainIntDelayEnablePedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x17a), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the end of the main interrupt delay
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainIntDelayEnablePedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x17a), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainIntDelayEnablePedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x17a), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the main interrupt delay enable for positive edge detection in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainIntDelayEnablePedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x17a), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainIntDelayEnablePedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x17a), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the main interrupt delay enable for pedestrian mode in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * main interrupt delay in pedestrian mode.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainIntDelayEnablePedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x17a), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the main interrupt delay enable for pedestrian mode from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainIntDelayEnablePedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x17a), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the main interrupt delay in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainIntDelayEnablePedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x17a), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainIntDelayEnablePedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x17a), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the main interrupt delay enable in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the soft override.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainIntDelayEnablePedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x17a), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value for the main interrupt delay enable
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainIntDelayEnablePedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x17a), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the main interrupt delay in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainIntDelayEnablePedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x17a), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainIntDelayEnablePedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x17a), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection for the main interrupt delay in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * for enabling negative edge detection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainIntDelayEnablePedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x17a), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainIntDelayEnablePedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x17a), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the main interrupt delay for the ADRV9001 device by writing to
 * specific registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer containing the value to be written to
 * the device registers, which is split into three parts.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainIntDelayEnablePedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x180), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x17f), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x17e), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit integer where the retrieved value will be
 * stored.
 * @return Returns the status of the last register read operation, with the
 * output value containing the combined 24-bit data from the three
 * registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainIntDelayEnablePedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x180), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x17f), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x17e), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the main interrupt delay for the ADRV9001 device by writing to
 * specific registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer that contains the value to be split
 * and written to the device registers.
 * @return Returns the status of the last write operation, which indicates
 * success (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainIntDelayEnablePedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x17d), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x17c), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x17b), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used for hardware
 * communication.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, with the
 * output value containing the combined 24-bit value from the three
 * registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainIntDelayEnablePedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x17d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x17c), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x17b), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the main interrupt delay start enable selection in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainIntDelayStartEnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1bf), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the main interrupt delay start enable selection value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainIntDelayStartEnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1bf), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the main interrupt delay stop enable selection in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainIntDelayStopEnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1bf), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the main interrupt delay stop enable selection value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_MainIntDelayStopEnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1bf), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ECC disable value for the PA ramp in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for ECC
 * disable.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_PaRampEccDisable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1e5), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ECC disable status for the PA ramp from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved ECC
 * disable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_PaRampEccDisable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1e5), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ECC IRQ sensitivity for the PA ramp in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the sensitivity value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_PaRampEccIrqSensitivity_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1e5), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ECC IRQ sensitivity value from a specific register of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved ECC IRQ
 * sensitivity value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_PaRampEccIrqSensitivity_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1e5), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the PA ramp lookup table register value from the device and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_PaRampLutRdData_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x12), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the valid read value from the PA ramp LUT register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_PaRampLutRdValid_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x13), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the asymmetric PA ramp value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the ramp value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_PaRampTx1Asymmetric_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xd), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PA ramp value from a specific register and stores it in
 * the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved PA ramp
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_PaRampTx1Asymmetric_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xd), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the down threshold value for the PA ramp in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the down threshold value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_PaRampTx1DownThreshold_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xa), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the down threshold value for the PA ramp from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved threshold
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_PaRampTx1DownThreshold_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xa), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PA ramp ECC clear value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_PaRampTx1EccClear_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1e5), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ECC clear value from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved ECC clear
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_PaRampTx1EccClear_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1e5), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the ECC error address from the PA ramp register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved ECC error
 * address will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_PaRampTx1EccErrorAddr_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x1e8), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the ECC error flag from the PA ramp register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved ECC error
 * flag will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_PaRampTx1EccErrorFlag_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1e7), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PA ramp lookup table selection for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * PA ramp lookup table selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_PaRampTx1LutSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x14), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PA ramp TX1 LUT selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved LUT
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_PaRampTx1LutSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x14), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PA ramp up threshold value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the ramp up threshold
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_PaRampTx1UpThreshold_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x9), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PA ramp TX1 up threshold value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved threshold
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_PaRampTx1UpThreshold_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x9), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the asymmetric PA ramp value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the ramp value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_PaRampTx2Asymmetric_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xd), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PA ramp value from a specific register and stores it in
 * the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved PA ramp
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_PaRampTx2Asymmetric_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xd), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the down threshold value for the PA ramp in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the down threshold value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_PaRampTx2DownThreshold_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xc), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the down threshold value for the PA ramp from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved down
 * threshold value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_PaRampTx2DownThreshold_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xc), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ECC clear value for the PA ramp in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the ECC clear register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_PaRampTx2EccClear_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1e5), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PA Ramp Tx2 ECC clear value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved ECC clear
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_PaRampTx2EccClear_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1e5), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the ECC error address from the PA ramp register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved ECC error
 * address will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_PaRampTx2EccErrorAddr_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x1e9), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the ECC error flag from the PA ramp register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved ECC error
 * flag will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_PaRampTx2EccErrorFlag_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1e7), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PA ramp TX 2 LUT selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the LUT selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_PaRampTx2LutSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x14), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PA ramp TX2 LUT selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved LUT
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_PaRampTx2LutSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x14), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PA ramp up threshold value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the threshold value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_PaRampTx2UpThreshold_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xb), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PA ramp TX2 up threshold value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved threshold
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_PaRampTx2UpThreshold_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xb), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a reserved register value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the reserved register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Reserved0_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x20), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Reserved0_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x20), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific register value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Reserved1_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x21), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Reserved1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x21), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific register value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Reserved2_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x22), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Reserved2_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x22), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific register value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Reserved3_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x23), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Reserved3_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x23), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific register value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Reserved4_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x24), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Reserved4_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x24), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific reserved register value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the reserved register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Reserved5_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x25), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Reserved5_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x25), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific register value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Reserved6_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x26), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Reserved6_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x26), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific reserved register value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the reserved register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Reserved7_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x27), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Reserved7_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x27), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific register value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Reserved8_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x28), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Reserved8_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x28), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific register value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Reserved9_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x29), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Reserved9_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x29), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC (Automatic Gain Control) Pedestal Enable register for the
 * Rx1 channel of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that indicates the desired state of the AGC
 * Pedestal Enable (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1AgcPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x5b), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC Pedestal Enable value from a specific register for
 * the RX1 channel of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved AGC Pedestal
 * Enable value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1AgcPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x5b), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the AGC pedal end in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1AgcPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x5b), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC Pedestal End Generated Edge Type value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1AgcPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x5b), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC Pedestal End Pedge Detect value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the AGC Pedestal End Pedge Detect.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1AgcPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x5b), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC Pedestal End position value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1AgcPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x5b), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC (Automatic Gain Control) pedestrian mode for the Rx1
 * channel of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the mode value to be set
 * for the AGC.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1AgcPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x5b), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC Pedestal Mode value from a specific register for the
 * given device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved AGC Pedestal
 * Mode value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1AgcPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x5b), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the AGC PED in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to set for the
 * soft override enable.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1AgcPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x5b), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC PED soft override enable value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1AgcPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x5b), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the AGC (Automatic Gain Control) of
 * the Rx1 channel in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the soft override value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1AgcPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x5b), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC PED soft override value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved AGC PED soft
 * override value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1AgcPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x5b), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC Pedestal Start Arm 0 Enable selection in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1AgcPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x195), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used for hardware
 * communication.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1AgcPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x195), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC Pedestal Start Arm 1 Enable selection for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1AgcPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x195), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1AgcPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x195), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the AGC PED start in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1AgcPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x5b), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type for the AGC PED start from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1AgcPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x5b), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection configuration for the AGC in the RX1
 * path of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1AgcPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x5b), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC Pedestal Start negative edge detection value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1AgcPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x5b), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC Pedestal Stop Arm 0 Enable selection in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1AgcPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x195), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC Pedestal Stop Arm 0 Enable selection value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1AgcPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x195), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC Pedestal Stop Arm 1 Enable selection in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1AgcPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x195), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC Pedestal Stop Arm 1 Enable selection value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1AgcPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x195), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx1 AGC Ped Trigger End Delay in the ADRV9001 device by
 * writing to specific registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the delay value to be
 * set, which is split across three registers.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the last register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1AgcPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x61), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x60), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x5f), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC Pedestal Trigger End Delay value from the device's
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1AgcPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x61), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x60), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x5f), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC Pedestal Trigger Start Delay for the Rx1 channel in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the delay value to be
 * set, which is split into three parts for writing.
 * @return Returns the status of the last write operation, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1AgcPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x5e), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x5d), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x5c), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC Pedestal Trigger Start Delay value from the device's
 * registers.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1AgcPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x5e), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x5d), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x5c), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBDC (Baseband Digital Converter) pedestal enable value in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the pedestal enable value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1BbdcPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x69), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1BbdcPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x69), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Rx1 BBDC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1BbdcPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x69), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1BbdcPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x69), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the end position detection value for the Rx1 BBDC in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the end position detection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1BbdcPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x69), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief This function reads a specific field from a hardware register and
 * stores the result in a provided variable.
 *
 * @param device A pointer to the device structure used for hardware
 * communication.
 * @param value A pointer to a uint8_t variable where the read value will be
 * stored.
 * @return The function returns an integer status code indicating the success or
 * failure of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1BbdcPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x69), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBDC (Baseband Digital Converter) mode for the Rx1 channel in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the mode to be set for
 * the BBDC.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1BbdcPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x69), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBDC pedestals mode value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1BbdcPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x69), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the Rx1 BBDC PED in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1BbdcPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x69), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override enable status for the Rx1 BBDC in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1BbdcPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x69), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Rx1 BBDC PED in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the soft override value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1BbdcPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x69), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1BbdcPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x69), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Rx1BbdcPedStartArm0EnableSel` field in the
 * ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1BbdcPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x197), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1BbdcPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x197), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1BbdcPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x197), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1BbdcPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x197), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Rx1 BBDC PED in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1BbdcPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x69), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1BbdcPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x69), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection configuration for the Rx1 BBDC in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1BbdcPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x69), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the negative edge detection value from a specific register
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1BbdcPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x69), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Rx1BbdcPedStopArm0EnableSel` field in the
 * ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1BbdcPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x197), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1BbdcPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x197), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Rx1BbdcPedStopArm1EnableSel` field in the
 * ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1BbdcPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x197), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1BbdcPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x197), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the end delay for the RX1 BBDC pedestal trigger in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the end delay value to be
 * set.
 * @return Returns the status of the last write operation, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1BbdcPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x6f), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x6e), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x6d), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the end delay value for the Rx1 BBDC trigger from the
 * device's register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved end
 * delay value will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1BbdcPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x6f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x6e), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x6d), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the start delay for the Rx1 BBDC ped trigger in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the start delay value to
 * be set.
 * @return Returns the status of the last write operation, which indicates
 * success (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1BbdcPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x6c), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x6b), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x6a), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the start delay value for the Rx1 BBDC trigger from the
 * device's register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved start
 * delay value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1BbdcPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x6c), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x6b), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x6a), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low synchronization pedestal enable value for the Rx1 DDC in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1DdcLoSyncPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x85), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization pedestal enable value from a
 * specific register of the device.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1DdcLoSyncPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x85), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Rx1 DDC LO sync ped end in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1DdcLoSyncPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x85), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1DdcLoSyncPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x85), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DDC low synchronization edge detection position for the RX1
 * channel in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1DdcLoSyncPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x85), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization pedestal end position value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1DdcLoSyncPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x85), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low synchronization pedestal mode for the Rx1 DDC in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the low synchronization pedestal mode.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1DdcLoSyncPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x85), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization pedestal mode value from a specific
 * register of the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1DdcLoSyncPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x85), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the DDC LO sync ped in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1DdcLoSyncPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x85), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override enable status for the Rx1 DDC LO sync
 * pedestal from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved status will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1DdcLoSyncPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x85), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Rx1 DDC LO sync pedestal in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1DdcLoSyncPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x85), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value for the Rx1 DDC LO sync pedestal
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1DdcLoSyncPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x85), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Rx1DdcLoSyncPedStartArm0EnableSel` field in the
 * ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1DdcLoSyncPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x19b), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1DdcLoSyncPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x19b), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1DdcLoSyncPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x19b), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1DdcLoSyncPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x19b), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Rx1 DDC low sync pedestal in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1DdcLoSyncPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x85), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1DdcLoSyncPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x85), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection configuration for the Rx1 DDC Lo Sync
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1DdcLoSyncPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x85), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1DdcLoSyncPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x85), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Rx1DdcLoSyncPedStopArm0EnableSel` field in the
 * ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1DdcLoSyncPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x19b), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1DdcLoSyncPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x19b), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value for the `Rx1DdcLoSyncPedStopArm1EnableSel` register in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1DdcLoSyncPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x19b), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1DdcLoSyncPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x19b), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DDC low synchronization pedestal trigger end delay by writing
 * to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer representing the delay value to be
 * set, which is split across three registers.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1DdcLoSyncPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x8b), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x8a), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x89), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DDC low synchronization pedestal trigger end delay value
 * from the device's register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1DdcLoSyncPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x8b), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x8a), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x89), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the start delay for the Rx1 DDC LO sync ped trigger by writing to
 * specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer that contains the value to be written
 * to the registers, which is split into three parts.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1DdcLoSyncPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x88), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x87), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x86), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DDC low synchronization pedestal trigger start delay
 * value from a device's register.
 *
 * @param device A pointer to the device structure from which the register
 * values will be read.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, with the
 * retrieved DDC low sync pedestal trigger start delay value stored in
 * the provided pointer.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1DdcLoSyncPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x88), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x87), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x86), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture enable for the Rx1Fic1 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the capture enable state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic1CaptPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x3f), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the capture pedestal enable value from a specific register
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic1CaptPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x3f), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the RX1 FIC1 capture pedal end in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic1CaptPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x3f), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic1CaptPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x3f), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture edge detection value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the capture edge detection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic1CaptPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x3f), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the captured value from a specific register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic1CaptPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x3f), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture mode for the Rx1Fic1 of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the capture mode to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic1CaptPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x3f), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the capture mode value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved capture mode
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic1CaptPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x3f), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the RX1 FIC1 capture pedestrian in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic1CaptPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x3f), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override enable status from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic1CaptPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x3f), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Rx1Fic1 capture pedestal in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the soft override value
 * to be set.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic1CaptPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x3f), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic1CaptPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x3f), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable selection for the Arm0 capture of the Rx1 FIC1 in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic1CaptPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x190), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic1CaptPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x190), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic1CaptPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x190), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic1CaptPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x190), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the RX1 FIC1 capture pedal in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic1CaptPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x3f), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic1CaptPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x3f), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection configuration for the RX1 FIC1
 * capture in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic1CaptPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x3f), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief This function retrieves a specific register value from a device and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return The function returns an integer status code indicating the success or
 * failure of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic1CaptPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x3f), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 register map for
 * the RX1 FIC1 capture.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic1CaptPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x190), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic1CaptPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x190), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture pedestrian stop arm enable selection for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic1CaptPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x190), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic1CaptPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x190), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture trigger end delay for the ADRV9001 device by writing
 * to specific registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the capture trigger end
 * delay value to be set.
 * @return Returns the status of the last register write operation, which
 * indicates success (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic1CaptPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x45), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x44), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x43), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, with the 24-bit value
 * stored in the location pointed to by the 'value' parameter.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic1CaptPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x45), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x44), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x43), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture pedestal trigger start delay by writing to specific
 * registers.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A 32-bit unsigned integer representing the delay value to be
 * set, which is split across multiple registers.
 * @return Returns the status of the last register write operation, indicating
 * success (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic1CaptPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x42), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x41), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x40), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers.
 *
 * @param device A pointer to the device context used for register access.
 * @param value A pointer to a 32-bit integer where the retrieved value will be
 * stored.
 * @return Returns the status of the last register read operation, with `*value`
 * containing the combined 24-bit value from the three registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic1CaptPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x42), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x41), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x40), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture pedestal enable field in the ADRV9001 device
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the capture pedestal enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x46), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the capture pedestal enable value from a specific register
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x46), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the RX1 FIC2 capture in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x46), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x46), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture edge detection configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x46), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the captured end position of the Rx1Fic2 from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x46), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture mode for the Rx1Fic2 of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the capture mode to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x46), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the capture mode value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved capture
 * mode value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x46), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the Rx1Fic2CaptPed register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x46), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override enable status for the Rx1Fic2 capture in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved status will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x46), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Rx1Fic2 capture pedestal in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the soft override value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x46), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x46), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x191), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x191), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x191), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x191), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the RX1 FIC2 capture in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x46), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x46), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection configuration for the Rx1Fic2 capture
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x46), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the negative edge detection value from a specific register
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x46), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain change selection for the Rx1 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the gain change selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedStartRx1GainChangeSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x191), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain change selection value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved gain
 * change selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedStartRx1GainChangeSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x191), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the overload selection for the RX1 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the overload selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedStartRx1OverloadSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x191), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the overload selection value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved overload
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedStartRx1OverloadSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x191), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x191), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x191), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x191), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x191), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain change selection for the Rx1 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the gain change selection
 * value.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedStopRx1GainChangeSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x191), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific gain change selection value from a hardware
 * register.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedStopRx1GainChangeSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x191), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the overload selection for the RX1 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the overload selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedStopRx1OverloadSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x191), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the overload selection value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved overload
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedStopRx1OverloadSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x191), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture trigger end delay for the ADRV9001 device by writing
 * to specific registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the value to be set,
 * which is split across three registers.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x4c), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x4b), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x4a), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers.
 *
 * @param device A pointer to the device context used for register access.
 * @param value A pointer to a 32-bit integer where the retrieved value will be
 * stored.
 * @return Returns the status of the last register read operation, with the
 * retrieved 24-bit value stored in the location pointed to by `value`.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x4c), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x4b), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x4a), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture trigger start delay for the ADRV9001 device by
 * writing to specific registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the start delay value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x49), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x48), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x47), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers.
 *
 * @param device A pointer to the device context used for register access.
 * @param value A pointer to a 32-bit integer where the retrieved value will be
 * stored.
 * @return Returns the status of the last register read operation, with `*value`
 * containing the combined 24-bit value from the three registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Fic2CaptPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x49), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x48), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x47), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx1 FIC pause threshold in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the Rx1 FIC pause threshold.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1FicPauseThld_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1e2), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Rx1FicPause threshold value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved threshold
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1FicPauseThld_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1e2), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable for the Rx1 gain table in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the gain table clock enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1GainTableClkEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1e4), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain table clock enable value from a specific register
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved gain table
 * clock enable value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1GainTableClkEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1e4), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture enable for the Rx1 HD2 path in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that indicates the capture enable state (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Hd2CaptPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x38), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Hd2CaptPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x38), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Rx1Hd2 capture pedal in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Hd2CaptPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x38), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Hd2CaptPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x38), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture edge detection configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Hd2CaptPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x38), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the captured pedestal end position from a specific register
 * in the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Hd2CaptPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x38), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture mode for the Rx1 HD2 channel in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the capture mode to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Hd2CaptPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x38), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the capture mode value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved capture mode
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Hd2CaptPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x38), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the Rx1Hd2CaptPed register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Hd2CaptPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x38), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override enable status for the Rx1Hd2CaptPed
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Hd2CaptPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x38), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Rx1Hd2CaptPed register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set as
 * the soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Hd2CaptPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x38), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Hd2CaptPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x38), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Hd2CaptPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x18f), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific bit field from a hardware register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Hd2CaptPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x18f), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Hd2CaptPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x18f), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Hd2CaptPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x18f), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Rx1Hd2 capture in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Hd2CaptPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x38), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Hd2CaptPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x38), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection configuration for the Rx1Hd2 capture
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Hd2CaptPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x38), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the negative edge detection value from a specific register
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Hd2CaptPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x38), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Hd2CaptPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x18f), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Hd2CaptPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x18f), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Hd2CaptPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x18f), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Hd2CaptPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x18f), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture trigger end delay for the ADRV9001 device by writing
 * to specific registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the delay value to be
 * set, which is split across three registers.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Hd2CaptPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x3e), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x3d), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x3c), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the end delay value for the Rx1Hd2 capture trigger from the
 * device's register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved end
 * delay value will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Hd2CaptPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x3e), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x3d), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x3c), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture trigger start delay for the ADRV9001 device by
 * writing to specific registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the delay value to be
 * set, which is split across three registers.
 * @return Returns 0 on success or an error code if any of the register write
 * operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Hd2CaptPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x3b), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x3a), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x39), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the start delay value for the Rx1Hd2 capture trigger from
 * the device's register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved start
 * delay value will be stored.
 * @return Returns the status of the last register read operation, where a value
 * of 0 indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1Hd2CaptPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x3b), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x3a), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x39), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx1 interrupt delay 0 enable for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay0EnablePedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x9a), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay0EnablePedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x9a), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Rx1 interrupt delay 0 in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay0EnablePedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x9a), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type for the Rx1 interrupt delay 0 from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved edge type
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay0EnablePedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x9a), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Pedestal End Posedge Detect configuration for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay0EnablePedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x9a), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay0EnablePedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x9a), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX1 interrupt delay 0 enable in ped mode for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay0EnablePedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x9a), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay0EnablePedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x9a), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the Rx1 interrupt delay 0 in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay0EnablePedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x9a), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay0EnablePedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x9a), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Rx1 interrupt delay in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the soft override value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay0EnablePedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x9a), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay0EnablePedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x9a), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Rx1 interrupt delay 0 in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay0EnablePedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x9a), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type for the Rx1 interrupt delay 0 from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved edge type
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay0EnablePedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x9a), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection enable for the Rx1 interrupt delay in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay0EnablePedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x9a), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the RX1
 * interrupt delay and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay0EnablePedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x9a), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx1 interrupt delay configuration by writing to specific
 * registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer containing the value to be written to
 * the registers, with specific bits used for different register
 * writes.
 * @return Returns the status of the last register write operation, where 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay0EnablePedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xa0), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x9f), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x9e), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, with `*value`
 * containing the combined 24-bit value from the three registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay0EnablePedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xa0), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x9f), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x9e), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx1 interrupt delay configuration by writing to specific
 * registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer that contains the value to be written
 * to the registers, with different portions used for different
 * registers.
 * @return Returns the status of the last register write operation, which
 * indicates success (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay0EnablePedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x9d), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x9c), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x9b), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used for hardware
 * communication.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay0EnablePedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x9d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x9c), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x9b), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 register map for
 * Rx1 interrupt delay.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay0PedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x19e), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay0PedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x19e), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Rx1IntDelay0PedStartArm1EnableSel` field in the
 * ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay0PedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x19e), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay0PedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x19e), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx1 interrupt delay configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay0PedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x19e), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay0PedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x19e), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Rx1IntDelay0PedStopArm1EnableSel` field in the
 * ADRV9001 register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay0PedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x19e), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay0PedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x19e), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX1 interrupt delay 1 enable for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay1EnablePedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xa1), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay1EnablePedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xa1), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Rx1 interrupt delay in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay1EnablePedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xa1), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type for the Rx1 interrupt delay 1 from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved edge type
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay1EnablePedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xa1), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Pedestal End Posedge Detect configuration for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay1EnablePedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xa1), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the Rx1
 * interrupt delay and stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay1EnablePedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xa1), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX1 interrupt delay 1 enable in ped mode for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay1EnablePedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xa1), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay1EnablePedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xa1), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the Rx1 interrupt delay in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay1EnablePedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xa1), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the Rx1 interrupt delay 1 enable PED soft
 * override setting from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay1EnablePedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xa1), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Rx1 internal delay 1 enable in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay1EnablePedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xa1), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay1EnablePedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xa1), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Rx1 interrupt delay 1 in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay1EnablePedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xa1), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type for the Rx1 interrupt delay 1 from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved edge type
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay1EnablePedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xa1), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection enable for the RX1 interrupt delay in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay1EnablePedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xa1), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay1EnablePedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xa1), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx1 interrupt delay configuration by writing to specific
 * registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer that contains the value to be split
 * and written to the registers.
 * @return Returns the status of the last register write operation, indicating
 * success (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay1EnablePedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xa7), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xa6), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xa5), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive registers and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device context used for register access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, with the
 * retrieved 24-bit value stored in the location pointed to by the value
 * parameter.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay1EnablePedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xa7), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xa6), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xa5), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx1 interrupt delay and enables the pedestrian trigger start
 * delay by writing to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer that contains the value to be written
 * to the registers, with different portions used for different
 * registers.
 * @return Returns the status of the last register write operation, where a
 * value of 0 indicates success and any non-zero value indicates an
 * error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay1EnablePedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xa4), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xa3), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xa2), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, where a non-
 * zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay1EnablePedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xa4), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xa3), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xa2), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx1 interrupt delay 1 pedestrian start arm 0 enable selection
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay1PedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x19f), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay1PedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x19f), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 register map for
 * Rx1 interrupt delay.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay1PedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x19f), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay1PedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x19f), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx1 interrupt delay 1 pedestrian stop arm 0 enable selection
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay1PedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x19f), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay1PedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x19f), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx1 interrupt delay 1 pedestrian stop arm 1 enable selection
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay1PedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x19f), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntDelay1PedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x19f), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX1 interrupt or RX enable PED enable field in the ADRV9001
 * device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntOrxEnablePedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x8c), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntOrxEnablePedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x8c), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the RX1 interrupt or ORX enable in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntOrxEnablePedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x8c), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntOrxEnablePedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x8c), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the end position edge detection for the RX1 interrupt or ORX
 * enable in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntOrxEnablePedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x8c), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntOrxEnablePedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x8c), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX1 interrupt or RX enable PEd mode in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntOrxEnablePedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x8c), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntOrxEnablePedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x8c), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the RX1 interrupt or RX enable in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntOrxEnablePedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x8c), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntOrxEnablePedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x8c), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the RX1 INT ORX enable in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntOrxEnablePedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x8c), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value for the Rx1 interrupt or RX enable
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntOrxEnablePedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x8c), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the RX1 interrupt or ORX enable in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntOrxEnablePedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x8c), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register for the RX1
 * interface of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntOrxEnablePedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x8c), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection configuration for the RX1 interrupt
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntOrxEnablePedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x8c), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntOrxEnablePedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x8c), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the end delay for the RX1 interrupt or ORX enable pedestrian
 * trigger by writing to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer that contains the value to be written
 * to the registers, with different portions of this value written
 * to different registers.
 * @return Returns the status of the last register write operation, where a
 * value of 0 indicates success and any non-zero value indicates an
 * error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntOrxEnablePedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x92), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x91), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x90), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Pedestal Trigger End Delay value from the ADRV9001
 * device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntOrxEnablePedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x92), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x91), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x90), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx1 interrupt or ORx enable PED trigger start delay in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the value to be set for
 * the trigger start delay.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntOrxEnablePedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x8f), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x8e), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x8d), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Pedestal Trigger Start Delay value from the ADRV9001
 * device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, with the retrieved
 * Pedestal Trigger Start Delay value stored in the variable pointed to
 * by 'value'.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntOrxEnablePedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x8f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x8e), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x8d), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX1 interrupt or ORX PED start arm 0 enable selection in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntOrxPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x19c), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntOrxPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x19c), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 register map for
 * RX1 interrupt or ORX PED start arm 1 enable selection.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntOrxPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x19c), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntOrxPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x19c), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 register map for
 * RX1 interrupt or ORX pedestrian stop arm 0.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntOrxPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x19c), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntOrxPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x19c), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 register map for
 * RX1 interrupt or ORX pedestrian stop arm 1 enable selection.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntOrxPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x19c), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntOrxPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x19c), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX1 interrupt enable for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that indicates the enable state for the RX1
 * interrupt.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntRxEnablePedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x93), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntRxEnablePedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x93), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the RX1 interrupt in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntRxEnablePedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x93), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type for the Rx1 interrupt enable from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntRxEnablePedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x93), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX1 interrupt enable for positive edge detection in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntRxEnablePedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x93), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the RX1
 * interrupt enable for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntRxEnablePedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x93), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX1 interrupt receive enable in pedestrian mode for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntRxEnablePedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x93), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RX1 interrupt enable status for the PED mode from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntRxEnablePedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x93), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the RX1 interrupt in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntRxEnablePedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x93), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the RX1 interrupt enable soft override setting
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntRxEnablePedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x93), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the RX1 interrupt enable in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the soft override value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntRxEnablePedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x93), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value for the RX1 interrupt enable from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntRxEnablePedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x93), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the RX1 interrupt enable in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntRxEnablePedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x93), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type for the RX1 interrupt enable
 * configuration from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved edge type
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntRxEnablePedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x93), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection for the RX1 interrupt enable in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntRxEnablePedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x93), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntRxEnablePedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x93), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX1 interrupt enable for the ADRV9001 device by writing to
 * specific registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer containing the value to be written to
 * the device registers.
 * @return Returns the status of the last write operation, where a non-zero
 * value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntRxEnablePedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x99), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x98), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x97), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntRxEnablePedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x99), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x98), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x97), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX1 interrupt enable and trigger start delay by writing to
 * specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer containing the value to be written to
 * the registers, with specific bits representing different
 * settings.
 * @return Returns the status of the last register write operation, where a
 * value of 0 indicates success and any non-zero value indicates an
 * error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntRxEnablePedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x96), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x95), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x94), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Pedestal Trigger Start Delay value from a device's
 * register.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, with `value`
 * containing the combined result of the three register reads.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntRxEnablePedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x96), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x95), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x94), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX1 interrupt RX pedestrian start arm 0 enable selection in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntRxPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x19d), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntRxPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x19d), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 register map for
 * RX1 interrupt configuration.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntRxPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x19d), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntRxPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x19d), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX1 interrupt RX pedestrian stop arm 0 enable selection in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntRxPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x19d), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntRxPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x19d), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 register map for
 * RX1 interrupt configuration.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntRxPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x19d), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1IntRxPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x19d), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx1 LPK phase accumulation clock enable register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1LpkPhaseAccumClkEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1e4), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the phase accumulation clock enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1LpkPhaseAccumClkEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1e4), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low sync 0 pedal enable register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync0PedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x70), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization pedal enable value from a specific
 * register of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync0PedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x70), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the NCO low synchronization of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync0PedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x70), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization generated edge type value from a
 * specific register of the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved edge type
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync0PedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x70), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low synchronization end position detection value for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the NCO low sync end position.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync0PedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x70), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization position of the NCO from a specific
 * register and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync0PedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x70), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low synchronization mode for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the NCO low synchronization mode.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync0PedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x70), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization mode value from a specific register
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved low
 * synchronization mode value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync0PedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x70), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the NCO low sync 0 of the RX1
 * channel in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync0PedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x70), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override enable value for the NCO LO sync 0 of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync0PedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x70), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the NCO low sync 0 pedal in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync0PedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x70), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization override value from a specific
 * register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync0PedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x70), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable selection for the NCO low sync 0 ped start arm 0 in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync0PedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x198), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync0PedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x198), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO LO Sync0 Ped Start Arm1 Enable selection in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync0PedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x198), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync0PedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x198), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the RX1 NCO low synchronization in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync0PedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x70), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync0PedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x70), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection configuration for the Rx1 NCO low
 * sync 0 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync0PedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x70), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization value from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync0PedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x70), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO LO Sync 0 Ped Stop Arm 0 Enable selection in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync0PedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x198), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync0PedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x198), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low synchronization ped stop arm 1 enable selection value
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the NCO low sync ped stop arm 1 enable selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync0PedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x198), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync0PedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x198), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low synchronization end delay value for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the value to be set,
 * which is divided into three parts for writing to different
 * registers.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync0PedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x76), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x75), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x74), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO low synchronization end delay value from the
 * device's register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync0PedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x76), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x75), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x74), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx1 NCO low sync 0 pedestal trigger start delay in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the delay value to be
 * set.
 * @return Returns the status of the last write operation, where a non-zero
 * value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync0PedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x73), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x72), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x71), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO low sync 0 ped trigger start delay value from a
 * device's register.
 *
 * @param device A pointer to the device structure from which the register
 * values will be read.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync0PedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x73), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x72), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x71), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low synchronization 1 pedal enable register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync1PedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x77), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization 1 pedestal enable value from a
 * specific register of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync1PedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x77), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the NCO low synchronization in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync1PedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x77), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync1PedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x77), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low synchronization 1 pedestal end position detect value
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the NCO low synchronization 1 pedestal end position detect.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync1PedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x77), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization position of the NCO from a specific
 * register and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync1PedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x77), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low synchronization 1 pedestal mode for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the pedestal mode.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync1PedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x77), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization mode value from a specific register
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved low
 * synchronization mode value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync1PedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x77), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the NCO low sync 1 ped in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync1PedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x77), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override enable status for the NCO low
 * synchronization of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync1PedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x77), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the NCO low sync 1 ped in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync1PedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x77), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization 1 phase error override value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync1PedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x77), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low synchronization 1 pedestrian start arm 0 enable
 * selection value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the NCO low sync enable selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync1PedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x199), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync1PedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x199), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low synchronization 1 ped start arm 1 enable selection
 * value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the NCO low sync enable selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync1PedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x199), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync1PedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x199), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the NCO low synchronization in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync1PedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x77), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync1PedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x77), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection configuration for the Rx1 NCO low
 * synchronization in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync1PedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x77), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization value from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync1PedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x77), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low synchronization 1 pedestrian stop arm 0 enable
 * selection value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the NCO low sync 1 pedestrian stop arm 0 enable selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync1PedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x199), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync1PedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x199), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync1PedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x199), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync1PedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x199), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low synchronization 1 ped trigger end delay in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the delay value to be
 * set.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync1PedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x7d), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x7c), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x7b), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO low synchronization 1 ped trigger end delay value
 * from the device's register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync1PedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x7d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x7c), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x7b), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the start delay for the Rx1 NCO low sync 1 pedestrian trigger in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the start delay value to
 * be set.
 * @return Returns the status of the last write operation, which indicates
 * success (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync1PedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x7a), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x79), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x78), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO low synchronization 1 pedestal trigger start delay
 * value from the device's registers.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync1PedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x7a), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x79), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x78), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low synchronization to the pedestal enable register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync2PedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x7e), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization value for the NCO and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved low
 * synchronization value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync2PedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x7e), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the NCO low synchronization to the
 * specified value.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the generated edge type.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync2PedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x7e), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization generated edge type value from a
 * specific register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync2PedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x7e), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low synchronization to the specified value in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the NCO low synchronization.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync2PedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x7e), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization value from a specific register in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved low
 * synchronization value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync2PedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x7e), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low synchronization to pedestrian mode for the Rx1
 * channel of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync2PedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x7e), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization value for the NCO in receive mode
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved low
 * synchronization value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync2PedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x7e), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the NCO low sync to ped in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync2PedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x7e), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO low sync to PED soft override enable value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync2PedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x7e), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the NCO low sync to ped in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync2PedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x7e), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization value for the RX1 NCO from a
 * specific register and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved
 * synchronization value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync2PedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x7e), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low synchronization to the specified value for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the NCO low synchronization.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync2PedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x19a), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync2PedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x19a), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low synchronization to the specified value for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the NCO low synchronization.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync2PedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x19a), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync2PedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x19a), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the NCO low synchronization to the
 * specified value.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the generated edge type.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync2PedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x7e), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization generated edge type value from a
 * specific register of the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync2PedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x7e), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low synchronization to the negative edge detection
 * register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync2PedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x7e), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief This function retrieves a specific register value from a device and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync2PedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x7e), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low synchronization to pedestrian stop arm 0 enable
 * selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync2PedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x19a), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync2PedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x19a), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low synchronization to pedestrian stop arm 1 enable
 * selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync2PedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x19a), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO low synchronization to pedestrian stop arm 1 enable
 * selection value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync2PedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x19a), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low synchronization to pedestal trigger end delay in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the value to be set for
 * the NCO low sync to pedestal trigger end delay.
 * @return Returns the status of the last register write operation, indicating
 * success (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync2PedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x84), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x83), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x82), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO low sync to PED trigger end delay value from the
 * device's registers.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, with the output value
 * containing the combined result from the three register reads.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync2PedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x84), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x83), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x82), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low sync to pedestrian trigger start delay value in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the value to be set for
 * the NCO low sync to pedestrian trigger start delay.
 * @return Returns the status of the last write operation, where a non-zero
 * value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync2PedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x81), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x80), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x7f), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO low sync to PED trigger start delay value from the
 * device's register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1NcoLoSync2PedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x81), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x80), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x7f), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable selection for the RSSI capture in the RX1 power
 * monitor of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1PwrMonRssiCaptPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x194), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI capture settings from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1PwrMonRssiCaptPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x194), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable selection for the RSSI capture in the RX1 power
 * monitor of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1PwrMonRssiCaptPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x194), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI capture enable selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1PwrMonRssiCaptPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x194), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable selection for the RSSI capture pedestrian stop arm 0
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1PwrMonRssiCaptPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x194), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI capture settings from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1PwrMonRssiCaptPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x194), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable selection for the RSSI capture pedestrian stop arm 1
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1PwrMonRssiCaptPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x194), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI capture settings from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1PwrMonRssiCaptPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x194), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI power monitor enable state for the Rx1 channel in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * RSSI power monitor enable state.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1PwrMonRssiPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x54), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI power monitor enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1PwrMonRssiPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x54), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the RSSI power monitor in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1PwrMonRssiPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x54), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI power monitor end generated edge type value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1PwrMonRssiPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x54), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI Pedestal End Pedge Detect value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RSSI Pedestal End Pedge Detect.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1PwrMonRssiPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x54), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI power monitor value from a specific register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1PwrMonRssiPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x54), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI power monitor mode for the Rx1 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the mode to set for the
 * RSSI power monitor.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1PwrMonRssiPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x54), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI power monitor value from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved RSSI power
 * monitor value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1PwrMonRssiPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x54), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the RSSI power monitor in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1PwrMonRssiPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x54), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI power monitor soft override enable value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1PwrMonRssiPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x54), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the RSSI power monitor in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the soft override value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1PwrMonRssiPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x54), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI power monitor soft override value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1PwrMonRssiPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x54), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the RSSI power monitor in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1PwrMonRssiPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x54), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI power monitor start generated edge type from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1PwrMonRssiPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x54), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection for the RSSI power monitor in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1PwrMonRssiPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x54), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI power monitor start negative edge detection value
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1PwrMonRssiPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x54), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx1 power monitor RSSI pedestal trigger end delay by writing
 * to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer representing the delay value to be
 * set, which is split across three registers.
 * @return Returns the status of the last register write operation, which
 * indicates success (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1PwrMonRssiPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x5a), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x59), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x58), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI power monitor trigger end delay value from the
 * device's registers.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, with the
 * output value containing the combined result of the three register
 * reads.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1PwrMonRssiPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x5a), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x59), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x58), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI Pedestal Trigger Start Delay value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the value to be set for
 * the RSSI Pedestal Trigger Start Delay.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1PwrMonRssiPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x57), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x56), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x55), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI power monitor trigger start delay value from the
 * device's registers.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, which indicates
 * success (0) or failure (non-zero). The retrieved RSSI power monitor
 * trigger start delay value is stored in the variable pointed to by
 * value.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1PwrMonRssiPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x57), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x56), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x55), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC Preamble Enable field in the ADRV9001 register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value A uint8_t value that specifies the enable/disable state for the
 * RFDC preamble.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RfdcPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x62), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC pedestal enable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RfdcPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x62), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the RFDC PED end in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RfdcPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x62), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RfdcPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x62), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC edge detection configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RFDC edge detection register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RfdcPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x62), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC pedestal end position detection value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RfdcPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x62), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC pedestal mode for the RX1 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the pedestal mode value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RfdcPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x62), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC pedestal mode value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved pedestal
 * mode value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RfdcPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x62), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the RFDC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to set for the
 * soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RfdcPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x62), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC PED soft override enable value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RfdcPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x62), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the RFDC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the soft override value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RfdcPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x62), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value for the RFDC from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RfdcPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x62), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC PED start arm 0 enable selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RfdcPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x196), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC PED start arm 0 enable selection value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RfdcPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x196), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC PED start arm 1 enable selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RfdcPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x196), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC PED start arm 1 enable selection value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RfdcPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x196), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the RFDC PED start in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RfdcPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x62), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RfdcPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x62), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection configuration for the RFDC in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RfdcPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x62), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC PED start negative edge detection value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RfdcPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x62), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC PED stop arm 0 enable selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RfdcPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x196), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RfdcPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x196), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC PED stop arm 1 enable selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RfdcPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x196), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RfdcPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x196), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC PED trigger end delay by writing to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer representing the delay value to be
 * set, which is split across three registers.
 * @return Returns the status of the last register write operation, which
 * indicates success (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RfdcPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x68), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x67), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x66), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC Pedestal Trigger End Delay value from a device by
 * reading multiple registers.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RfdcPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x68), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x67), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x66), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC trigger start delay by writing to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer representing the delay value to be
 * set, which is split across three registers.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RfdcPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x65), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x64), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x63), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC trigger start delay value from a device by reading
 * multiple registers.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved delay
 * value will be stored.
 * @return Returns the status of the last read operation, with the output value
 * containing the combined result of the three register reads.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RfdcPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x65), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x64), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x63), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecCaptPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x192), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecCaptPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x192), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecCaptPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x192), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecCaptPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x192), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `ExtLpbkSel` field in the ADRV9001 register map for the RX1
 * RXQEC capture.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the `ExtLpbkSel` field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecCaptPedStartExtlpbkSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x193), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecCaptPedStartExtlpbkSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x193), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the internal loopback selection for the RX1 RXQEC capture
 * pedestal.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecCaptPedStartIntlpbkSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x193), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecCaptPedStartIntlpbkSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x193), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX1 RXQEC capture pedestal selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecCaptPedStartOrxqecSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x193), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecCaptPedStartOrxqecSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x193), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RXQEC capture selection value in the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecCaptPedStartRxqecSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x193), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecCaptPedStartRxqecSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x193), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecCaptPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x192), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecCaptPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x192), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecCaptPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x192), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecCaptPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x192), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecCaptPedStopExtlpbkSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x193), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecCaptPedStopExtlpbkSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x193), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecCaptPedStopIntlpbkSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x193), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecCaptPedStopIntlpbkSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x193), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX1 RXQEC capture pedestal stop or RXQEC selection value in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RX1 RXQEC capture pedestal stop or RXQEC selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecCaptPedStopOrxqecSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x193), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure used for hardware
 * communication.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecCaptPedStopOrxqecSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x193), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RXQEC capture pedestal stop selection value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RXQEC capture pedestal stop selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecCaptPedStopRxqecSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x193), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecCaptPedStopRxqecSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x193), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the readiness generation enable for the Rx1 RxQEC correction in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecCorrRdyGenEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1e1), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the RX1 RXQEC
 * correlation ready generation enable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecCorrRdyGenEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1e1), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ready generation selection for the Rx1 RxQEC correction in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecCorrRdyGenSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1e1), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecCorrRdyGenSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1e1), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX1 RXQEC PED enable register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * RX1 RXQEC PED.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x4d), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the RX1 RXQEC
 * PED enable setting.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x4d), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the RX1 RXQEC PED in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x4d), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x4d), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX1 RXQEC PED end position detect configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x4d), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x4d), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX1 RXQEC PED mode in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * RX1 RXQEC PED mode.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x4d), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the QEC (Quadrature Error Correction) mode value from a
 * specific register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved QEC mode
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x4d), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the RX1 RXQEC PED in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x4d), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override enable status for the Rx1 RxQEC of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x4d), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the RX1 RXQEC PED in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the soft override value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x4d), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x4d), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the RX1 RXQEC PED in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x4d), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x4d), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection configuration for the RX1 RXQEC of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x4d), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the negative edge detection value from a specific register
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x4d), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the end delay for the RX1 RXQEC PED trigger in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the end delay value to be
 * set.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x53), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x52), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x51), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit integer where the retrieved value will be
 * stored.
 * @return Returns the status of the last read operation, with the retrieved
 * 24-bit value stored in the provided pointer.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x53), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x52), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x51), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX1 RXQEC PED trigger start delay by writing to specific
 * registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer representing the delay value to be
 * set, which is split across three registers.
 * @return Returns the status of the last register write operation, where a
 * value of 0 indicates success and any non-zero value indicates an
 * error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x50), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x4f), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x4e), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the start delay value for the RX1 RXQEC PED trigger from the
 * device's register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved start
 * delay value will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx1RxqecPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x50), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x4f), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x4e), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC (Automatic Gain Control) Pedestal Enable value for the
 * Rx2 channel in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to set for the
 * AGC Pedestal Enable.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2AgcPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xfc), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC Pedestal Enable value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved AGC Pedestal
 * Enable value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2AgcPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xfc), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC Pedestal End Generated Edge Type in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the AGC Pedestal End Generated Edge Type.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2AgcPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xfc), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC Pedestal End Generated Edge Type value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2AgcPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xfc), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC Pedestal End Pedge Detect value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the AGC Pedestal End Pedge Detect.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2AgcPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xfc), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC Pedestal End position value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2AgcPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xfc), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC (Automatic Gain Control) pedestrian mode for the Rx2
 * channel of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the mode value to be set
 * for the AGC.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2AgcPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xfc), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC Pedestal Mode value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved AGC Pedestal
 * Mode value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2AgcPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xfc), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable value for the AGC of the Rx2 channel in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * AGC soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2AgcPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xfc), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC Pedestal Soft Override Enable value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2AgcPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xfc), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the AGC (Automatic Gain Control) of
 * the Rx2 channel in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the soft override value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2AgcPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xfc), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value for the AGC of the second receiver
 * channel from a specific register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2AgcPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xfc), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC Pedestal Start Arm 0 Enable selection for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2AgcPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ad), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2AgcPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ad), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC Pedestal Start Arm 1 Enable selection for the Rx2 channel
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2AgcPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ad), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC Pedestal Start Arm 1 Enable selection value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2AgcPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ad), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the AGC (Automatic Gain Control) in
 * the RX2 path of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2AgcPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xfc), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type for the AGC Pedestal Start from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2AgcPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xfc), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection value for the AGC (Automatic Gain
 * Control) of the RX2 channel in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * negative edge detection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2AgcPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xfc), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC Pedestal Start Negative Edge Detect value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2AgcPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xfc), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC Pedestal Stop Arm 0 Enable selection for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2AgcPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ad), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2AgcPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ad), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC Pedestal Stop Arm 1 Enable selection for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2AgcPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ad), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC Pedestal Stop Arm 1 Enable selection value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2AgcPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ad), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC Pedestal Trigger End Delay value in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the value to be set,
 * which is split across three registers.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2AgcPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x102), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x101), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x100), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC Pedestal Trigger End Delay value from the device's
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, with the retrieved AGC
 * Pedestal Trigger End Delay value stored in the variable pointed to by
 * 'value'.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2AgcPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x102), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x101), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x100), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the AGC Pedestal Trigger Start Delay for the Rx2 channel by
 * writing to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer representing the delay value to be
 * set, which is split across three registers.
 * @return Returns the status of the last write operation, where a non-zero
 * value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2AgcPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xff), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xfe), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xfd), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the AGC Pedestal Trigger Start Delay value from a device by
 * reading multiple registers.
 *
 * @param device A pointer to the device structure from which the register
 * values will be read.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, which indicates
 * success (0) or failure (non-zero). The retrieved AGC Pedestal Trigger
 * Start Delay value is stored in the location pointed to by the value
 * argument.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2AgcPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xff), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xfe), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xfd), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBDC PED enable register for the RX2 channel of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the BBDC PED enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2BbdcPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x10a), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2BbdcPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x10a), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Rx2 BBDC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2BbdcPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x10a), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2BbdcPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x10a), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the end position detection for the Rx2 BBDC in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2BbdcPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x10a), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2BbdcPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x10a), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBDC pedestal mode for the RX2 channel of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the pedestal mode value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2BbdcPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x10a), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the BBDC mode value from a specific register and stores it
 * in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved BBDC mode
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2BbdcPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x10a), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the Rx2 BBDC PED in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that indicates the soft override enable state to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2BbdcPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x10a), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override enable status for the Rx2 BBDC from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved status will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2BbdcPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x10a), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Rx2 BBDC PED in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the soft override value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2BbdcPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x10a), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2BbdcPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x10a), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Rx2BbdcPedStartArm0EnableSel` field in the
 * ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2BbdcPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1af), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2BbdcPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1af), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Arm1EnableSel` field in the `Rx2BbdcPedStart`
 * register of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the `Arm1EnableSel` field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2BbdcPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1af), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2BbdcPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1af), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Rx2 BBDC by writing a specified
 * value to a hardware register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2BbdcPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x10a), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2BbdcPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x10a), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection configuration for the Rx2 BBDC in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2BbdcPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x10a), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the negative edge detection value from a specific register
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2BbdcPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x10a), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value for the `Rx2BbdcPedStopArm0EnableSel` register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2BbdcPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1af), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2BbdcPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1af), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Rx2BbdcPedStopArm1EnableSel` field in the
 * ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2BbdcPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1af), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2BbdcPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1af), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the end delay for the Rx2 BBDC ped trigger in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the end delay value to be
 * set.
 * @return Returns the status of the last write operation, which indicates
 * success (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2BbdcPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x110), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x10f), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x10e), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, where a value
 * of 0 indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2BbdcPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x110), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x10f), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x10e), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the start delay for the Rx2 BBDC ped trigger in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the start delay value to
 * be set.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2BbdcPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x10d), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x10c), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x10b), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the start delay value for the Rx2 BBDC ped trigger from the
 * device's register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved start
 * delay value will be stored.
 * @return Returns the status of the last read operation, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2BbdcPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x10d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x10c), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x10b), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low synchronization pedestal enable for the Rx2 DDC in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that indicates the enable state for the low
 * synchronization pedestal.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2DdcLoSyncPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x126), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization pedestal enable value from a
 * specific register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2DdcLoSyncPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x126), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Rx2 DDC low sync ped end in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2DdcLoSyncPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x126), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2DdcLoSyncPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x126), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low synchronization pedestal end position detect value for
 * the RX2 DDC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the low synchronization pedestal end position.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2DdcLoSyncPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x126), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization pedestal end position value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2DdcLoSyncPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x126), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low synchronization pedestal mode for the Rx2 DDC in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the low synchronization pedestal mode.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2DdcLoSyncPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x126), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization pedestal mode value from a specific
 * register of the device.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2DdcLoSyncPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x126), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the Rx2 DDC Lo Sync Ped in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that indicates the soft override enable state to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2DdcLoSyncPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x126), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the DDC low sync pedestal soft override enable
 * setting from a specific register.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2DdcLoSyncPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x126), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Rx2 DDC Lo Sync Ped in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2DdcLoSyncPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x126), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value for the Rx2 DDC Lo Sync Ped from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2DdcLoSyncPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x126), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2DdcLoSyncPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b3), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2DdcLoSyncPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b3), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Rx2DdcLoSyncPedStartArm1EnableSel` field in the
 * ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2DdcLoSyncPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b3), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2DdcLoSyncPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b3), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Rx2 DDC low sync pedal in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2DdcLoSyncPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x126), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2DdcLoSyncPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x126), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection configuration for the Rx2 DDC low
 * synchronization in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2DdcLoSyncPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x126), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization pedestal start negative edge
 * detection value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2DdcLoSyncPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x126), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Rx2DdcLoSyncPedStopArm0EnableSel` field in the
 * ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2DdcLoSyncPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b3), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2DdcLoSyncPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b3), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2DdcLoSyncPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b3), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2DdcLoSyncPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b3), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DDC low synchronization pedestal trigger end delay for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the delay value to be
 * set, which is split into three parts for writing to different
 * registers.
 * @return Returns the status of the last register write operation, indicating
 * success (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2DdcLoSyncPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x12c), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x12b), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x12a), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DDC low synchronization pedestal trigger end delay value
 * from the device's register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, with the output value
 * containing the combined result of the three register reads.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2DdcLoSyncPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x12c), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x12b), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x12a), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DDC low synchronization pedestal trigger start delay by
 * writing to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer containing the delay value to be set,
 * which is split across three registers.
 * @return Returns the status of the last register write operation, which
 * indicates success (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2DdcLoSyncPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x129), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x128), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x127), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DDC low synchronization pedestal trigger start delay
 * value from the device's registers.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, with the retrieved DDC
 * low synchronization pedestal trigger start delay value stored in the
 * provided pointer.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2DdcLoSyncPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x129), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x128), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x127), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture enable for the Rx2 FIC1 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that indicates the capture enable state to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic1CaptPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xe0), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the capture enable status from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic1CaptPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xe0), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the RX2 FIC1 capture pedal end in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic1CaptPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xe0), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic1CaptPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xe0), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture edge detection configuration for the RX2 channel of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic1CaptPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xe0), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the captured pedestal end position from a specific register
 * in the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic1CaptPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xe0), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture mode for the Rx2 FIC1 of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the capture mode to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic1CaptPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xe0), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the capture mode value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved capture mode
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic1CaptPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xe0), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the RX2 FIC1 capture pedestrian in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic1CaptPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xe0), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override enable status for the Rx2 FIC1 capture
 * pedestrian from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved status will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic1CaptPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xe0), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Rx2Fic1 capture pedestal in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the soft override value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic1CaptPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xe0), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic1CaptPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xe0), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic1CaptPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a8), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic1CaptPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a8), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic1CaptPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a8), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic1CaptPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a8), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the RX2 FIC1 capture in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic1CaptPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xe0), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic1CaptPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xe0), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection configuration for the RX2 FIC1
 * capture in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic1CaptPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xe0), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic1CaptPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xe0), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 register map for
 * the RX2 FIC1 capture.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic1CaptPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a8), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic1CaptPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a8), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 register map for
 * the RX2 FIC1 capture.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic1CaptPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a8), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic1CaptPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a8), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture trigger end delay for the ADRV9001 device by writing
 * to specific registers.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the capture trigger end
 * delay value to be set.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic1CaptPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xe6), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xe5), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xe4), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the capture end delay value from the ADRV9001 device by
 * reading multiple registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * capture end delay value will be stored.
 * @return Returns the status of the last register read operation, with the
 * output value containing the combined capture end delay from the three
 * registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic1CaptPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xe6), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xe5), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xe4), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture trigger start delay for the ADRV9001 device by
 * writing to specific registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the capture trigger start
 * delay value to be set.
 * @return Returns the status of the last register write operation, indicating
 * success (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic1CaptPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xe3), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xe2), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xe1), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the capture trigger start delay value from a specific
 * register map for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic1CaptPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xe3), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xe2), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xe1), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture enable for the Rx2 FIC2 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that indicates the capture enable state (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xe7), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the capture pedestal enable value from a specific register
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xe7), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the RX2 FIC2 capture pedestrian end
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xe7), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register in the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved edge type
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xe7), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture edge detection value for the RX2 channel in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xe7), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the captured value from a specific register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xe7), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture mode for the RX2 FIC2 of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the capture mode to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xe7), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the capture pedestal mode value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved capture
 * pedestal mode value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xe7), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the RX2 FIC2 capture pedestrian in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xe7), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override enable status for the Rx2Fic2CaptPed
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xe7), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Rx2Fic2CaptPed register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xe7), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xe7), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a9), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a9), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a9), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a9), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the RX2 FIC2 capture in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xe7), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xe7), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection configuration for the RX2 channel of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xe7), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief This function reads a specific field from a hardware register and
 * stores the result in a provided variable.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the read value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xe7), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain change selection for the RX2 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the gain change selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedStartRx2GainChangeSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a9), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain change selection value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved gain change
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedStartRx2GainChangeSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a9), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the overload selection for the RX2 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the overload selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedStartRx2OverloadSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a9), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the overload selection value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved overload
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedStartRx2OverloadSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a9), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a9), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a9), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 register map for
 * the RX2 channel.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a9), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a9), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain change selection for the Rx2 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the gain change selection
 * value.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedStopRx2GainChangeSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a9), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain change selection value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved gain change
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedStopRx2GainChangeSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a9), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the overload selection for the RX2 channel in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the overload selection
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedStopRx2OverloadSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a9), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the overload selection value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved overload
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedStopRx2OverloadSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a9), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture trigger end delay for the ADRV9001 device by writing
 * to specific registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the value to be set,
 * which is split across three registers.
 * @return Returns the status of the last register write operation, where a
 * value of 0 indicates success and any non-zero value indicates an
 * error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xed), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xec), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xeb), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, with the
 * retrieved 24-bit value stored in the provided pointer.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xed), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xec), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xeb), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture trigger start delay for the ADRV9001 device by
 * writing to specific registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the delay value to be
 * set.
 * @return Returns the status of the last register write operation, which
 * indicates success (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xea), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xe9), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xe8), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, with `*value`
 * containing the combined 24-bit value from the three registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Fic2CaptPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xea), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xe9), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xe8), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx2 FIC pause threshold in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the Rx2 FIC pause threshold.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2FicPauseThld_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1e3), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the FIC pause threshold value from a specific register of
 * the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved FIC pause
 * threshold value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2FicPauseThld_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1e3), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable for the Rx2 gain table in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the gain table clock enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2GainTableClkEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1e4), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Rx2 gain table clock enable value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * enable value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2GainTableClkEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1e4), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture enable selection for the Rx2 HD2 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the capture enable selection to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Hd2CaptEnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1c3), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Hd2CaptEnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1c3), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture enable for the Rx2 HD2 path in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that indicates the capture enable state (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Hd2CaptPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xd9), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Hd2CaptPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xd9), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Rx2 HD2 capture pedal in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Hd2CaptPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xd9), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Hd2CaptPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xd9), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture edge detection value for the Rx2 hardware in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the capture edge detection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Hd2CaptPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xd9), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Hd2CaptPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xd9), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture mode for the Rx2 HD2 of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the capture mode to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Hd2CaptPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xd9), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the capture mode value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved capture mode
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Hd2CaptPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xd9), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the Rx2 HD2 capture pedestrian in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Hd2CaptPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xd9), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override enable value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Hd2CaptPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xd9), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Rx2Hd2CaptPed register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Hd2CaptPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xd9), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Hd2CaptPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xd9), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Hd2CaptPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a7), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Hd2CaptPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a7), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Hd2CaptPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a7), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Hd2CaptPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a7), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Rx2 HD2 capture in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Hd2CaptPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xd9), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Hd2CaptPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xd9), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection configuration for the Rx2 HD2 capture
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Hd2CaptPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xd9), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief This function retrieves a specific register value from a device and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return The function returns an integer status code indicating the success or
 * failure of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Hd2CaptPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xd9), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Hd2CaptPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a7), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Hd2CaptPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a7), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Hd2CaptPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a7), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Hd2CaptPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a7), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the end delay for the capture trigger in the ADRV9001 device by
 * writing to specific registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the value to be set,
 * which is split across three registers.
 * @return Returns the status of the last write operation, where a non-zero
 * value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Hd2CaptPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xdf), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xde), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xdd), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit integer where the retrieved value will be
 * stored.
 * @return Returns the status of the last read operation, with the retrieved
 * 24-bit value stored in the provided pointer.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Hd2CaptPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xdf), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xde), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xdd), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the start delay for the Rx2 HD2 capture pedestrian trigger by
 * writing to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer representing the start delay value to
 * be set.
 * @return Returns the status of the last register write operation, where a
 * value of 0 indicates success and any non-zero value indicates an
 * error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Hd2CaptPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xdc), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xdb), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xda), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the start delay value for the Rx2 HD2 capture trigger from
 * the device's register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved start
 * delay value will be stored.
 * @return Returns the status of the last read operation, with the retrieved
 * start delay value stored in the variable pointed to by 'value'.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2Hd2CaptPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xdc), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xdb), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xda), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx2 interrupt delay 0 enable for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that specifies the enable state for the Rx2
 * interrupt delay.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay0EnablePedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x13b), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay0EnablePedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x13b), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Rx2 interrupt delay 0 in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay0EnablePedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x13b), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type setting from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay0EnablePedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x13b), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Pedestal End Posedge Detect configuration for the Rx2 channel
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay0EnablePedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x13b), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the Rx2
 * interrupt delay and stores it in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay0EnablePedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x13b), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx2 interrupt delay 0 enable pedestrian mode configuration in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay0EnablePedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x13b), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay0EnablePedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x13b), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the Rx2 interrupt delay 0 in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay0EnablePedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x13b), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay0EnablePedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x13b), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Rx2 interrupt delay in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay0EnablePedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x13b), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay0EnablePedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x13b), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Rx2 interrupt delay 0 in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay0EnablePedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x13b), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay0EnablePedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x13b), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection enable for the Rx2 interrupt delay 0
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay0EnablePedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x13b), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay0EnablePedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x13b), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx2 interrupt delay and enables the pedestrian trigger end
 * delay by writing to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer that contains the value to be written
 * to the registers, with different portions used for different
 * registers.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay0EnablePedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x141), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x140), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x13f), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit integer where the retrieved value will be
 * stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay0EnablePedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x141), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x140), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x13f), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx2 interrupt delay and enables the PED trigger start delay
 * by writing to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer that contains the value to be written
 * to the registers, with different portions used for different
 * registers.
 * @return Returns the status of the last register write operation, which
 * indicates success (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay0EnablePedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x13e), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x13d), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x13c), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, where a non-
 * zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay0EnablePedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x13e), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x13d), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x13c), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Rx2IntDelay0PedStartArm0EnableSel` field in the
 * ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay0PedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b6), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay0PedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b6), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Rx2 interrupt delay 0 pedestrian start arm 1
 * enable selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the Rx2 interrupt delay configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay0PedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b6), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay0PedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b6), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx2 interrupt delay 0 pedestrian stop arm 0 enable selection
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay0PedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b6), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay0PedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b6), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Rx2IntDelay0PedStopArm1EnableSel` field in the
 * ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay0PedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b6), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay0PedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b6), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX2 interrupt delay 1 enable for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that indicates the enable state for the RX2
 * interrupt delay.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay1EnablePedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x142), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay1EnablePedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x142), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Rx2 interrupt delay 1 in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay1EnablePedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x142), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type for the Rx2 interrupt delay 1 from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved edge type
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay1EnablePedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x142), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Pedestal End Posedge Detect configuration for the Rx2 channel
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay1EnablePedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x142), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the Rx2
 * interrupt delay and stores it in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay1EnablePedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x142), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX2 interrupt delay 1 enable in pedestrian mode for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay1EnablePedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x142), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay1EnablePedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x142), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the Rx2 interrupt delay 1 in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay1EnablePedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x142), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the RX2
 * interrupt delay and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay1EnablePedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x142), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Rx2 interrupt delay 1 enable in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay1EnablePedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x142), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay1EnablePedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x142), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Rx2 interrupt delay 1 in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay1EnablePedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x142), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type for the Rx2 interrupt delay 1 from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved edge type
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay1EnablePedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x142), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection for the RX2 interrupt delay in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay1EnablePedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x142), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the RX2
 * interrupt delay and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay1EnablePedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x142), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx2 interrupt delay configuration by writing to specific
 * registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer containing the value to be split and
 * written to the registers.
 * @return Returns the status of the last register write operation, where 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay1EnablePedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x148), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x147), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x146), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive registers and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device context used for register access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, with `*value`
 * containing the combined 24-bit value from the three registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay1EnablePedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x148), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x147), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x146), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx2 interrupt delay and enables the pedestrian trigger start
 * delay by writing to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer containing the value to be split and
 * written to the registers.
 * @return Returns the status of the last register write operation, where 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay1EnablePedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x145), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x144), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x143), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, with the
 * retrieved 24-bit value stored in the location pointed to by the
 * 'value' parameter.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay1EnablePedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x145), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x144), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x143), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Rx2IntDelay1PedStartArm0EnableSel` register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay1PedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b7), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay1PedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b7), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx2 interrupt delay 1 pedestrian start arm 1 enable selection
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay1PedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b7), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay1PedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b7), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx2 interrupt delay 1 pedestrian stop arm 0 enable selection
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay1PedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b7), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay1PedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b7), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Rx2 interrupt delay 1 pedestrian stop arm 1
 * enable selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay1PedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b7), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntDelay1PedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b7), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX2 interrupt ORX enable PED enable field in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntOrxEnablePedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x12d), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntOrxEnablePedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x12d), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Rx2 interrupt or ORx enable in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntOrxEnablePedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x12d), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register for the RX2
 * interface of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntOrxEnablePedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x12d), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the end position edge detection for the RX2 interrupt in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntOrxEnablePedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x12d), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the RX2
 * interrupt or ORX enable PED end posedge detection.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntOrxEnablePedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x12d), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PED mode for the RX2 interrupt in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the PED mode register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntOrxEnablePedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x12d), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntOrxEnablePedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x12d), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the Rx2 INT ORX in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntOrxEnablePedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x12d), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntOrxEnablePedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x12d), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the RX2 INT ORX enable in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntOrxEnablePedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x12d), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value for the RX2 interrupt or ORX enable
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved soft
 * override value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntOrxEnablePedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x12d), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the RX2 interrupt or ORX enable in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntOrxEnablePedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x12d), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntOrxEnablePedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x12d), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection for the RX2 interrupt or ORX enable
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntOrxEnablePedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x12d), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the RX2
 * interrupt or ORX enable PED start negative edge detection.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntOrxEnablePedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x12d), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the end delay for the RX2 interrupt or ORX enable PED trigger by
 * writing to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer that contains the value to be written
 * to the registers, with specific bits used for different
 * registers.
 * @return Returns the status of the last write operation, where a non-zero
 * value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntOrxEnablePedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x133), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x132), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x131), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, where a value of 0
 * indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntOrxEnablePedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x133), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x132), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x131), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the start delay for the RX2 interrupt or ORX enable PED trigger
 * by writing to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer that contains the value to be written
 * to the registers, with different portions used for different
 * registers.
 * @return Returns the status of the last write operation, where a non-zero
 * value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntOrxEnablePedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x130), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x12f), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x12e), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, where a zero
 * indicates success and a non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntOrxEnablePedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x130), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x12f), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x12e), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable selection for the RX2 interrupt or ORX PED start arm 0
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntOrxPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b4), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntOrxPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b4), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable selection for the RX2 interrupt or ORX PED start arm 1
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntOrxPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b4), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntOrxPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b4), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 register map for
 * RX2 interrupt or ORX pedestrian stop arm 0 enable selection.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntOrxPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b4), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntOrxPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b4), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntOrxPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b4), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntOrxPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b4), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX2 interrupt receive enable for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that indicates the enable state for the RX2
 * interrupt.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntRxEnablePedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x134), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntRxEnablePedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x134), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Rx2 interrupt in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntRxEnablePedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x134), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type for the Rx2 interrupt enable
 * configuration from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved edge type
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntRxEnablePedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x134), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX2 interrupt enable for positive edge detection in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntRxEnablePedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x134), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the RX2
 * interrupt enable for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntRxEnablePedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x134), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX2 interrupt receive enable in pedestrian mode for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer that specifies the value to set for the
 * RX2 interrupt receive enable.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntRxEnablePedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x134), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RX2 interrupt enable status for the PED mode from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntRxEnablePedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x134), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the RX2 interrupt in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntRxEnablePedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x134), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntRxEnablePedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x134), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the RX2 interrupt enable in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RX2 interrupt enable soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntRxEnablePedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x134), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value for the RX2 interrupt enable from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntRxEnablePedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x134), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the RX2 interrupt enable in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntRxEnablePedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x134), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type for the Rx2 interrupt enable
 * configuration from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved edge type
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntRxEnablePedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x134), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection for the RX2 interrupt enable in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntRxEnablePedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x134), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the RX2
 * interrupt enable negative edge detection.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntRxEnablePedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x134), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx2 interrupt enable and trigger end delay by writing to
 * specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer containing the value to be written to
 * the registers, with specific bits representing different
 * settings.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntRxEnablePedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x13a), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x139), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x138), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Pedestal Trigger End Delay value from the ADRV9001
 * device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntRxEnablePedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x13a), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x139), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x138), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX2 interrupt enable and trigger start delay by writing to
 * specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer containing the value to be written to
 * the registers, with specific bits representing different
 * settings.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntRxEnablePedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x137), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x136), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x135), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Pedestal Trigger Start Delay value from the ADRV9001
 * device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntRxEnablePedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x137), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x136), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x135), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX2 interrupt RX pedestrian start arm 0 enable selection in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntRxPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b5), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntRxPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b5), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX2 interrupt RX pedestrian start arm 1 enable selection in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntRxPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b5), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntRxPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b5), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 register map for
 * RX2 interrupt configuration.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntRxPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b5), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntRxPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b5), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntRxPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b5), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2IntRxPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b5), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the phase accumulation clock enable for the Rx2 LPK in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2LpkPhaseAccumClkEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1e4), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the phase accumulation clock enable value from a specific
 * register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2LpkPhaseAccumClkEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1e4), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low synchronization pedal enable value for the RX2 NCO in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync0PedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x111), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization pedestal enable value from a
 * specific register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync0PedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x111), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Rx2 NCO low synchronization in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync0PedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x111), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync0PedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x111), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low synchronization position edge detection value for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the NCO low sync position edge detection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync0PedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x111), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization position of the NCO for the second
 * receiver in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync0PedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x111), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low synchronization mode for the RX2 NCO in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync0PedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x111), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization mode value from a specific register
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved low
 * synchronization mode value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync0PedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x111), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the NCO low sync 0 of the RX2
 * channel in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync0PedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x111), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync0PedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x111), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the NCO low sync 0 of the RX2 channel
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync0PedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x111), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value for the NCO low synchronization of
 * the second receiver in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync0PedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x111), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable selection for the Rx2 NCO low sync 0 pedal start arm 0
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync0PedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b0), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync0PedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b0), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Arm1EnableSel` field in the NCO register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the `Arm1EnableSel` field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync0PedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b0), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync0PedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b0), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Rx2 NCO low sync 0 ped start in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync0PedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x111), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync0PedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x111), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection configuration for the Rx2 NCO low
 * sync 0 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync0PedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x111), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved
 * synchronization value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync0PedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x111), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Rx2NcoLoSync0PedStopArm0EnableSel` field in the
 * ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync0PedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b0), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync0PedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b0), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Rx2NcoLoSync0PedStopArm1EnableSel` field in the
 * ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync0PedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b0), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync0PedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b0), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low synchronization end delay value for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the value to be set,
 * which is divided into three parts for writing to different
 * registers.
 * @return Returns the status of the last write operation, where a non-zero
 * value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync0PedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x117), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x116), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x115), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO low synchronization end delay value from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync0PedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x117), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x116), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x115), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the start delay for the Rx2 NCO low sync 0 ped trigger in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the value to be set for
 * the start delay, which is divided into three parts for writing.
 * @return Returns the status of the last register write operation, where a
 * value of 0 indicates success and any non-zero value indicates an
 * error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync0PedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x114), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x113), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x112), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO low synchronization trigger start delay value from a
 * device's register.
 *
 * @param device A pointer to the device structure from which the register
 * values will be read.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, with the retrieved NCO
 * low synchronization trigger start delay value stored in the variable
 * pointed to by 'value'.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync0PedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x114), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x113), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x112), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low synchronization 1 pedal enable value in the ADRV9001
 * device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync1PedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x118), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization 1 pedestal enable value from a
 * specific register of the device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync1PedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x118), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Rx2 NCO low synchronization in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync1PedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x118), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync1PedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x118), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low synchronization 1 pedestrian end position detect
 * value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the NCO low sync 1 pedestrian end position detect.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync1PedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x118), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization end position value from a specific
 * register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync1PedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x118), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low synchronization mode for the RX2 NCO in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync1PedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x118), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization mode value from a specific register
 * for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved low
 * synchronization mode value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync1PedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x118), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the NCO low sync 1 of the RX2
 * channel in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync1PedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x118), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override enable status for the Rx2 NCO Lo Sync 1 of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync1PedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x118), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the NCO low synchronization of the
 * second receiver in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync1PedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x118), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value for the NCO low synchronization of
 * the second receiver in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync1PedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x118), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low synchronization 1 pedestrian start arm 0 enable
 * selection value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the NCO low sync enable selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync1PedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b1), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync1PedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b1), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 register map for
 * the RX2 NCO Lo Sync 1 Ped Start Arm 1 Enable selection.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync1PedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b1), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync1PedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b1), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Rx2 NCO low synchronization in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync1PedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x118), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync1PedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x118), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection configuration for the Rx2 NCO low
 * synchronization in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync1PedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x118), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO low synchronization 1 pedestals start negative edge
 * detection value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync1PedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x118), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value for the `Rx2NcoLoSync1PedStopArm0EnableSel` field in
 * the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync1PedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b1), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync1PedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b1), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Rx2NcoLoSync1PedStopArm1EnableSel` field in the
 * ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync1PedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b1), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync1PedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b1), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the end delay for the Rx2 NCO low sync 1 ped trigger by writing
 * to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer that contains the value to be written
 * to the registers, which is split into three parts.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync1PedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x11e), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x11d), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x11c), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO low synchronization 1 pedestal trigger end delay
 * value from the device's registers.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, with the output value
 * containing the combined result from the three register reads.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync1PedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x11e), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x11d), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x11c), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the start delay for the Rx2 NCO low sync 1 pedestrian trigger by
 * writing to specific registers.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the start delay value to
 * be set.
 * @return Returns 0 on success or a negative error code if any of the register
 * writes fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync1PedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x11b), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x11a), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x119), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO low synchronization 1 ped trigger start delay value
 * from the device's registers.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync1PedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x11b), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x11a), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x119), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low synchronization for the RX2 NCO and enables the pedal
 * functionality in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync2PedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x11f), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization setting for the Rx2 NCO and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync2PedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x11f), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Rx2 NCO low synchronization to
 * the specified value.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the generated edge type.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync2PedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x11f), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization generated edge type value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync2PedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x11f), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low synchronization to the specified value in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the device register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync2PedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x11f), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization position of the RX2 NCO from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync2PedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x11f), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low synchronization to ped mode for the Rx2 channel of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync2PedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x11f), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization value for the second NCO in receive
 * mode from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved low
 * synchronization value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync2PedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x11f), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the NCO low sync 2 ped in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync2PedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x11f), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override enable status for the Rx2 NCO Lo Sync 2 in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync2PedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x11f), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the NCO low sync 2 of the RX2 channel
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync2PedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x11f), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value for the NCO low synchronization of
 * the second receiver in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync2PedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x11f), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync2PedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b2), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync2PedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b2), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync2PedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b2), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync2PedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b2), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Rx2 NCO low synchronization in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync2PedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x11f), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync2PedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x11f), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low synchronization negative edge detection value in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the NCO low synchronization negative edge detection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync2PedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x11f), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low synchronization value from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync2PedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x11f), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `Rx2NcoLoSync2PedStopArm0EnableSel` field in the
 * ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync2PedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b2), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync2PedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b2), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync2PedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b2), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync2PedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b2), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO low synchronization to pedestal trigger end delay value
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the value to be set,
 * which is divided into three parts for writing to different
 * registers.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync2PedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x125), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x124), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x123), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO low sync to PED trigger end delay value from the
 * device's registers.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, with the
 * output value containing the combined result of the three register
 * reads.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync2PedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x125), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x124), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x123), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx2 NCO Lo Sync 2 Ped Trigger Start Delay by writing to
 * specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer representing the value to be written
 * to the registers, which is split into three parts.
 * @return Returns the status of the last register write operation, where a non-
 * zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync2PedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x122), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x121), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x120), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO low sync to PED trigger start delay value from the
 * device's registers.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, with the retrieved NCO
 * low sync to PED trigger start delay value stored in the variable
 * pointed to by value.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2NcoLoSync2PedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x122), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x121), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x120), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable selection for the RSSI capture in the RX2 power
 * monitor of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2PwrMonRssiCaptPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ac), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI capture settings from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2PwrMonRssiCaptPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ac), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable selection for the RSSI capture in the RX2 power
 * monitor of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2PwrMonRssiCaptPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ac), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI capture pedestal start arm 1 enable selection value
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2PwrMonRssiCaptPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ac), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable selection for the RSSI capture power monitor in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2PwrMonRssiCaptPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ac), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI capture settings from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2PwrMonRssiCaptPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ac), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable selection for the RSSI capture power monitor in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2PwrMonRssiCaptPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ac), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI capture settings from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2PwrMonRssiCaptPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ac), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI pedestal enable value for the RX2 power monitor in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RSSI pedestal enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2PwrMonRssiPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xf5), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI power monitor enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2PwrMonRssiPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xf5), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the RSSI power monitor in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2PwrMonRssiPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xf5), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI pedestals end generated edge type value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2PwrMonRssiPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xf5), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power monitor RSSI pedestal end edge detection value in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2PwrMonRssiPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xf5), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI value from a specific register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved RSSI value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2PwrMonRssiPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xf5), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RSSI pedestal mode for the RX2 power monitor in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * RSSI pedestal mode.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2PwrMonRssiPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xf5), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI power monitor value from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved RSSI power
 * monitor value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2PwrMonRssiPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xf5), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the RSSI power monitor of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * soft override.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2PwrMonRssiPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xf5), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI power monitor soft override enable value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2PwrMonRssiPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xf5), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the RSSI power monitor of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RSSI power monitor soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2PwrMonRssiPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xf5), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI Pedestal Soft Override value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2PwrMonRssiPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xf5), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the RSSI power monitor in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2PwrMonRssiPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xf5), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI power monitor start generated edge type from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2PwrMonRssiPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xf5), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection configuration for the RSSI power
 * monitor of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2PwrMonRssiPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xf5), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI power monitor start negative edge detection value
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2PwrMonRssiPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xf5), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the end delay for the RSSI power monitor trigger in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the value to be set,
 * which is split into three parts for writing to different
 * registers.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2PwrMonRssiPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xfb), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xfa), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xf9), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI Pedestal Trigger End Delay value from the ADRV9001
 * device by reading multiple registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved RSSI
 * Pedestal Trigger End Delay value will be stored.
 * @return Returns the status of the last register read operation, with the RSSI
 * Pedestal Trigger End Delay value stored in the location pointed to by
 * the value parameter.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2PwrMonRssiPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xfb), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xfa), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xf9), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the start delay for the RSSI power monitor trigger in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the value to be set,
 * which is divided into three parts for writing to different
 * registers.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2PwrMonRssiPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xf8), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xf7), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xf6), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI power monitor trigger start delay value from the
 * device's register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, with the
 * output value containing the combined result of the three register
 * reads.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2PwrMonRssiPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xf8), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xf7), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xf6), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC Preamble Enable field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the RFDC Preamble Enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RfdcPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x103), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC PED enable status from a specific register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RfdcPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x103), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the RFDC PED end in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RfdcPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x103), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register in the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RfdcPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x103), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC edge detection configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RFDC edge detection register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RfdcPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x103), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC pedestal end position detection value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RfdcPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x103), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC Preamble Mode for the RX2 channel of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the preamble mode value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RfdcPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x103), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC pedestal mode value from a specific register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved pedestal
 * mode value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RfdcPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x103), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the RX2 RFDC PED in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to set for the
 * soft override enable.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RfdcPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x103), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC PED soft override enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RfdcPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x103), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the RFDC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the soft override value
 * to be set.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RfdcPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x103), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value for the RFDC from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RfdcPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x103), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RfdcPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ae), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RfdcPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ae), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC PED start arm 1 enable selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RFDC PED start arm 1 enable selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RfdcPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ae), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RfdcPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ae), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the RFDC PED start in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RfdcPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x103), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved edge type
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RfdcPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x103), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection configuration for the RFDC in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RfdcPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x103), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the negative edge detection value from a specific register
 * for the RFDC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RfdcPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x103), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the RFDC PED stop arm 0 enable selection in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RFDC PED stop arm 0 enable selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RfdcPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ae), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RfdcPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ae), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RfdcPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ae), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RfdcPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ae), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC Pedestal Trigger End Delay by writing to specific
 * registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer representing the delay value to be
 * set, which is split across three registers.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RfdcPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x109), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x108), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x107), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC Ped Trigger End Delay value from the device's
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, with the retrieved
 * RFDC Ped Trigger End Delay value stored in the variable pointed to by
 * value.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RfdcPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x109), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x108), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x107), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RFDC trigger start delay by writing to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer representing the delay value to be
 * set, which is split across three registers.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RfdcPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x106), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x105), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x104), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RFDC Pedestal Trigger Start Delay value from the
 * device's registers.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, indicating
 * success (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RfdcPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x106), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x105), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x104), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecCaptPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1aa), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecCaptPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1aa), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecCaptPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1aa), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecCaptPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1aa), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecCaptPedStartExtlpbkSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ab), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecCaptPedStartExtlpbkSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ab), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the internal loopback selection for the RX2 RXQEC capture in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecCaptPedStartIntlpbkSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ab), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecCaptPedStartIntlpbkSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ab), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX2 RXQEC capture pedestal start or RXQEC selection in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecCaptPedStartOrxqecSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ab), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecCaptPedStartOrxqecSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ab), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RXQEC selection value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RXQEC selection register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecCaptPedStartRxqecSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ab), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecCaptPedStartRxqecSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ab), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecCaptPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1aa), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecCaptPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1aa), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecCaptPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1aa), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecCaptPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1aa), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecCaptPedStopExtlpbkSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ab), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecCaptPedStopExtlpbkSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ab), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the internal loopback selection for the Rx2 RxQEC capture by
 * writing a specified value to a hardware register.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecCaptPedStopIntlpbkSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ab), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecCaptPedStopIntlpbkSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ab), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX2 RXQEC capture pedestal stop or RXQEC selection value in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RX2 RXQEC capture pedestal stop or RXQEC selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecCaptPedStopOrxqecSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ab), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecCaptPedStopOrxqecSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ab), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RXQEC capture selection value in the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the RXQEC capture selection register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecCaptPedStopRxqecSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ab), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecCaptPedStopRxqecSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ab), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the readiness generation enable for the Rx2 RxQEC correction in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecCorrRdyGenEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1e1), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the readiness status of the RX2 RXQEC correction generator
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecCorrRdyGenEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1e1), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX2 RXQEC correlation ready generation selection in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecCorrRdyGenSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1e1), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecCorrRdyGenSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1e1), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX2 RXQEC PED enable field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that indicates the enable state for the RX2
 * RXQEC PED.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xee), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the RX2 RXQEC
 * PED enable status.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xee), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the RX2 RXQEC PED in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xee), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xee), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX2 RXQEC PED end position detect value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xee), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xee), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX2 RXQEC PED mode in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * RX2 RXQEC PED mode.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xee), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RX2 RXQEC PED mode value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xee), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the RX2 RXQEC PED in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xee), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override enable status for the Rx2 RxQEC of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xee), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the RX2 RXQEC PED in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the soft override value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xee), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value for the Rx2 RxQEC PED from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xee), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the RX2 RXQEC PED in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xee), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xee), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection configuration for the RX2 RXQEC of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xee), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xee), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Rx2 RxQEC Ped Trigger End Delay by writing to specific
 * registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer representing the delay value to be
 * set, which is split across three registers.
 * @return Returns the status of the last register write operation, where a non-
 * zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xf4), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xf3), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xf2), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive registers in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, where a value of 0
 * indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xf4), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xf3), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xf2), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX2 RXQEC PED trigger start delay by writing to specific
 * registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer representing the delay value to be
 * set, which is split across three registers.
 * @return Returns the status of the last register write operation, where a zero
 * indicates success and a non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xf1), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xf0), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xef), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the start delay value for the Rx2 RxQEC PED trigger from the
 * device's register.
 *
 * @param device A pointer to the device structure used for register access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the register read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Rx2RxqecPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xf1), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xf0), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xef), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RX QEC capture pedestal start selection value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RX QEC capture pedestal start selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_RxqecCaptPedStartRx2Sel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1c3), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_RxqecCaptPedStartRx2Sel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1c3), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RxQEC capture pedestal stop selection value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RxQEC capture pedestal stop selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_RxqecCaptPedStopRx2Sel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1c3), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_RxqecCaptPedStopRx2Sel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1c3), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RXQEC observation ready generation selection in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_RxqecObsRdyGenSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1e1), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_RxqecObsRdyGenSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1e1), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software status register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the software status register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_SwStatus0_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x1e), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the software status from a specific register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved status value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_SwStatus0_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x1e), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software status register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the software status register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_SwStatus1_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x1f), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the software status from a specific register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved status value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_SwStatus1_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x1f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `Tx1ClgcRssiCcDataCaptPedEn` field in the ADRV9001 device
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1ClgcRssiCcDataCaptPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xb6), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1ClgcRssiCcDataCaptPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xb6), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Tx1 CLGC RSSI capture by writing
 * to a specific hardware register.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1ClgcRssiCcDataCaptPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xb6), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1ClgcRssiCcDataCaptPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xb6), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the device register for the
 * ADRV9001.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1ClgcRssiCcDataCaptPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xb6), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief This function retrieves a specific register value from a device and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return The function returns an integer status code indicating the success or
 * failure of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1ClgcRssiCcDataCaptPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xb6), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `Tx1ClgcRssiCcDataCaptPedMode` register value for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1ClgcRssiCcDataCaptPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xb6), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI CC data capture value from a specific register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1ClgcRssiCcDataCaptPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xb6), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the RSSI capture in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1ClgcRssiCcDataCaptPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xb6), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override enable status for the RSSI data capture in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1ClgcRssiCcDataCaptPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xb6), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the RSSI capture in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1ClgcRssiCcDataCaptPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xb6), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value for the Tx1 Clgc Rssi CC data
 * capture from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1ClgcRssiCcDataCaptPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xb6), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the RSSI capture in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1ClgcRssiCcDataCaptPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xb6), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1ClgcRssiCcDataCaptPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xb6), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection configuration for the RSSI capture in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1ClgcRssiCcDataCaptPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xb6), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1ClgcRssiCcDataCaptPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xb6), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 Clgc Rssi CC Data Capture Ped Trigger End Delay in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the value to be set,
 * which is split into three parts for writing to different
 * registers.
 * @return Returns the status of the last register write operation, which
 * indicates success (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1ClgcRssiCcDataCaptPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xbc), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xbb), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xba), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit integer where the retrieved value will be
 * stored.
 * @return Returns the status of the last register read operation, indicating
 * success (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1ClgcRssiCcDataCaptPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xbc), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xbb), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xba), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 Clgc Rssi CC Data Capture Ped Trigger Start Delay by
 * writing to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer containing the value to be split and
 * written to the registers.
 * @return Returns the status of the last register write operation, indicating
 * success (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1ClgcRssiCcDataCaptPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xb9), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xb8), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xb7), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, with the
 * retrieved 24-bit value stored in the location pointed to by the value
 * parameter.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1ClgcRssiCcDataCaptPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xb9), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xb8), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xb7), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1ClgcRssiCcPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a2), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1ClgcRssiCcPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a2), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1ClgcRssiCcPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a2), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1ClgcRssiCcPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a2), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1ClgcRssiCcPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a2), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1ClgcRssiCcPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a2), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1ClgcRssiCcPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a2), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1ClgcRssiCcPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a2), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the active selection for the DPD (Digital Pre-Distortion) in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the DPD active selection register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1DpdActiveSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1c2), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the active selection value for the DPD (Digital Pre-
 * Distortion) from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved DPD active
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1DpdActiveSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1c2), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DPD data capture pedestal enable value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value representing the pedestal enable setting to be
 * written.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1DpdDataCaptPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xa8), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1DpdDataCaptPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xa8), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Tx1 DPD data capture in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1DpdDataCaptPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xa8), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1DpdDataCaptPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xa8), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the end position detection value for the Tx1 DPD data capture in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * end position detection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1DpdDataCaptPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xa8), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the end position of the DPD data capture by reading a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1DpdDataCaptPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xa8), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DPD data capture mode for the transmitter in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the DPD data capture mode.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1DpdDataCaptPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xa8), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DPD data capture mode value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1DpdDataCaptPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xa8), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the Tx1 DPD data capture in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1DpdDataCaptPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xa8), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override enable status for the Tx1 DPD data capture
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved status will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1DpdDataCaptPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xa8), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Tx1 DPD data capture in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1DpdDataCaptPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xa8), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value for the Tx1 DPD data capture from a
 * specific register.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1DpdDataCaptPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xa8), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the DPD data capture in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1DpdDataCaptPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xa8), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1DpdDataCaptPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xa8), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection configuration for the Tx1 DPD data
 * capture in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1DpdDataCaptPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xa8), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1DpdDataCaptPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xa8), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 DPD data capture pedestal trigger end delay by writing to
 * specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer representing the value to be set,
 * which is split across three registers.
 * @return Returns the status of the last write operation, where a non-zero
 * value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1DpdDataCaptPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xae), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xad), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xac), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DPD data capture end delay value from the device's
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, with the output value
 * containing the combined result of the three register reads.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1DpdDataCaptPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xae), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xad), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xac), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 DPD data capture pedestal trigger start delay in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the delay value to be
 * set, which is split into three parts for writing.
 * @return Returns the status of the last register write operation, which
 * indicates success (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1DpdDataCaptPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xab), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xaa), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xa9), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DPD data capture trigger start delay value from a
 * device's register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, with the
 * output value containing the combined data from the three registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1DpdDataCaptPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xab), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xaa), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xa9), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable for the Tx1 gain table in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the gain table clock enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1GainTableClkEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1e4), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock enable status of the Tx1 gain table from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1GainTableClkEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1e4), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 Gain Amplifier RSSI Capture Pedestal Enable value in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1GanAmpRssiCcDataCaptPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xbd), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI data capture enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1GanAmpRssiCcDataCaptPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xbd), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Tx1 gain amplifier RSSI capture
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1GanAmpRssiCcDataCaptPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xbd), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI CC data capture value from a specific register in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1GanAmpRssiCcDataCaptPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xbd), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1GanAmpRssiCcDataCaptPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xbd), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI value from a specific register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved RSSI value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1GanAmpRssiCcDataCaptPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xbd), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain amplifier RSSI capture mode for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1GanAmpRssiCcDataCaptPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xbd), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI value from a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved RSSI value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1GanAmpRssiCcDataCaptPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xbd), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the Tx1 gain amplifier RSSI capture
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1GanAmpRssiCcDataCaptPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xbd), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override enable value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1GanAmpRssiCcDataCaptPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xbd), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Tx1 gain amplifier RSSI capture
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the soft override value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1GanAmpRssiCcDataCaptPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xbd), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1GanAmpRssiCcDataCaptPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xbd), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Tx1 gain amplifier RSSI capture
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1GanAmpRssiCcDataCaptPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xbd), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1GanAmpRssiCcDataCaptPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xbd), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection configuration for the Tx1 gain
 * amplifier RSSI capture in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1GanAmpRssiCcDataCaptPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xbd), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI data from a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved RSSI data
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1GanAmpRssiCcDataCaptPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xbd), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 Gain Amplifier RSSI Capture Ped Trigger End Delay by
 * writing to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer representing the value to be set,
 * which is split across three registers.
 * @return Returns 0 on success or a negative error code if any of the register
 * writes fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1GanAmpRssiCcDataCaptPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xc3), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xc2), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xc1), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx1 Gain Amplifier RSSI CC data capture end delay value
 * from the device's registers.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, with the value pointer
 * containing the combined 32-bit value from the three registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1GanAmpRssiCcDataCaptPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xc3), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xc2), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xc1), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 Gain Amplifier RSSI Capture Pedestal Trigger Start Delay
 * by writing to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer representing the value to be set,
 * which is split across three registers.
 * @return Returns the status of the last register write operation, where a non-
 * zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1GanAmpRssiCcDataCaptPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xc0), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xbf), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xbe), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves and combines three register values into a single 32-bit
 * integer.
 *
 * @param device A pointer to the device context used for register access.
 * @param value A pointer to a 32-bit integer where the combined register values
 * will be stored.
 * @return Returns the status of the last register read operation, indicating
 * success or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1GanAmpRssiCcDataCaptPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xc0), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xbf), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xbe), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 Gain Amplifier RSSI Cc Ped Start Arm 0 Enable selection
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1GanAmpRssiCcPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a3), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1GanAmpRssiCcPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a3), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1GanAmpRssiCcPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a3), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1GanAmpRssiCcPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a3), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 Gain Amplifier RSSI CC Ped Stop Arm 0 Enable selection in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1GanAmpRssiCcPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a3), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1GanAmpRssiCcPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a3), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Tx1 Gain Amplifier RSSI CC Ped Stop Arm 1 Enable
 * selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the Tx1 Gain Amplifier RSSI CC Ped Stop Arm 1 Enable selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1GanAmpRssiCcPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a3), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the Tx1 Gain
 * Amplifier RSSI configuration.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1GanAmpRssiCcPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a3), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 internal delay 0 capture pedestal enable value in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written,
 * which determines the enable state for the capture pedestal.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay0EnableCaptPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xcb), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay0EnableCaptPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xcb), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 internal delay capture edge type in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay0EnableCaptPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xcb), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay0EnableCaptPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xcb), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 interrupt delay capture edge detection value in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay0EnableCaptPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xcb), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay0EnableCaptPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xcb), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture pedestal mode for the Tx1 internal delay 0 in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay0EnableCaptPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xcb), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay0EnableCaptPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xcb), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 internal delay capture soft override enable value in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay0EnableCaptPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xcb), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay0EnableCaptPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xcb), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Tx1 internal delay capture in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay0EnableCaptPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xcb), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay0EnableCaptPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xcb), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Tx1 interrupt delay capture in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay0EnableCaptPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xcb), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay0EnableCaptPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xcb), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture edge detection configuration for the Tx1 interrupt
 * delay in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay0EnableCaptPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xcb), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay0EnableCaptPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xcb), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 internal delay configuration by writing to specific
 * registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer containing the delay configuration
 * value to be set.
 * @return Returns the status of the last write operation, where a non-zero
 * value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay0EnableCaptPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xd1), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xd0), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xcf), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero). The retrieved 24-bit value is stored in the
 * location pointed to by the 'value' parameter.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay0EnableCaptPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xd1), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xd0), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xcf), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 internal delay configuration by writing to specific
 * registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer that contains the delay configuration
 * value to be set.
 * @return Returns the status of the last write operation, where a non-zero
 * value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay0EnableCaptPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xce), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xcd), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xcc), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, where a non-
 * zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay0EnableCaptPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xce), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xcd), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xcc), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 interrupt delay for the ADRV9001 device by writing a
 * specified value to a specific register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay0PedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a5), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay0PedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a5), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 interrupt delay and enables the selection for the
 * specified device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay0PedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a5), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay0PedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a5), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 internal delay configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay0PedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a5), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay0PedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a5), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 interrupt delay configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay0PedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a5), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay0PedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a5), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 internal delay 1 capture pedestal enable value in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay1EnableCaptPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xd2), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay1EnableCaptPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xd2), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 interrupt delay capture edge type in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay1EnableCaptPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xd2), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay1EnableCaptPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xd2), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 internal delay capture edge detection configuration for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay1EnableCaptPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xd2), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay1EnableCaptPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xd2), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture mode for the Tx1 internal delay by writing a
 * specified value to a hardware register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay1EnableCaptPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xd2), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay1EnableCaptPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xd2), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 internal delay capture pedal soft override enable
 * configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay1EnableCaptPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xd2), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay1EnableCaptPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xd2), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Tx1 internal delay capture in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay1EnableCaptPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xd2), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay1EnableCaptPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xd2), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 internal delay capture edge type in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay1EnableCaptPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xd2), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay1EnableCaptPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xd2), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 internal delay capture edge detection configuration for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay1EnableCaptPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xd2), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the Tx1
 * interrupt delay and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay1EnableCaptPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xd2), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 internal delay configuration by writing to specific
 * registers.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer that contains the delay configuration
 * value to be set.
 * @return Returns the status of the last write operation, where a non-zero
 * value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay1EnableCaptPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xd8), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xd7), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xd6), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit integer where the retrieved value will be
 * stored.
 * @return Returns the status of the last read operation, where a status of 0
 * indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay1EnableCaptPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xd8), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xd7), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xd6), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 internal delay configuration by writing to specific
 * registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer containing the delay configuration
 * value to be set.
 * @return Returns the status of the last write operation, where a non-zero
 * value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay1EnableCaptPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xd5), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xd4), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xd3), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, with the
 * retrieved 24-bit value stored in the location pointed to by the
 * 'value' parameter.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay1EnableCaptPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xd5), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xd4), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xd3), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 interrupt delay 1 pedestrian start arm 0 enable selection
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay1PedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a6), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay1PedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a6), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 interrupt delay and enables the selection for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay1PedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a6), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay1PedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a6), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 interrupt delay 1 pedestrian stop arm 0 enable selection
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay1PedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a6), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay1PedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a6), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 interrupt delay and enables the selection for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay1PedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a6), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntDelay1PedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a6), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 interrupt capture enable bit in the ADRV9001 device
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that determines the state of the Tx1 interrupt
 * capture enable bit.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntTxEnableCaptPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xc4), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntTxEnableCaptPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xc4), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Tx1 interrupt capture in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntTxEnableCaptPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xc4), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntTxEnableCaptPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xc4), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 interrupt capture edge detection configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntTxEnableCaptPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xc4), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntTxEnableCaptPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xc4), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture mode for the Tx1 interrupt in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntTxEnableCaptPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xc4), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntTxEnableCaptPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xc4), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 interrupt enable capture pedestal soft override value in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the Tx1 interrupt enable capture pedestal soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntTxEnableCaptPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xc4), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntTxEnableCaptPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xc4), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Tx1 interrupt transmission enable
 * capture in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntTxEnableCaptPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xc4), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx1 interrupt transmit enable capture pedestal soft
 * override value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntTxEnableCaptPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xc4), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Tx1 interrupt capture in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntTxEnableCaptPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xc4), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntTxEnableCaptPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xc4), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection for the Tx1 interrupt capture in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntTxEnableCaptPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xc4), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntTxEnableCaptPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xc4), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 interrupt trigger end delay by writing to specific
 * registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer that contains the value to be written
 * to the registers, with specific bits used for different
 * registers.
 * @return Returns the status of the last register write operation, which
 * indicates success (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntTxEnableCaptPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xca), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xc9), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xc8), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit integer where the retrieved value will be
 * stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntTxEnableCaptPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xca), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xc9), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xc8), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 interrupt trigger start delay by writing to specific
 * registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer representing the value to be written,
 * which is split across three registers.
 * @return Returns the status of the last write operation, where a non-zero
 * value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntTxEnableCaptPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xc7), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xc6), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xc5), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit integer where the retrieved value will be
 * stored.
 * @return Returns the status of the last register read operation, indicating
 * success or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntTxEnableCaptPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xc7), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xc6), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xc5), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 interrupt transmission pedal start arm 0 enable selection
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntTxPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a4), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntTxPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a4), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 interrupt transmission pedal start arm 1 enable selection
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntTxPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a4), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntTxPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a4), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 interrupt TxPed stop arm 0 enable selection in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntTxPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a4), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntTxPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a4), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxPedStopArm1EnableSel field in the ADRV9001 register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntTxPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a4), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1IntTxPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a4), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PA ramp clock divider value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the PA ramp clock divider
 * value to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampClkDivValue_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x17), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x16), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PA ramp clock divider value from the device's register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved PA
 * ramp clock divider value will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampClkDivValue_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x17), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x16), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PA ramp clock enable field in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the PA ramp clock enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampClkEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x15), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PA ramp clock enable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampClkEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x15), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the delayed enable start selection for the PA ramp in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampDelayedEnableStartSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x15), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the delayed enable start selection value from a specific
 * register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampDelayedEnableStartSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x15), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PA ramp delayed enable stop selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampDelayedEnableStopSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampDelayedEnableStopSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PA ramp delayed enable start selection for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampDelayedEnableTx1EnableStartSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x15), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampDelayedEnableTx1EnableStartSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x15), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PA ramp delayed enable and TX1 enable stop selection in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampDelayedEnableTx1EnableStopSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampDelayedEnableTx1EnableStopSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PA ramp enable configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the PA ramp enable value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x15), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PA ramp enable status from a specific register in the
 * device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved PA ramp
 * enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x15), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO mask for the PA ramp enable in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO mask.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampEnableGpioMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO mask for the PA ramp enable setting from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved GPIO mask
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampEnableGpioMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO selection for the PA ramp enable in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the GPIO selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampEnableGpioSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x15), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO selection value for the Tx1 PA ramp enable from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampEnableGpioSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x15), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PA ramp enable value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the PA ramp enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x2a), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PA ramp pedal enable value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x2a), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Tx1 PA ramp pedal end in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x2a), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x2a), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 PA ramp edge detection value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x2a), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PA ramp pedestal end position from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x2a), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PA ramp in ped mode for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * PA ramp.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x2a), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PA ramp mode value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved PA ramp mode
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x2a), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the Tx1 PA ramp in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * soft override enable.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x2a), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override enable value for the Tx1 PA ramp from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x2a), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Tx1 PA ramp in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the soft override value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x2a), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value for the Tx1 PA ramp from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x2a), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Tx1 PA ramp in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x2a), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type for the Tx1 PA ramp from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved edge type
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x2a), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection for the PA ramp start in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x2a), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x2a), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 PA ramp trigger end delay in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the value to be written,
 * which is split into three parts for different registers.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x30), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x2f), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x2e), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers.
 *
 * @param device A pointer to the device structure used for hardware
 * communication.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, with `*value`
 * containing the combined 24-bit value from the three registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x30), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x2f), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x2e), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 PA ramp trigger start delay in the ADRV9001 device by
 * writing to specific registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the value to be set,
 * which is split across three registers.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x2d), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x2c), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x2b), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx1 PA ramp trigger start delay value from the device's
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1PaRampPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x2d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x2c), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x2b), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxDpdPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a0), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxDpdPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a0), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxDpdPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a0), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxDpdPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a0), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxDpdPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a0), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxDpdPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a0), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx DPD PED Stop Arm 1 Enable selection in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxDpdPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a0), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxDpdPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a0), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LOL data capture pedestrian enable bit in the ADRV9001 device
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that specifies the state to set for the LOL data
 * capture pedestrian enable bit.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxqecLolDataCaptPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xaf), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LOL data capture enable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxqecLolDataCaptPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xaf), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Tx1 Txqec LOL data capture in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxqecLolDataCaptPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xaf), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxqecLolDataCaptPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xaf), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 Txqec LOL Data Capture Pedge Detect configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxqecLolDataCaptPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xaf), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxqecLolDataCaptPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xaf), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 TxQEC LOL data capture pedestrian mode in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxqecLolDataCaptPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xaf), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx1 Txqec LOL data capture mode value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxqecLolDataCaptPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xaf), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the Tx1 TxQEC LOL data capture in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxqecLolDataCaptPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xaf), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override enable status for the Tx1 Txqec LOL data
 * capture from a specific register.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxqecLolDataCaptPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xaf), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Tx1 Txqec LOL data capture in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxqecLolDataCaptPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xaf), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxqecLolDataCaptPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xaf), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Tx1 TxQEC LOL data capture in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxqecLolDataCaptPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xaf), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxqecLolDataCaptPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xaf), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection configuration for the Tx1 Txqec LOL
 * data capture in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxqecLolDataCaptPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0xaf), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxqecLolDataCaptPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0xaf), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 Txqec LOL Data Capture Ped Trigger End Delay by writing
 * to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer containing the value to be split and
 * written to the registers.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxqecLolDataCaptPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xb5), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xb4), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xb3), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit integer where the retrieved value will be
 * stored.
 * @return Returns the status of the last register read operation, with the
 * combined 24-bit value stored in the location pointed to by value.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxqecLolDataCaptPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xb5), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xb4), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xb3), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx1 Txqec LOL Data Capture Ped Trigger Start Delay by writing
 * to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer representing the value to be written
 * to the registers, which is split into three parts.
 * @return Returns the status of the last register write operation, where a
 * value of 0 indicates success and any non-zero value indicates an
 * error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxqecLolDataCaptPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xb2), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xb1), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0xb0), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero). The retrieved 24-bit value is stored in the
 * location pointed to by the 'value' argument.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxqecLolDataCaptPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xb2), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xb1), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0xb0), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxqecLolPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a1), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxqecLolPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a1), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxqecLolPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a1), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxqecLolPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a1), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `Tx1TxqecLolPedStopArm0EnableSel` field in the ADRV9001
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxqecLolPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a1), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxqecLolPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a1), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxqecLolPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a1), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx1TxqecLolPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a1), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2ClgcRssiCcDataCaptPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x157), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI CC data capture enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2ClgcRssiCcDataCaptPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x157), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Tx2 CLGC RSSI capture in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2ClgcRssiCcDataCaptPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x157), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device context used for hardware interaction.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2ClgcRssiCcDataCaptPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x157), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the device register for the
 * ADRV9001.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2ClgcRssiCcDataCaptPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x157), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2ClgcRssiCcDataCaptPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x157), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `Tx2ClgcRssiCcDataCaptPedMode` configuration in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2ClgcRssiCcDataCaptPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x157), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI CC data capture mode value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2ClgcRssiCcDataCaptPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x157), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the RSSI data capture in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2ClgcRssiCcDataCaptPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x157), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override enable value for the Tx2 Clgc Rssi CC data
 * capture from a specific register.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2ClgcRssiCcDataCaptPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x157), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Tx2 CLGC RSSI CC data capture in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the soft override value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2ClgcRssiCcDataCaptPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x157), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2ClgcRssiCcDataCaptPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x157), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Tx2 CLGC RSSI capture by writing
 * to a specific hardware register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2ClgcRssiCcDataCaptPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x157), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2ClgcRssiCcDataCaptPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x157), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection configuration for the RSSI capture in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2ClgcRssiCcDataCaptPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x157), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2ClgcRssiCcDataCaptPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x157), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 Clgc Rssi CC Data Capture Ped Trigger End Delay by
 * writing to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer containing the value to be split and
 * written to the registers.
 * @return Returns the status of the last write operation, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2ClgcRssiCcDataCaptPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x15d), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x15c), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x15b), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the captured end delay value from the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, with the output value
 * containing the combined results from the three register reads.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2ClgcRssiCcDataCaptPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x15d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x15c), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x15b), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 Clgc Rssi CC Data Capture Ped Trigger Start Delay by
 * writing to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer that contains the value to be written
 * to the registers, with specific bits used for different
 * registers.
 * @return Returns the status of the last register write operation, indicating
 * success (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2ClgcRssiCcDataCaptPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x15a), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x159), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x158), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI capture start delay value from specific registers
 * of the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, with the output value
 * containing the combined results from the three register reads.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2ClgcRssiCcDataCaptPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x15a), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x159), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x158), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `Tx2ClgcRssiCcPedStartArm0EnableSel` field in the ADRV9001
 * device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2ClgcRssiCcPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ba), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2ClgcRssiCcPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ba), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2ClgcRssiCcPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ba), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2ClgcRssiCcPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ba), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2ClgcRssiCcPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ba), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2ClgcRssiCcPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ba), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2ClgcRssiCcPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1ba), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2ClgcRssiCcPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1ba), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the active selection for the DPD (Digital Pre-Distortion) in the
 * Tx2 core of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the DPD active selection register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2DpdActiveSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1c2), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DPD active selection value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved DPD active
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2DpdActiveSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1c2), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DPD data capture pedestal enable value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the DPD data capture pedestal enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2DpdDataCaptPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x149), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DPD data capture enable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2DpdDataCaptPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x149), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Tx2 DPD data capture in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2DpdDataCaptPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x149), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2DpdDataCaptPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x149), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DPD data capture edge detection value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2DpdDataCaptPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x149), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from a device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2DpdDataCaptPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x149), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DPD data capture mode for the Tx2 channel of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the mode to set for DPD
 * data capture.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2DpdDataCaptPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x149), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DPD data capture mode value from a specific register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2DpdDataCaptPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x149), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the Tx2 DPD data capture in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2DpdDataCaptPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x149), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override enable value for the Tx2 DPD data capture
 * from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2DpdDataCaptPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x149), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Tx2 DPD data capture in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the soft override value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2DpdDataCaptPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x149), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value for the Tx2 DPD data capture from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2DpdDataCaptPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x149), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Tx2 DPD data capture in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2DpdDataCaptPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x149), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2DpdDataCaptPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x149), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection configuration for the Tx2 DPD data
 * capture in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2DpdDataCaptPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x149), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2DpdDataCaptPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x149), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the end delay for the DPD data capture trigger in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the value to be written,
 * which is split into three parts for different registers.
 * @return Returns the status of the last write operation, which indicates
 * success (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2DpdDataCaptPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x14f), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x14e), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x14d), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DPD data capture end delay value from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2DpdDataCaptPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x14f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x14e), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x14d), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 DPD data capture trigger start delay in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the delay value to be
 * set.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2DpdDataCaptPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x14c), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x14b), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x14a), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DPD data capture trigger start delay value from the
 * device's registers.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2DpdDataCaptPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x14c), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x14b), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x14a), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable for the Tx2 gain table in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the gain table clock enable register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2GainTableClkEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1e4), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx2 gain table clock enable value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2GainTableClkEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1e4), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 Gain Amplifier RSSI Capture Pedestal Enable value in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2GanAmpRssiCcDataCaptPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x15e), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2GanAmpRssiCcDataCaptPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x15e), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Tx2 gain amplifier RSSI capture
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2GanAmpRssiCcDataCaptPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x15e), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI value from a specific register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved RSSI value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2GanAmpRssiCcDataCaptPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x15e), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 Gain Amplifier RSSI Capture Pedestal End Posedge Detect
 * value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2GanAmpRssiCcDataCaptPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x15e), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI data from a specific register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved RSSI value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2GanAmpRssiCcDataCaptPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x15e), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain amplifier RSSI capture mode for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2GanAmpRssiCcDataCaptPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x15e), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI value from a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved RSSI value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2GanAmpRssiCcDataCaptPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x15e), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the Tx2 Gain Amplifier RSSI Capture
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2GanAmpRssiCcDataCaptPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x15e), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override enable value for the Tx2 Gain Amplifier
 * RSSI capture from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2GanAmpRssiCcDataCaptPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x15e), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Tx2 gain amplifier RSSI capture
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2GanAmpRssiCcDataCaptPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x15e), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2GanAmpRssiCcDataCaptPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x15e), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Tx2 gain amplifier RSSI capture
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2GanAmpRssiCcDataCaptPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x15e), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2GanAmpRssiCcDataCaptPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x15e), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection configuration for the Tx2 gain
 * amplifier RSSI capture.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2GanAmpRssiCcDataCaptPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x15e), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief This function retrieves a specific register value from a device and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure from which the register value
 * will be read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return The function returns an integer status code indicating the success or
 * failure of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2GanAmpRssiCcDataCaptPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x15e), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 Gain Amplifier RSSI Capture Ped Trigger End Delay by
 * writing to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer representing the value to be written
 * to the registers, which is split into three parts.
 * @return Returns the status of the last register write operation, which
 * indicates success (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2GanAmpRssiCcDataCaptPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x164), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x163), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x162), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, with `*value`
 * containing the combined 24-bit value from the three registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2GanAmpRssiCcDataCaptPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x164), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x163), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x162), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 Gain Amplifier RSSI Capture Ped Trigger Start Delay by
 * writing to specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer representing the value to be written
 * to the registers, which is split into three parts.
 * @return Returns the status of the last register write operation, which
 * indicates success (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2GanAmpRssiCcDataCaptPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x161), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x160), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x15f), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI data from the ADRV9001 device by reading multiple
 * registers and combining their values.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 32-bit unsigned integer where the combined
 * register values will be stored.
 * @return Returns the status of the last register read operation, with the
 * combined RSSI data stored in the provided value pointer.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2GanAmpRssiCcDataCaptPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x161), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x160), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x15f), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2GanAmpRssiCcPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1bb), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2GanAmpRssiCcPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1bb), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 Gain Amplifier RSSI Cc Ped Start Arm 1 Enable selection
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2GanAmpRssiCcPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1bb), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2GanAmpRssiCcPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1bb), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 Gain Amplifier RSSI CC Pedestal Stop Arm 0 Enable
 * selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2GanAmpRssiCcPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1bb), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2GanAmpRssiCcPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1bb), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 Gain Amplifier RSSI CC Ped Stop Arm 1 Enable selection in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2GanAmpRssiCcPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1bb), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2GanAmpRssiCcPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1bb), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 interrupt delay 0 capture pedestal enable value in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay0EnableCaptPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x16c), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay0EnableCaptPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x16c), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 interrupt delay configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay0EnableCaptPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x16c), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay0EnableCaptPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x16c), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 interrupt delay 0 capture edge detection configuration in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay0EnableCaptPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x16c), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay0EnableCaptPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x16c), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture pedestal mode for the Tx2 interrupt delay 0 in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay0EnableCaptPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x16c), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay0EnableCaptPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x16c), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 interrupt delay 0 capture pedestrian soft override enable
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay0EnableCaptPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x16c), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay0EnableCaptPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x16c), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Tx2 internal delay capture in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay0EnableCaptPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x16c), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay0EnableCaptPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x16c), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Tx2 interrupt delay 0 capture in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay0EnableCaptPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x16c), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay0EnableCaptPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x16c), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture edge detection configuration for the Tx2 interrupt
 * delay in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay0EnableCaptPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x16c), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay0EnableCaptPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x16c), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 interrupt delay configuration by writing to specific
 * registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer containing the value to be split and
 * written to the registers.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay0EnableCaptPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x172), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x171), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x170), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, where a non-
 * zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay0EnableCaptPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x172), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x171), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x170), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 interrupt delay configuration by writing to specific
 * registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer containing the configuration value to
 * be written to the registers.
 * @return Returns the status of the last write operation, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay0EnableCaptPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x16f), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x16e), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x16d), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, with the
 * retrieved 24-bit value stored in the location pointed to by the
 * 'value' parameter.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay0EnableCaptPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x16f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x16e), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x16d), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 interrupt delay for the ADRV9001 device by writing a
 * specified value to a specific register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay0PedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1bd), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay0PedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1bd), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 interrupt delay for the ADRV9001 device by writing a
 * specified value to a specific register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay0PedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1bd), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay0PedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1bd), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 interrupt delay configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay0PedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1bd), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay0PedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1bd), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 interrupt delay configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay0PedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1bd), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay0PedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1bd), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture pedestal enable for the Tx2 internal delay 1 in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay1EnableCaptPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x173), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay1EnableCaptPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x173), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 interrupt delay configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay1EnableCaptPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x173), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay1EnableCaptPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x173), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 interrupt delay 1 capture edge detection value in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the capture edge detection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay1EnableCaptPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x173), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay1EnableCaptPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x173), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture pedestal mode for the Tx2 internal delay 1 in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay1EnableCaptPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x173), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay1EnableCaptPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x173), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 internal delay capture and soft override enable
 * configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay1EnableCaptPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x173), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay1EnableCaptPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x173), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Tx2 internal delay capture in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay1EnableCaptPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x173), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay1EnableCaptPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x173), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 interrupt delay configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay1EnableCaptPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x173), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay1EnableCaptPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x173), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 interrupt delay 1 capture negative edge detection
 * configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay1EnableCaptPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x173), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay1EnableCaptPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x173), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 interrupt delay configuration by writing to specific
 * registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer containing the value to be split and
 * written to the registers.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay1EnableCaptPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x179), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x178), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x177), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit integer where the retrieved value will be
 * stored.
 * @return Returns the status of the last register read operation, with `*value`
 * containing the combined 24-bit value from the three registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay1EnableCaptPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x179), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x178), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x177), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 interrupt delay configuration by writing to specific
 * registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer containing the value to be split and
 * written to the registers.
 * @return Returns the status of the last register write operation, where a
 * value of 0 indicates success and any non-zero value indicates an
 * error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay1EnableCaptPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x176), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x175), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x174), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device context from which the registers will
 * be read.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, where a
 * status of 0 indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay1EnableCaptPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x176), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x175), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x174), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 interrupt delay 1 pedestrian start arm 0 enable selection
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay1PedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1be), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay1PedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1be), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 interrupt delay for the ADRV9001 device by writing a
 * specified value to a specific register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay1PedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1be), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay1PedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1be), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 interrupt delay 1 pedestrian stop arm 0 enable selection
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay1PedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1be), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay1PedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1be), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 interrupt delay configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay1PedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1be), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntDelay1PedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1be), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx Enable Capture Preamble Enable register for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that specifies the enable/disable state for the
 * Tx capture preamble.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntTxEnableCaptPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x165), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntTxEnableCaptPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x165), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Tx2 interrupt capture in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntTxEnableCaptPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x165), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntTxEnableCaptPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x165), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx Enable Capture Peddle End Posedge Detect configuration in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntTxEnableCaptPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x165), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntTxEnableCaptPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x165), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the capture mode for the Tx2 interrupt in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntTxEnableCaptPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x165), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntTxEnableCaptPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x165), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 interrupt transmission enable capture pedestal soft
 * override enable in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntTxEnableCaptPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x165), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntTxEnableCaptPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x165), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Tx2 interrupt transmission enable
 * capture in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the soft override value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntTxEnableCaptPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x165), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx Enable Capture Pedestal Soft Override value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntTxEnableCaptPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x165), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Tx2 interrupt capture in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntTxEnableCaptPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x165), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntTxEnableCaptPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x165), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection for the Tx enable capture in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntTxEnableCaptPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x165), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntTxEnableCaptPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x165), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 interrupt trigger end delay by writing to specific
 * registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer that contains the value to be split
 * and written to the registers.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntTxEnableCaptPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x16b), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x16a), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x169), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, where a zero
 * indicates success and a non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntTxEnableCaptPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x16b), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x16a), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x169), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 interrupt trigger start delay by writing to specific
 * registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer representing the value to be written,
 * which is split across three registers.
 * @return Returns the status of the last write operation, which indicates
 * success (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntTxEnableCaptPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x168), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x167), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x166), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit integer where the retrieved value will be
 * stored.
 * @return Returns the status of the last register read operation, with the
 * combined 24-bit value stored in the location pointed to by the value
 * parameter.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntTxEnableCaptPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x168), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x167), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x166), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 interrupt transmission pedal start arm 0 enable selection
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntTxPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1bc), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntTxPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1bc), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntTxPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1bc), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntTxPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1bc), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 interrupt transmission pedestrian stop arm 0 enable
 * selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntTxPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1bc), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntTxPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1bc), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 interrupt transmission pedestrian stop arm 1 enable
 * selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntTxPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1bc), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2IntTxPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1bc), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock divider value for the PA ramp in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 16-bit unsigned integer representing the clock divider value
 * to be set.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampClkDivValue_Set(void *device,
    uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1a), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x19), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx2 PA ramp clock divider value from the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved clock
 * divider value will be stored.
 * @return Returns the status of the read operations, with *value containing the
 * combined clock divider value from two registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampClkDivValue_Get(void *device,
    uint16_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1a), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x19), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PA ramp clock enable field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the PA ramp clock enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampClkEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x18), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PA ramp clock enable status from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved PA ramp
 * clock enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampClkEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x18), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the delayed enable start selection for the Tx2 PA ramp in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampDelayedEnableStartSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x18), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the delayed enable start selection value from a specific
 * register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampDelayedEnableStartSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x18), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the delayed enable stop selection for the Tx2 PA ramp in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampDelayedEnableStopSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1c), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampDelayedEnableStopSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1c), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 PA ramp delayed enable start selection in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampDelayedEnableTx2EnableStartSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x18), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure used for hardware
 * communication.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampDelayedEnableTx2EnableStartSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x18), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 PA ramp delayed enable and stop selection in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampDelayedEnableTx2EnableStopSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1c), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampDelayedEnableTx2EnableStopSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1c), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PA ramp enable configuration for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the PA ramp enable value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x18), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PA ramp enable status from a specific register in the
 * device.
 *
 * @param device A pointer to the device structure used to access hardware
 * registers.
 * @param value A pointer to a uint8_t variable where the retrieved PA ramp
 * enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x18), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO mask for the PA ramp enable in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the GPIO mask.
 * @return Returns an integer status code indicating the success or failure of
 * the GPIO mask setting operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampEnableGpioMask_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1c), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO mask for the Tx2 PA ramp enable from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO mask
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampEnableGpioMask_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1c), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GPIO selection for the PA ramp enable in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the GPIO selection value
 * to be set.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampEnableGpioSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x18), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GPIO selection value for the Tx2 PA ramp enable from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved GPIO
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampEnableGpioSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x18), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PA ramp enable bit in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the PA ramp enable bit.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x31), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PA ramp pedal enable value from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x31), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Tx2 PA ramp in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x31), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x31), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 PA ramp edge detection value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x31), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the Tx2 PA ramp
 * and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x31), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PA ramp in ped mode for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * PA ramp.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x31), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PA ramp mode value from a specific register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved PA ramp
 * mode value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x31), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the Tx2 PA ramp in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A uint8_t value that indicates the soft override enable state to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x31), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override enable value for the Tx2 PA ramp from a
 * specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x31), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Tx2 PA ramp in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the soft override value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x31), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value for the Tx2 PA ramp from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x31), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Tx2 PA ramp in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x31), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the generated edge type for the Tx2 PA ramp from a specific
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved edge type
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x31), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection for the Tx2 PA ramp start in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x31), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x31), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 PA ramp trigger end delay in the ADRV9001 device by
 * writing to specific registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the value to be set,
 * which is split across three registers.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x37), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x36), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x35), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx2 PA ramp trigger end delay value from the device's
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x37), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x36), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x35), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 PA ramp trigger start delay in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A 32-bit unsigned integer representing the delay value to be
 * set.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x34), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x33), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x32), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, with the
 * output value containing the combined 24-bit value from the three
 * registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2PaRampPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x34), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x33), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x32), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxDpdPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b8), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxDpdPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b8), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxDpdPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b8), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxDpdPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b8), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxDpdPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b8), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxDpdPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b8), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable selection for the Tx2 Tx DPD PED stop arm in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxDpdPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b8), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxDpdPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b8), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LOL data capture pedestrian enable bit in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the LOL data capture pedestrian enable bit.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxqecLolDataCaptPedEn_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x150), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxqecLolDataCaptPedEn_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x150), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Tx2Txqec LOL data capture in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxqecLolDataCaptPedEndGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x150), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxqecLolDataCaptPedEndGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x150), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 Txqec LOL data capture edge detection value in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxqecLolDataCaptPedEndPosedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x150), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided variable.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxqecLolDataCaptPedEndPosedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x150), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2 TxQEC LOL data capture mode in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the mode to be set for
 * the Tx2 TxQEC LOL data capture.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxqecLolDataCaptPedMode_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x150), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxqecLolDataCaptPedMode_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x150), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override enable for the Tx2Txqec LOL data capture in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxqecLolDataCaptPedSoftOverrideEnable_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x150), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override enable status for the Tx2Txqec LOL data
 * capture from a specific register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved status will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxqecLolDataCaptPedSoftOverrideEnable_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x150), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the soft override value for the Tx2Txqec LOL data capture in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the soft override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxqecLolDataCaptPedSoftOverrideValue_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x150), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the soft override value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved soft
 * override value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxqecLolDataCaptPedSoftOverrideValue_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x150), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the generated edge type for the Tx2Txqec LOL data capture in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the edge type to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxqecLolDataCaptPedStartGeneratedEdgeType_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x150), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device from which the register value is read.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxqecLolDataCaptPedStartGeneratedEdgeType_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x150), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the negative edge detection configuration for the Tx2 TxQEC LOL
 * data capture in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxqecLolDataCaptPedStartNegedgeDetect_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x150), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used to access the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxqecLolDataCaptPedStartNegedgeDetect_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x150), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2Txqec Lol Data Capture Ped Trigger End Delay by writing to
 * specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer containing the value to be written to
 * the registers, which is split into three parts.
 * @return Returns the status of the last register write operation, indicating
 * success (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxqecLolDataCaptPedTrigEndDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x156), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x155), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x154), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit integer where the retrieved value will be
 * stored.
 * @return Returns the status of the last register read operation, with `*value`
 * containing the combined 24-bit value from the three registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxqecLolDataCaptPedTrigEndDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x156), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x155), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x154), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx2Txqec LOL data capture trigger start delay by writing to
 * specific registers.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param value A 32-bit unsigned integer containing the value to be split and
 * written to the registers.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxqecLolDataCaptPedTrigStartDelay_Set(void *device,
    uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x153), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x152), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (0x400 + 0x151), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive hardware registers.
 *
 * @param device A pointer to the device context used for hardware register
 * access.
 * @param value A pointer to a 32-bit integer where the retrieved value will be
 * stored.
 * @return Returns the status of the last read operation, with the output
 * variable containing the combined 24-bit value from the three
 * registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxqecLolDataCaptPedTrigStartDelay_Get(void *device,
    uint32_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x153), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x152), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (0x400 + 0x151), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxqecLolPedStartArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b9), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxqecLolPedStartArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b9), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 device register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxqecLolPedStartArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b9), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxqecLolPedStartArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b9), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value for the Tx2Txqec LOL Ped Stop Arm0 Enable selection in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the Tx2Txqec LOL Ped Stop Arm0 Enable selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxqecLolPedStopArm0EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b9), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxqecLolPedStopArm0EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b9), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxqecLolPedStopArm1EnableSel_Set(void *device,
    uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (0x400 + 0x1b9), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided variable.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapCore2_Tx2TxqecLolPedStopArm1EnableSel_Get(void *device,
    uint8_t *value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (0x400 + 0x1b9), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


#endif // __ADRV9001_BF_NVS_REGMAP_CORE_2_H__