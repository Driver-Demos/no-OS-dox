/**
 * \file
 * \brief BitField accessors for vco_adc_mem_map
 *
 * Autogenerated with yoda-gen 1.2.0. Do not modify
 *
 * \copyright Copyright (c) 2020 Analog Devices, Inc. All Rights Reserved.
 * This software is proprietary to Analog Devices, Inc. and its licensors.
 */

 #ifndef __ADRV9001_BF_VCO_ADC_MEM_MAP_H__
 #define __ADRV9001_BF_VCO_ADC_MEM_MAP_H__

#include "adrv9001_bf_hal.h"

/***************************************************************************//**
 * @brief The `adrv9001_BfVcoAdcMemMap_e` is an enumeration that defines memory
 * map addresses for specific ADC low power modes in the ADRV9001 device.
 * It includes two members, each corresponding to a different ADC channel
 * (RX1 and RX2), and assigns them specific hexadecimal values that
 * represent their respective memory map addresses. This enumeration is
 * used to facilitate access to these specific ADC configurations within
 * the device's memory map.
 *
 * @param ADRV9001_BF_RX1_ADC_LP Represents the memory map address for RX1 ADC
 * low power mode.
 * @param ADRV9001_BF_RX2_ADC_LP Represents the memory map address for RX2 ADC
 * low power mode.
 ******************************************************************************/
typedef enum adrv9001_BfVcoAdcMemMap_e
{
    ADRV9001_BF_RX1_ADC_LP    =   0x3c00,
    ADRV9001_BF_RX2_ADC_LP    =   0x3e00
} adrv9001_BfVcoAdcMemMap_e;

/***************************************************************************//**
 * @brief The `vcoAdcMemMapInstances` is a static constant array of type
 * `adrv9001_BfVcoAdcMemMap_e`, which is an enumeration representing
 * specific memory map instances for VCO ADCs. It contains two elements:
 * `ADRV9001_BF_RX1_ADC_LP` and `ADRV9001_BF_RX2_ADC_LP`, which are
 * associated with specific memory addresses for ADC low-pass filters in
 * the ADRV9001 device.
 *
 * @details This array is used to reference specific VCO ADC memory map
 * instances for operations such as reading or writing ADC-related data
 * in the ADRV9001 device.
 ******************************************************************************/
static const adrv9001_BfVcoAdcMemMap_e vcoAdcMemMapInstances[] = {
    ADRV9001_BF_RX1_ADC_LP,
    ADRV9001_BF_RX2_ADC_LP
};


/***************************************************************************//**
 * @brief Retrieves the accumulated data from the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific VCO ADC instance.
 * @param value A pointer to a uint16_t where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating success or failure of the
 * operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_Acc0Data_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x131), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x12f), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the accumulated data from the VCO ADC's Acc1 register.
 *
 * @param device A pointer to the device context, which is used for hardware
 * access.
 * @param instance An enumerated type indicating which ADC instance to access.
 * @param value A pointer to a uint16_t where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operations, and the accumulated ADC data is stored in the
 * provided `value` pointer.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_Acc1Data_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x131), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x130), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration center value for the VCO ADC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC
 * instance.
 * @param value A 16-bit unsigned integer representing the calibration center
 * value to be set.
 * @return Returns an integer status code indicating success (0) or an error
 * code.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_Bcalcenter_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x14), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x13), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration center value from the VCO ADC memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint16_t` where the retrieved calibration center
 * value will be stored.
 * @return Returns the status of the read operation, with the calibration center
 * value stored in the provided `value` pointer.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_Bcalcenter_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x14), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x13), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bcap adjustment value in the VCO ADC memory map.
 *
 * @param device A pointer to the device structure that represents the VCO ADC.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the bcap adjustment.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_Bcap_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `bcap` adjustment from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` where the retrieved `bcap` value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_Bcap_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the accumulation count value for the bcenter calibration.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A uint8_t value representing the number of samples to accumulate
 * for bcenter calibration.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_BcenterAccCntVal_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x122), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the accumulated count value for the Bcenter calibration from
 * the VCO ADC memory map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved count
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_BcenterAccCntVal_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x122), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the adaptation decrease value for the VCO ADC's bcenter
 * calibration.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value A uint8_t value that indicates the decrease adaptation setting.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_BcenterAdaptDecrease_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x122), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `BcenterAdaptDecrease` setting from the VCO
 * ADC memory map.
 *
 * @param device A pointer to the device context used for communication.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_BcenterAdaptDecrease_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x122), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the adaptation factor for the VCO ADC's center frequency.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC
 * instance.
 * @param value A uint8_t value that indicates the adaptation factor to be set.
 * @return Returns an integer status code indicating success or failure of the
 * operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_BcenterAdaptIncrease_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x122), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the adaptation increase value for the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_BcenterAdaptIncrease_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x122), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the adaptation steps for the VCO ADC's center frequency.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific VCO ADC memory map
 * instance.
 * @param value An 8-bit unsigned integer representing the number of adaptation
 * steps to set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_BcenterAdaptSteps_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x122), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the adaptation steps setting for the VCO ADC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific VCO ADC instance.
 * @param value A pointer to a uint8_t where the retrieved adaptation steps
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_BcenterAdaptSteps_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x122), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable state for the bcenter calibration.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A uint8_t value indicating whether to enable (1) or disable (0)
 * the bcenter calibration.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_BcenterCalEn_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x123), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the 'Bcenter Calibration Enable' bit from the
 * VCO ADC memory map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_BcenterCalEn_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x123), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the initial value for the bcenter calibration in the VCO ADC
 * memory map.
 *
 * @param device A pointer to the device context, which is used for hardware
 * access.
 * @param instance An enumerated type indicating the specific instance of the
 * VCO ADC memory map.
 * @param value A 16-bit unsigned integer representing the initial bcenter value
 * to be set.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_BcenterInitVal_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x121), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x120), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the initial value for the bcenter calibration from the VCO
 * ADC memory map.
 *
 * @param device A pointer to the device context, which is used for hardware
 * access.
 * @param instance An enumerated type indicating the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint16_t` where the retrieved initial bcenter
 * value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_BcenterInitVal_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x121), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x120), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the scale shift value for the VCO ADC's adaptation coefficient.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value An 8-bit unsigned integer representing the scale shift value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_BcenterScaleShift_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x121), (value >> 0), 0xe0, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the scale shift value for the VCO ADC's adaptation
 * coefficient.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value A pointer to a uint8_t where the retrieved scale shift value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_BcenterScaleShift_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x121), &register_value, 0xe0, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the initial value for the bcenter start calibration.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific VCO ADC memory map
 * instance.
 * @param value A uint8_t value to set as the initial bcenter start value.
 * @return Returns an integer status code indicating success or failure of the
 * operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_BcenterStartInitVal_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x122), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the initial value for the bcenter setting from the VCO ADC
 * memory map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map to access.
 * @param value A pointer to a `uint8_t` where the retrieved initial bcenter
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_BcenterStartInitVal_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x122), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the center value of the VCO ADC from the specified memory
 * map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map to access.
 * @param value A pointer to a `uint16_t` where the retrieved center value will
 * be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_BcenterValue_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x133), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x132), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the bdither DAC1 in the VCO ADC memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the bdither DAC1.
 * @return Returns an integer status code indicating the result of the write
 * operation, where 0 indicates success and any non-zero value indicates
 * an error.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_Bdithdac1_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x8), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the bdith DAC1 from the specified device
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_Bdithdac1_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x8), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the bdith DAC2 register in the VCO ADC memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map to access.
 * @param value The 8-bit value to be written to the bdith DAC2 register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_Bdithdac2_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x9), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the bdithdac2 register from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_Bdithdac2_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x9), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `bgain` adjustment value in the VCO ADC memory map.
 *
 * @param device A pointer to the device context used for communication.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value An 8-bit unsigned integer representing the gain adjustment value
 * to be set.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_Bgain_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the `bgain` adjustment value from the VCO ADC memory map.
 *
 * @param device A pointer to the device context used for communication.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` where the retrieved `bgain` value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_Bgain_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Disables the low-pass filter for the VCO ADC bias to enable faster
 * startup from power down.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value of type `adrv9001_BfVcoAdcMemMap_e` that
 * specifies which instance of the VCO ADC memory map to modify.
 * @param value A `uint8_t` value that indicates whether to disable (1) or
 * enable (0) the low-pass filter.
 * @return Returns an `int32_t` status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_BiasDisLpf_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias disable low-pass filter value from the VCO ADC
 * memory map.
 *
 * @param device A pointer to the device context, which is used for hardware
 * access.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_BiasDisLpf_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the VCO ADC bias current for a specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit unsigned integer representing the bias current value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_Bvtiamp1_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xe), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the VCO ADC bias current setting.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value that specifies which instance of the VCO
 * ADC memory map to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_Bvtiamp1_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xe), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the VCO ADC current for the second VTI amplifier.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit unsigned integer representing the current value to set
 * for the VTI amplifier.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_Bvtiamp2_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xf), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the VCO ADC bias current setting from the
 * specified device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value that specifies which instance of the VCO
 * ADC memory map to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_Bvtiamp2_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xf), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the VTI input common mode level for the VCO ADC.
 *
 * @param device A pointer to the device structure that represents the VCO ADC.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit unsigned integer representing the common mode level to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_Bvtiampcm_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xd), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the common mode level for the VTI amplifier from the
 * specified device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved common
 * mode level will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_Bvtiampcm_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xd), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the VCO ADC mirror current for a specified instance.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * mirror current.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_Bvtiamps_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x10), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the mirror current value for the VCO ADC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC
 * instance.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_Bvtiamps_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x10), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the VCO ADC center value in the memory map.
 *
 * @param device A pointer to the device structure that represents the VCO ADC.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A 16-bit unsigned integer representing the center value to be
 * set.
 * @return Returns an integer status code indicating success (0) or an error
 * code.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_Bvticenter_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xb), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xa), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the VCO ADC center value from the memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC
 * instance.
 * @param value A pointer to a `uint16_t` where the retrieved center value will
 * be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation, and the retrieved center value is stored in the
 * provided pointer.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_Bvticenter_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xb), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xa), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the VCO ADC shift current value in the memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value A 16-bit unsigned integer representing the shift current value
 * to be set.
 * @return Returns an integer status code indicating success (0) or an error
 * code.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_Bvtishift_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x11), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the VCO ADC bias current shift value from the specified
 * memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint16_t` where the retrieved shift value will
 * be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operations.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_Bvtishift_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x11), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration duty cycle for the VCO ADC.
 *
 * @param device A pointer to the device structure that represents the VCO ADC.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map to modify.
 * @param value An 8-bit unsigned integer representing the calibration duty
 * cycle value to set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_CalDutyCycle_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x121), (value >> 0), 0x1c, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration duty cycle value for the VCO ADC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC
 * instance.
 * @param value A pointer to a `uint8_t` where the retrieved duty cycle value
 * will be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_CalDutyCycle_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x121), &register_value, 0x1c, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration force value for the VCO ADC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC
 * instance.
 * @param value A uint8_t value to set the calibration force.
 * @return Returns an integer status code indicating success or failure of the
 * operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_CalForce_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x14), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the forced calibration value for the VCO ADC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC
 * instance.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_CalForce_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x14), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration frequency control mode for the VCO ADC.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A uint8_t value that specifies the calibration frequency control
 * mode.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_CalFreqControl_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x123), (value >> 0), 0x18, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration frequency control setting from the VCO ADC
 * memory map.
 *
 * @param device A pointer to the device context used for accessing the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` where the retrieved calibration
 * frequency control value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_CalFreqControl_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x123), &register_value, 0x18, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration reset state for the VCO ADC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC
 * instance.
 * @param value A uint8_t value that sets the calibration reset state, where a
 * non-zero value activates the reset.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_CalRst_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration reset status of the VCO ADC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating the specific VCO ADC instance.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_CalRst_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration sequence load mode for the VCO ADC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC
 * instance.
 * @param value A uint8_t value to set the calibration sequence load mode.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_CalRz_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x15), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration sequence load mode for the VCO ADC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC
 * instance.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_CalRz_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x15), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration DAC shift clock divide rate.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit unsigned integer representing the clock shift value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_Clkshift_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x15), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock shift value from the VCO ADC memory map.
 *
 * @param device A pointer to the device context used for communication.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` where the retrieved clock shift value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_Clkshift_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x15), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DAC value for kgain adjustment in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value An 8-bit unsigned integer representing the DAC value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_DacvalKgain_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x128), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DAC value for kgain from the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value A pointer to a uint8_t where the retrieved DAC value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_DacvalKgain_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x128), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the digital calibration reset for the VCO ADC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC
 * instance.
 * @param value A uint8_t value that indicates the reset state (active high).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_DigCalRst_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x123), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the digital calibration reset status for the VCO ADC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC
 * instance.
 * @param value A pointer to a uint8_t where the read value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_DigCalRst_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x123), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the disable bias amplifier configuration for the VCO ADC.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value indicating which instance of the VCO ADC
 * memory map to configure.
 * @param value A uint8_t value that specifies whether to disable (1) or enable
 * (0) the bias amplifier.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_DisBiasAmp_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the disabled bias amplifier status from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context used for communication.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_DisBiasAmp_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the disable over-range correction (ORC) value for the VCO ADC.
 *
 * @param device A pointer to the device structure representing the VCO ADC.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A uint8_t value indicating whether to enable (1) or disable (0)
 * the over-range correction.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_DisOrc_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the disabled over-range correction (ORC) status from the VCO
 * ADC memory map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map to access.
 * @param value A pointer to a `uint8_t` where the retrieved ORC status will be
 * stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_DisOrc_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the dither auto disable feature for the VCO ADC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC
 * instance.
 * @param value A uint8_t value indicating whether to enable (1) or disable (0)
 * the dither auto feature.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_DithDisAuto_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x7), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the dither disable auto setting from the VCO ADC memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved dither
 * disable auto value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_DithDisAuto_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x7), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the dither clock divide value in the VCO ADC memory map.
 *
 * @param device A pointer to the device structure that represents the VCO ADC.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit unsigned integer representing the dither clock divide
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_DithDiv_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x7), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the dither clock divide value from the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value A pointer to a `uint8_t` where the retrieved dither clock divide
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_DithDiv_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x7), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the dither mode for the VCO ADC memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit unsigned integer representing the dither mode to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_DithMode_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x7), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the dither mode setting from the VCO ADC memory map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved dither
 * mode value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_DithMode_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x7), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reset state of the dither clock generator for the VCO ADC.
 *
 * @param device A pointer to the device context that is used for hardware
 * access.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A uint8_t value that indicates the reset state to be set (active
 * high).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_DithRstClkgen_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reset state of the dither clock generator for the VCO
 * ADC.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_DithRstClkgen_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reset state of the dither DAC in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A uint8_t value indicating the reset state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_DithRstDac_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reset state of the dither DAC for a specified VCO ADC
 * instance.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value representing the specific VCO ADC
 * instance to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved dither DAC
 * reset state will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_DithRstDac_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reset state of the dither LFSR in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A uint8_t value indicating the reset state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_DithRstLfsr_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reset state of the dither LFSR for the VCO ADC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_DithRstLfsr_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the status of the VCO ADC's center calibration completion.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` where the result of the read operation
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_DoneBcenterCal_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x122), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the status of the kgain calibration completion from the VCO
 * ADC memory map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` variable where the result of the read
 * operation will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_DoneKgainCal_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x128), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the status of the ramp calibration process for the VCO ADC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value A pointer to a `uint8_t` where the result of the read operation
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_DoneRampCal_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x129), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable state for additional two signal channels in the VCO
 * ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A uint8_t value indicating the enable state (1 to enable, 0 to
 * disable).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_En34_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the VCO ADC memory map for a specified
 * instance.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which VCO ADC memory map
 * instance to access.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_En34_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC clock enable state for channel I.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A uint8_t value that indicates whether to enable (1) or disable
 * (0) the ADC clock.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_EnAdcclkI_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC clock enable status for channel I from the VCO ADC
 * memory map.
 *
 * @param device A pointer to the device structure representing the VCO ADC.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved ADC clock
 * enable status will be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_EnAdcclkI_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC clock for channel Q in the VCO ADC memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A uint8_t value that indicates whether to enable (non-zero) or
 * disable (zero) the ADC clock for channel Q.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_EnAdcclkQ_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ADC clock enable status for channel Q from the VCO ADC
 * memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved ADC clock
 * enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_EnAdcclkQ_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bias enable state for the ADC in the VCO memory map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map is being accessed.
 * @param value A uint8_t value that indicates whether to enable (1) or disable
 * (0) the bias.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_EnBias_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bias enable status for the VCO ADC.
 *
 * @param device A pointer to the device structure that represents the VCO ADC.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved bias
 * enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_EnBias_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration analog blocks for the VCO ADC.
 *
 * @param device A pointer to the device structure that represents the VCO ADC.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map to modify.
 * @param value A uint8_t value that indicates whether to enable or disable the
 * calibration analog blocks.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_EnCalAna_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration analog enable status from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device structure representing the VCO ADC.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_EnCalAna_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration clock enable bit in the VCO ADC memory map.
 *
 * @param device A pointer to the device structure that represents the VCO ADC.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A uint8_t value that indicates whether to enable (1) or disable
 * (0) the calibration clock.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_EnCalClk_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration clock enable status from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_EnCalClk_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable state for the VTI channel in the VCO ADC memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A uint8_t value that indicates whether to enable (1) or disable
 * (0) the VTI channel.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_EnVtiI_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the VCO ADC memory map for the specified
 * instance.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_EnVtiI_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the enable state for the VTI Q channel in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A uint8_t value indicating the enable state (1 to enable, 0 to
 * disable).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_EnVtiQ_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the VCO ADC memory map for the VTI Q channel.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_EnVtiQ_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Enables or disables the clock for the VCO ADC digital circuitry.
 *
 * @param device A pointer to the device structure that represents the VCO ADC.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A uint8_t value where 1 enables the clock and 0 disables it.
 * @return Returns an integer status code indicating the success or failure of
 * the clock enable operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_EnableClock_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x123), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the current state of the clock enable for the VCO ADC
 * digital.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value A pointer to a `uint8_t` where the retrieved clock enable value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_EnableClock_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x123), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DAC level for the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value An 8-bit unsigned integer representing the DAC level to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_ForceDacLevel_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x12d), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the forced DAC level from the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value A pointer to a `uint8_t` where the retrieved DAC level will be
 * stored.
 * @return Returns the status of the read operation, with `*value` containing
 * the forced DAC level.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_ForceDacLevel_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x12d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DAC level enable for the VCO ADC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC
 * instance.
 * @param value A uint8_t value indicating whether to enable (1) or disable (0)
 * the DAC level.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_ForceDacLevelEn_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12e), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the forced DAC level enable status from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_ForceDacLevelEn_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12e), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the over-range correction method for the VCO ADC.
 *
 * @param device A pointer to the device structure that represents the VCO ADC.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A uint8_t value that indicates whether to enable or disable the
 * over-range correction.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_ForceOrc1_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the over-range correction method 1 from the VCO
 * ADC memory map.
 *
 * @param device A pointer to the device structure that represents the VCO ADC.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_ForceOrc1_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the over-range correction method 2 for the VCO ADC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC
 * instance.
 * @param value A uint8_t value to set the over-range correction.
 * @return Returns an integer status code indicating success or failure of the
 * write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_ForceOrc2_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the forced over-range correction value from the VCO ADC
 * memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_ForceOrc2_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain value for the `gain_bcenter` parameter in the VCO ADC
 * memory map.
 *
 * @param device A pointer to the device context, which is used for hardware
 * access.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit unsigned integer representing the gain value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_GainBcenter_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x126), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain value for the `GainBcenter` setting from the VCO
 * ADC memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved gain value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_GainBcenter_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x126), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain value for the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value A 32-bit unsigned integer representing the gain value to be set.
 * @return Returns the status of the last operation, indicating success (0) or
 * an error code.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_GainValue_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x136), (value >> 16), 0x1f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x135), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x134), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain value from the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific VCO ADC instance.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved gain
 * value will be stored.
 * @return Returns the status of the read operations, with *value containing the
 * retrieved gain value.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_GainValue_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x136), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x135), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x134), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain value register map enable for the VCO ADC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC
 * instance.
 * @param value A uint8_t value indicating whether to enable (1) or disable (0)
 * the gain value register map.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_GainValueRegmapEn_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12e), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain value from the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating the specific VCO ADC memory map
 * instance.
 * @param value A pointer to a `uint8_t` where the retrieved gain value will be
 * stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_GainValueRegmapEn_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12e), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the accumulation count value for kgain calibration in the VCO ADC
 * memory map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A uint8_t value representing the number of samples to accumulate
 * for kgain calibration.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_KgainAccCntVal_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x128), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the accumulated count value for kgain calibration from the
 * VCO ADC memory map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved count
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_KgainAccCntVal_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x128), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the K-gain calibration enable bit in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A uint8_t value to enable or disable the K-gain calibration.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_KgainCalEn_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x123), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the status of the Kgain calibration enable bit from the VCO
 * ADC memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_KgainCalEn_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x123), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the kgain value for the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific VCO ADC memory map
 * instance.
 * @param value A 32-bit unsigned integer representing the kgain value to be
 * set.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_KgainVal_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12c), (value >> 16), 0x3f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x12b), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x12a), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the `kgain` value from the VCO ADC memory map.
 *
 * @param device A pointer to the device structure representing the VCO ADC.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint32_t` where the retrieved `kgain` value will
 * be stored.
 * @return Returns the status of the read operations, with the `kgain` value
 * stored in the provided pointer.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_KgainVal_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12c), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x12b), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x12a), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets LUT data for the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating the specific VCO ADC memory map
 * instance.
 * @param regInstance An index for the specific register within the LUT.
 * @param value The 8-bit value to be written to the LUT.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_LutData_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint32_t regInstance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x20 + 0x0 + (regInstance * 0x1)), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves LUT data from the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating the specific VCO ADC memory map
 * instance.
 * @param regInstance An index for the specific register instance to read from.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_LutData_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint32_t regInstance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x20 + 0x0 + (regInstance * 0x1)), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LUT clock gate enable state for the VCO ADC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value A uint8_t value indicating the desired state of the clock gate
 * (1 to enable, 0 to disable).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_LutEnClkgate_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock gate enable status for the LUT in the VCO ADC
 * memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_LutEnClkgate_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LUT load edge for the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value A uint8_t value representing the load edge setting.
 * @return Returns an integer status code indicating success or failure of the
 * operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_LutLoadedge_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LUT load edge value from the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_LutLoadedge_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the status of LUT register access validity for the VCO ADC.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value A pointer to a `uint8_t` where the result of the register read
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_LutRegmapAccessInvalid_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x137), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reset state of the LUT in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A uint8_t value indicating the reset state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_LutRst_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reset state of the LUT for the VCO ADC memory map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved reset
 * state will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_LutRst_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the matrix data enable state for the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value A uint8_t value indicating the enable state (0 or 1).
 * @return Returns an integer status code indicating success or failure of the
 * operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_MatrixDataEn_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x137), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the status of the matrix data enable bit for the VCO ADC
 * memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value A pointer to a `uint8_t` where the read value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_MatrixDataEn_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x137), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output control for the VCO ADC memory map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A uint8_t value that specifies the output control settings.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_OutCtrl_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x137), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the output control settings from the VCO ADC memory map.
 *
 * @param device A pointer to the device structure representing the VCO ADC.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved output
 * control value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_OutCtrl_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x137), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output disable demultiplexer configuration for the VCO ADC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC
 * instance.
 * @param value A uint8_t value indicating the disable state for the demux
 * output.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_OutDisDemux_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the output disable demultiplexer status from the VCO ADC
 * memory map.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_OutDisDemux_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the over-range disable state for the VCO ADC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC
 * instance.
 * @param value A uint8_t value indicating the desired over-range disable state
 * (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_OvrDis_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x15), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the over-range disable status from the VCO ADC memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` where the retrieved over-range disable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_OvrDis_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x15), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the over-range reset state for the VCO ADC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC
 * instance.
 * @param value A uint8_t value indicating the reset state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_OvrRst_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the over-range reset status from the VCO ADC memory map.
 *
 * @param device A pointer to the device context used for communication.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value A pointer to a `uint8_t` where the retrieved over-range reset
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_OvrRst_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the number of wait cycles for power-up in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit unsigned integer representing the number of wait
 * cycles.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_PwrupWaitClk_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x129), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power-up wait clock configuration for the VCO ADC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC
 * instance.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_PwrupWaitClk_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x129), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ramp accumulation count value in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit unsigned integer representing the ramp accumulation
 * count value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_RampAccCntVal_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x129), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ramp accumulation count value from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context used for communication.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved ramp
 * accumulation count value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_RampAccCntVal_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x129), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ramp calibration enable bit in the VCO ADC memory map.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A uint8_t value that indicates whether to enable (1) or disable
 * (0) the ramp calibration.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_RampCalEn_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x123), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ramp calibration enable status from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context used for communication.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_RampCalEn_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x123), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration DAC bit shift value for the VCO ADC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value A uint8_t value representing the shift amount for the
 * calibration DAC.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_Regshift_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x15), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration DAC bit shift value from the specified VCO
 * ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value A pointer to a `uint8_t` where the retrieved shift value will be
 * stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_Regshift_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x15), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reset calibration state for the VCO ADC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC
 * instance.
 * @param value A uint8_t value indicating the reset state (active high).
 * @return Returns an integer status code indicating success or failure of the
 * operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_RstCal_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x15), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reset calibration status from the VCO ADC memory map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration reset status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_RstCal_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x15), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ADC reset mode for the specified VCO ADC instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific VCO ADC
 * instance.
 * @param value A uint8_t value that determines the reset mode to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SelRst_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reset selection status of the VCO ADC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific VCO ADC instance.
 * @param value A pointer to a uint8_t where the retrieved reset selection value
 * will be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SelRst_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the short selection for the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating the specific VCO ADC memory map
 * instance.
 * @param value A uint8_t value to set the short selection.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SelShort_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the short selection status of the VCO ADC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC
 * instance.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SelShort_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of `SpareReg017` in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg017_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 017 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerator of type `adrv9001_BfVcoAdcMemMap_e` that
 * specifies the instance of the VCO ADC memory map.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg017_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 025 in the VCO ADC memory map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map is being accessed.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the spare register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg025_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 025 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map is being accessed.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg025_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of `SpareReg026` in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating the specific instance of the VCO ADC
 * memory map.
 * @param value The 8-bit value to be written to the register.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg026_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 026 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map is being accessed.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg026_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 027 in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific instance of the
 * VCO ADC memory map.
 * @param value The 8-bit value to be written to the spare register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg027_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 027 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map is being accessed.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg027_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 036 in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating the specific instance of the VCO ADC
 * memory map.
 * @param value The 8-bit value to be written to the spare register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg036_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 036 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map is being accessed.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg036_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 037 in the VCO ADC memory map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map is being accessed.
 * @param value The 8-bit value to be written to the spare register 037.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg037_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 037 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating the specific instance of the VCO ADC
 * memory map.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg037_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 045 in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific instance of the
 * VCO ADC memory map.
 * @param value The 8-bit value to be written to the spare register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg045_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 045 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device structure representing the VCO ADC.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map to access.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg045_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 046 in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg046_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 046 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map to access.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg046_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 047 in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg047_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 047 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device structure representing the VCO ADC.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, where a value of 0
 * indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg047_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 050 in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific instance of the
 * VCO ADC memory map.
 * @param value The value to be written to the spare register 050.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg050_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 050 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context used for communication.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg050_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 051 in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific instance of the
 * VCO ADC memory map.
 * @param value The value to be written to the spare register 051.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg051_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 051 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map to access.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg051_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 052 in the VCO ADC memory map.
 *
 * @param device A pointer to the device structure that represents the VCO ADC.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map is being accessed.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg052_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 052 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map to access.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg052_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 053 in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg053_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 053 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map is being accessed.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg053_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 054 in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg054_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 054 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map to access.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg054_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 055 in the VCO ADC memory map.
 *
 * @param device A pointer to the device structure that represents the VCO ADC.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map is being accessed.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the spare register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg055_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 055 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map is being accessed.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg055_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 056 in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific instance of the
 * VCO ADC memory map.
 * @param value The 8-bit value to be written to the spare register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg056_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 056 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating the specific instance of the VCO ADC
 * memory map.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg056_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 057 in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg057_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 057 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map is being accessed.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg057_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 063 in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg063_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 063 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map is being accessed.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg063_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 067 in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific instance of the
 * VCO ADC memory map.
 * @param value The 8-bit value to be written to the spare register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg067_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 067 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map is being accessed.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg067_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 076 in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg076_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x7), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 076 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating the specific instance of the VCO ADC
 * memory map.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg076_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x7), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 077 in the VCO ADC memory map.
 *
 * @param device A pointer to the device structure that represents the VCO ADC.
 * @param instance An enumerated type indicating the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg077_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x7), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 077 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map is being accessed.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg077_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x7), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `SpareReg0B3` register in the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map is being accessed.
 * @param value The 8-bit value to be written to the `SpareReg0B3` register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg0B3_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xb), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `SpareReg0B3` register from the VCO ADC
 * memory map.
 *
 * @param device A pointer to the device context used for communication.
 * @param instance An enumerated type indicating the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg0B3_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xb), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `SpareReg0B4` register in the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific instance of the
 * VCO ADC memory map.
 * @param value The 8-bit value to be written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg0B4_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xb), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 0B4 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerator indicating which instance of the VCO ADC memory
 * map to access.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg0B4_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xb), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `SpareReg0B5` register in the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg0B5_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xb), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `SpareReg0B5` register from the VCO ADC
 * memory map.
 *
 * @param device A pointer to the device context used for communication.
 * @param instance An enumerated type indicating the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg0B5_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xb), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `SpareReg0B6` register in the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg0B6_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xb), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `SpareReg0B6` register from the VCO ADC
 * memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map is being accessed.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg0B6_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xb), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `SpareReg0B7` register in the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value The 8-bit value to be written to the `SpareReg0B7` register.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg0B7_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xb), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `SpareReg0B7` register from the VCO ADC
 * memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map is being accessed.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg0B7_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xb), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 0C0 in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific instance of the
 * VCO ADC memory map.
 * @param value The value to be written to the spare register 0C0.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg0C0_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `SpareReg0C0` register from the VCO ADC
 * memory map.
 *
 * @param device A pointer to the device context used for communication.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg0C0_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `SpareReg0C1` register in the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value The value to be written to the `SpareReg0C1` register.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg0C1_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief The `adrv9001_VcoAdcMemMap_SpareReg0C1_Get` function retrieves the
 * value of a specific spare register from the VCO ADC memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map to access.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return The function returns an integer status code indicating the success or
 * failure of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg0C1_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `SpareReg0C2` register in the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit value to be written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg0C2_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `SpareReg0C2` register from the VCO ADC
 * memory map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map to access.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg0C2_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `SpareReg0C3` register in the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map is being accessed.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg0C3_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `SpareReg0C3` register from the VCO ADC
 * memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map to access.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg0C3_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `SpareReg0C4` register in the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context that allows access to the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map is being accessed.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg0C4_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `SpareReg0C4` register from the VCO ADC
 * memory map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map to access.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg0C4_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `SpareReg0C5` register in the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg0C5_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `SpareReg0C5` register from the VCO ADC
 * memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map to access.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg0C5_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `SpareReg0C6` register in the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg0C6_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `SpareReg0C6` register from the VCO ADC
 * memory map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map to access.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg0C6_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `SpareReg0C7` register in the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg0C7_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `SpareReg0C7` register from the VCO ADC
 * memory map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map to access.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg0C7_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of `SpareReg123` in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit unsigned integer value to be written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg123_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of `SpareReg123` from the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating the specific instance of the VCO ADC
 * memory map.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg123_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 124 in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific instance of the
 * VCO ADC memory map.
 * @param value The 8-bit value to be written to the spare register.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg124_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 124 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map to access.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg124_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 125 in the VCO ADC memory map.
 *
 * @param device A pointer to the device structure that represents the VCO ADC.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map is being accessed.
 * @param value The 8-bit value to be written to the spare register 125.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg125_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 125 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map to access.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg125_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 126 in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg126_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 126 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map is being accessed.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg126_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 127 in the VCO ADC memory map.
 *
 * @param device A pointer to the device structure that represents the VCO ADC.
 * @param instance An enumerated type indicating the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the spare register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg127_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 127 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map is being accessed.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg127_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 143 in the VCO ADC memory map.
 *
 * @param device A pointer to the device structure that represents the VCO ADC.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map is being accessed.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg143_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x14), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 143 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map is being accessed.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg143_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x14), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 144 in the VCO ADC memory map.
 *
 * @param device A pointer to the device structure that represents the VCO ADC.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map is being accessed.
 * @param value An 8-bit unsigned integer value to be written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg144_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x14), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 144 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map to access.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg144_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x14), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 145 in the VCO ADC memory map.
 *
 * @param device A pointer to the device structure that represents the VCO ADC.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map is being accessed.
 * @param value An 8-bit unsigned integer value to be written to the spare
 * register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg145_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x14), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 145 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map to access.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg145_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x14), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 146 in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg146_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x14), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 146 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map to access.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg146_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x14), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 147 in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific instance of the
 * VCO ADC memory map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg147_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x14), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 147 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating the specific instance of the VCO ADC
 * memory map.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg147_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x14), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the spare register 157 in the VCO ADC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating the specific instance of the VCO ADC
 * memory map.
 * @param value The 8-bit value to be written to the spare register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg157_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x15), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the spare register 157 from the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map is being accessed.
 * @param value A pointer to a `uint8_t` where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpareReg157_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x15), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a value in the VCO ADC memory map via SPI.
 *
 * @param device A pointer to the device structure that represents the VCO ADC.
 * @param instance An enumerated type indicating which instance of the VCO ADC
 * memory map to access.
 * @param value An 8-bit value to be written to the specified memory map
 * instance.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpiLoad_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x137), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value from a specific register in the VCO ADC memory
 * map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which VCO ADC memory map instance to
 * access.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_SpiLoad_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x137), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the VCO ADC state from the memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC
 * instance.
 * @param value A pointer to a uint8_t where the retrieved state will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_VState_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12e), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the VCO ADC memory map VTI disable shift value.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value A uint8_t value to set the VTI disable shift.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_VtiDisShift_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the VCO ADC VTI disable shift value from the specified
 * device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_VtiDisShift_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the VCO ADC memory map VTI force value.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value A uint8_t value to be set in the memory map.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_VtiForce_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xb), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the forced VTI value from the VCO ADC memory map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * VCO ADC memory map.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_VtiForce_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xb), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a short VTI (Voltage to Current Interface) value in the VCO ADC
 * memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value An 8-bit unsigned integer representing the value to be set.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_VtiShort_Set(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a short VCO ADC value from the specified memory map
 * instance.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific VCO ADC memory
 * map instance.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_VcoAdcMemMap_VtiShort_Get(void *const device,
    adrv9001_BfVcoAdcMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


#endif // __ADRV9001_BF_VCO_ADC_MEM_MAP_H__