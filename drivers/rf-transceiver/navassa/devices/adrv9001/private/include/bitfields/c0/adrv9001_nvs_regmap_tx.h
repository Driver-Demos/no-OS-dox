/**
 * \file
 * \brief BitField accessors for nvs_regmap_tx
 *
 * Autogenerated with yoda-gen 1.2.0. Do not modify
 *
 * \copyright Copyright (c) 2020 Analog Devices, Inc. All Rights Reserved.
 * This software is proprietary to Analog Devices, Inc. and its licensors.
 */

 #ifndef __ADRV9001_BF_NVS_REGMAP_TX_H__
 #define __ADRV9001_BF_NVS_REGMAP_TX_H__

#include "adrv9001_bf_hal.h"

/***************************************************************************//**
 * @brief The `adrv9001_BfNvsRegmapTx_e` is an enumeration that defines symbolic
 * names for the core register addresses associated with the TX1 and TX2
 * components of the ADRV9001 device. This enumeration facilitates the
 * use of meaningful names instead of raw hexadecimal values when
 * accessing or configuring these specific registers in the device's
 * register map.
 *
 * @param ADRV9001_BF_TX1_CORE Represents the core register address for TX1,
 * with a value of 0x600.
 * @param ADRV9001_BF_TX2_CORE Represents the core register address for TX2,
 * with a value of 0xa00.
 ******************************************************************************/
typedef enum adrv9001_BfNvsRegmapTx_e
{
    ADRV9001_BF_TX1_CORE    =   0x600,
    ADRV9001_BF_TX2_CORE    =   0xa00
} adrv9001_BfNvsRegmapTx_e;

/***************************************************************************//**
 * @brief The `nvsRegmapTxInstances` is a static constant array of type
 * `adrv9001_BfNvsRegmapTx_e`, which is an enumeration representing
 * different transmission core instances in the ADRV9001 device. It
 * contains two elements: `ADRV9001_BF_TX1_CORE` and
 * `ADRV9001_BF_TX2_CORE`, which likely correspond to the first and
 * second transmission cores, respectively.
 *
 * @details This array is used to reference specific transmission core instances
 * within the ADRV9001 device for configuration or control purposes.
 ******************************************************************************/
static const adrv9001_BfNvsRegmapTx_e nvsRegmapTxInstances[] = {
    ADRV9001_BF_TX1_CORE,
    ADRV9001_BF_TX2_CORE
};

/***************************************************************************//**
 * @brief Sets the TGCaptureI selection value in the ADRV9001 register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TGCaptureISel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12a), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the TGCaptureI selection value from a specific register for
 * the given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TGCaptureISel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12a), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the 16-bit selection for IQ capture in the ADRV9001 device's
 * transmit register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * transmit register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the IQ capture selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TGCaptureIq16bitSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12a), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 16-bit value from a specific register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TGCaptureIq16bitSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12a), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TGCapture selection in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the TGCapture selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TGCaptureSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12a), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the TGCapture selection value from a specific register for
 * the given device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved TGCapture
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TGCaptureSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12a), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the `TGDriveIZeroSel` field in the NVS register map for the
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TGDriveIZeroSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x86), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TGDriveIZeroSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x86), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Q channel drive zero selection value in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the Q channel drive zero selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TGDriveQZeroSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x86), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TGDriveQZeroSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x86), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the drive selection for the transmit gain control in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the drive selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TGDriveSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12b), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the drive selection value from a specific register for a
 * given instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved drive
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TGDriveSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12b), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the transmission enable state for a specified instance in the
 * ADRV9001 NVS register map.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific transmission
 * instance to be modified.
 * @param value A uint8_t value indicating the enable state to be set (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_AllTxEnable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x51), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the transmission enable status from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A pointer to a uint8_t variable where the retrieved transmission
 * enable status will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_AllTxEnable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x51), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the analog digital delay value from the specified register
 * map instance.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved delay
 * value will be stored.
 * @return Returns the status of the last register read operation, with the
 * retrieved analog digital delay value stored in the provided value
 * pointer.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_AnaDigDelayPre_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1a5), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1a4), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1a3), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the analog LSSI clock enable field in the ADRV9001 NVS register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that indicates whether to enable or disable the
 * LSSI clock.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_AnaLssiClkEnable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d5), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI clock enable status from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_AnaLssiClkEnable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d5), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the analog spare register value for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_AnalogSpare_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xc3), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_AnalogSpare_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xc3), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the attenuation ramp down value in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the attenuation ramp down
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_AttenRampDown_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe7), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the attenuation ramp down value from a specific register for
 * a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved attenuation
 * ramp down value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_AttenRampDown_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe7), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the attenuation ramp-up value in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the attenuation ramp-up
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_AttenRampUp_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe7), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the attenuation ramp-up value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved attenuation
 * ramp-up value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_AttenRampUp_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe7), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CLGC PM TL average exponent in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmTLAvgExp_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x139), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the average exponential value from a specific register in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmTLAvgExp_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x139), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CLGC PM TL average manual value in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A 16-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmTLAvgMan_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x138), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x137), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the average manual control value from the specified register
 * of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the register read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmTLAvgMan_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x138), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x137), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CLGC PM TL instance registers for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer value to be split and written to the
 * registers.
 * @return Returns the status of the last register write operation, indicating
 * success (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmTLInst_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x141), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x140), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x13f), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x13e), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 32-bit value from a series of registers for a specified
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, with a value
 * of 0 indicating success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmTLInst_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x141), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x140), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x13f), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x13e), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the average exponential value for the CLGC PM TU register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmTUAvgExp_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x136), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the average expected value from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmTUAvgExp_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x136), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CLGC PM TU average manual value in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A 16-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns the status of the last register write operation, indicating
 * success (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmTUAvgMan_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x135), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x134), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the average value from two registers for a specified
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * average value will be stored.
 * @return Returns the status of the last register read operation, with the
 * output value containing the combined results from the two registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmTUAvgMan_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x135), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x134), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CLGC PM TU instance register values for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer containing the value to be split and
 * written to the registers.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmTUInst_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x13d), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x13c), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x13b), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x13a), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 32-bit value from a series of registers for a specified
 * instance of a device.
 *
 * @param device A pointer to the device context from which the registers will
 * be read.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, where a value
 * of 0 indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmTUInst_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x13d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x13c), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x13b), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x13a), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CLGC PM accumulator number in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer representing the value to be set in
 * the accumulator.
 * @return Returns the status of the last write operation, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmAcc0Num_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x144), (value >> 16), 0x1f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x143), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x142), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from a specific register map for a given
 * device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, with the `value`
 * pointer containing the combined 24-bit value from the three
 * registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmAcc0Num_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x144), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x143), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x142), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CLGC PM accumulator value in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer representing the value to be set in
 * the accumulator.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmAcc0NumB_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x147), (value >> 16), 0x1f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x146), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x145), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from a specific register map for the given
 * instance of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmAcc0NumB_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x147), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x146), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x145), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CLGC PM accumulator number of reciprocal values in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A 32-bit unsigned integer representing the value to be set,
 * which is divided into three parts for writing to the registers.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmAcc0NumRecip_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x14a), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x149), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x148), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the accumulated number of reciprocal values from specific
 * registers for a given instance of the device.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, with the
 * output value containing the accumulated number of reciprocal values
 * from the three registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmAcc0NumRecip_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x14a), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x149), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x148), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CLGC PM accumulator number of reciprocal B in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer representing the value to be set in
 * the registers.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmAcc0NumRecipB_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x14d), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x14c), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x14b), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `ClgcPmAcc0NumRecipB` register from the
 * device and stores it in the provided pointer.
 *
 * @param device A pointer to the device context from which the register values
 * are read.
 * @param instance An enumeration value representing the specific instance of
 * the register map.
 * @param value A pointer to a `uint32_t` variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the last register read operation, where a
 * status of 0 indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmAcc0NumRecipB_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x14d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x14c), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x14b), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CLGC PM accumulator number in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer representing the value to be set in
 * the CLGC PM accumulator.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmAcc1Num_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x150), (value >> 16), 0x1f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x14f), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x14e), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from a specific register map for the given
 * instance of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmAcc1Num_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x150), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x14f), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x14e), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CLGC PM accumulator number of reciprocal values in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer containing the value to be split and
 * written to the registers.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmAcc1NumRecip_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x153), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x152), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x151), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the accumulated number of reciprocal values from the
 * specified register map for a given device instance.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmAcc1NumRecip_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x153), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x152), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x151), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CLGC PM accumulator value in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer representing the value to be set in
 * the CLGC PM accumulator.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmAcc2Num_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x156), (value >> 16), 0x1f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x155), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x154), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from a specific register map for a given
 * instance of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmAcc2Num_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x156), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x155), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x154), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CLGC PM accumulator number of reciprocal values in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer containing the value to be split and
 * written to the registers.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmAcc2NumRecip_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x159), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x158), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x157), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive registers for a
 * specified instance of the device.
 *
 * @param device A pointer to the device context from which the registers will
 * be read.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, with the
 * output value containing the combined 24-bit result from the three
 * registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmAcc2NumRecip_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x159), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x158), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x157), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CLGC PM accumulator number in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer representing the value to be set in
 * the CLGC PM accumulator.
 * @return Returns the status of the last write operation, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmAcc3Num_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x15c), (value >> 16), 0x1f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x15b), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x15a), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from a specific register map for the given
 * instance of the device.
 *
 * @param device A pointer to the device context from which the register values
 * will be read.
 * @param instance An enumerated type indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmAcc3Num_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x15c), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x15b), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x15a), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CLGC PM accumulator number of reciprocal values in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated type representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer representing the value to be set in
 * the CLGC PM accumulator.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmAcc3NumRecip_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x15f), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x15e), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x15d), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the accumulated number of reciprocal values from the
 * specified register map for a given device instance.
 *
 * @param device A pointer to the device context from which the register values
 * will be read.
 * @param instance An enumeration value representing the specific instance of
 * the register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, where a
 * status of zero indicates success and a non-zero value indicates an
 * error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmAcc3NumRecip_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x15f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x15e), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x15d), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CLGC PM accumulator clear field in the ADRV9001 NVS register
 * map.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmAccClear_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x160), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type indicating the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmAccClear_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x160), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CLGC PM ACC OVR value in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmAccOvr_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x163), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmAccOvr_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x163), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CLGC PM Acc Override value in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the CLGC PM Acc Override.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmAccOvrVal_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x164), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t where the retrieved register value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmAccOvrVal_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x164), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CLGC PM Accumulator Selection field in the ADRV9001 NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmAccSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x166), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmAccSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x166), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ClgcPmAccSelB field in the NVS register map for the specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmAccSelB_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x167), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmAccSelB_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x167), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clear mode for the CLGC PM register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A uint8_t value that specifies the clear mode to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmClearMode_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x161), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clear mode value from a specific register for the given
 * instance of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmClearMode_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x161), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CLGC PM mode in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that specifies the mode to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmMode_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x165), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CLGC PM mode value from the NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved CLGC PM mode
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmMode_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x165), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the read strobe value for the CLGC PM register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the read strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmReadStrobe_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x162), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmReadStrobe_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x162), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CLGC PMX selection value in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmXSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x168), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific value from a register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcPmXSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x168), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CLGC RSSI CC data capture enable value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcRssiCcDataCaptEnable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12d), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI CC data capture enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClgcRssiCcDataCaptEnable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12d), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output buffer enable state for the clock generator in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A uint8_t value indicating the desired state of the output
 * buffer (enabled or disabled).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClkgenOutputBufferEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xbc), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the output buffer enable status from the clock generator
 * register for a specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved output
 * buffer enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ClkgenOutputBufferEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xbc), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the complex gain bypass configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ComplexGainBypass_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ad), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the complex gain bypass value from a specific register for a
 * given device instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved complex gain
 * bypass value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ComplexGainBypass_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ad), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the complex gain I value in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the complex gain I value
 * to be set.
 * @return Returns the status of the last register write operation, indicating
 * success (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ComplexGainI_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1af), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1ae), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the complex gain I value from the specified register map for
 * a given device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * complex gain I value will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ComplexGainI_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1af), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1ae), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the complex gain Q value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A 16-bit unsigned integer representing the complex gain Q value
 * to be set.
 * @return Returns the status of the last register write operation, indicating
 * success (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ComplexGainQ_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1b1), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1b0), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the complex gain Q value from the specified register of the
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * complex gain Q value will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ComplexGainQ_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1b1), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1b0), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Updates the complex gain setting for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the new complex gain
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register update operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ComplexGainUpdateSingle_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ad), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the complex gain value from a specific register for a given
 * instance of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for which the complex gain is being
 * retrieved.
 * @param value A pointer to a uint8_t variable where the retrieved complex gain
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ComplexGainUpdateSingle_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ad), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the constant step size mode for the transmitter in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the step size value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ConstStepModeStepSize_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe5), (value >> 0), 0xfc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the step size value for the constant step mode from the
 * specified device's register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved step size
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ConstStepModeStepSize_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe5), &register_value, 0xfc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the wait duration for the constant step mode in the ADRV9001 NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the wait duration value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ConstStepModeWaitDuration_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe6), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the wait duration value for the constant step mode from the
 * specified device's register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved wait
 * duration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ConstStepModeWaitDuration_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe6), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the control output multiplexer selection for a specified instance
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the control output multiplexer.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ControlOutMuxSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x12c), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific control output multiplexer selection
 * from the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ControlOutMuxSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x12c), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DDR strobe alignment error clear bit in the ADRV9001 register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that is used to set the DDR strobe alignment
 * error clear bit.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxClearDdrStrobeAlignError_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x13), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DDR strobe alignment error status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxClearDdrStrobeAlignError_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x13), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ramp shift error value in the ADRV9001 NVS register map for
 * the specified instance.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the ramp shift error field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxClearRampShiftError_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x14), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ramp shift error status from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved ramp shift
 * error status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxClearRampShiftError_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x14), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the strobe alignment error clear value in the ADRV9001 NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that specifies the strobe alignment error clear
 * setting.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxClearStrobeAlignError_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x13), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the strobe alignment error value from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated type indicating the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved strobe
 * alignment error value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxClearStrobeAlignError_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x13), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CSSI transmit clock enable field in the ADRV9001 NVS register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that indicates whether to enable (1) or disable
 * (0) the CSSI transmit clock.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxClkEnable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x18), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the CSSI transmit clock enable register for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxClkEnable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x18), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CSSI transmission data format in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value An 8-bit unsigned integer representing the data format value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxDataFormat_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12), (value >> 0), 0x6, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CSSI TX data format from a specified register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved data format
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxDataFormat_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12), &register_value, 0x6, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CSSI transmission data format for four lanes in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value A 8-bit unsigned integer representing the data format value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxDataFormatFourLanes_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and formats it into a
 * 16-bit value.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the formatted register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxDataFormatFourLanes_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DDR clock inversion configuration for the specified instance
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value A uint8_t value representing the clock inversion setting to be
 * applied.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxDdrClkInv_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DDR clock inversion setting from a specific register for
 * a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * inversion value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxDdrClkInv_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DDR negative strobe selection for a specified instance in the
 * ADRV9001 register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map to be modified.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxDdrNegStrobeSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the negative strobe selection value from a specific register
 * for the given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxDdrNegStrobeSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DDR positive clock selection for the specified instance in
 * the ADRV9001 register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxDdrPosClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DDR positive clock selection value from a specific
 * register for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxDdrPosClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DDR selection for the CSSI transmitter in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A uint8_t value that specifies the DDR selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxDdrSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DDR selection value from a specific register for a given
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved DDR
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxDdrSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the DDR strobe alignment error value from a specific
 * register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved strobe
 * alignment error value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxDdrStrobeAlignError_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves debug captured data from a specific register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the captured debug data
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxDebugCapturedData_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x16), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the second captured debug data from the CSSI TX register for
 * a specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxDebugCapturedDataSecond_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x16), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the 4-bit debug load mode for the CSSI transmission in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the ADRV9001.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the debug load mode.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxDebugLoad4bitsMode_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x15), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 4-bit debug value from a specific register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure used for communication with
 * the ADRV9001.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved 4-bit value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxDebugLoad4bitsMode_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x15), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the debug mode for the CSSI transmission in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the ADRV9001.
 * @param value A uint8_t value that indicates the debug mode to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxDebugMode_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x14), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the debug mode value from a specific register for the given
 * instance of the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved debug mode
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxDebugMode_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x14), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the debug nibble selection for the CSSI transmission in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the debug nibble selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxDebugNibbleSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x14), (value >> 0), 0x60, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the debug nibble selection value from a specific register
 * for the given instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved nibble
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxDebugNibbleSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x14), &register_value, 0x60, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the debug queue selection for the CSSI transmission in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the ADRV9001.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the debug queue selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxDebugQSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x14), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the debug queue selection value from a specific register for
 * the given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxDebugQSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x14), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the debug ramp shift error value from a specific register
 * for the given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxDebugRampShiftError_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the debug capture value for the CSSI transmission in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the ADRV9001.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the debug capture.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxDebugStartCapture_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x14), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the debug capture value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxDebugStartCapture_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x14), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the debug start ramp value in the NVS register map for the
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the debug start ramp.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxDebugStartRamp_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x14), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the debug start ramp value from a specific register for the
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxDebugStartRamp_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x14), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the debug start shift value in the NVS register map for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the debug start shift.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxDebugStartShift_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x14), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the debug start shift value from a specific register for the
 * given instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxDebugStartShift_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x14), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CSSI transmit enable field in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that indicates the desired state for the CSSI
 * transmit enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxEnable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x13), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the transmit enable status from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved transmit
 * enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxEnable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x13), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CSSI TX FIFO clear register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit value to be written to the CSSI TX FIFO clear register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxFifoClear_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x13), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the CSSI TX FIFO clear register from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxFifoClear_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x13), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable state for the CSSI TX FIFO in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the TX.
 * @param value A uint8_t value indicating the desired clock enable state.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxFifoClkEnable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x13), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the CSSI TX FIFO clock enable register for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxFifoClkEnable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x13), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the status of the CSSI TX FIFO empty flag from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxFifoEmpty_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CSSI TX FIFO enable field in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that indicates whether to enable or disable the
 * CSSI TX FIFO.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxFifoEnable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x13), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the CSSI TX FIFO enable register for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxFifoEnable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x13), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the status of the CSSI TX FIFO full flag from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved FIFO full
 * status will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxFifoFull_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the MCS (Modulation and Coding Scheme) for the CSSI (Common
 * Serial Synchronous Interface) transmission in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS (Non-Volatile Storage) register map for transmission.
 * @param value An 8-bit unsigned integer representing the MCS value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxForceMcs_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x15), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxForceMcs_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x15), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CSSI transmit clock inversion configuration in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A 8-bit unsigned integer that specifies the clock inversion
 * setting to be applied.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxInvertClk_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x18), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the inverted clock value for the CSSI transmission from the
 * specified device register.
 *
 * @param device A pointer to the device structure used for accessing hardware
 * registers.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved inverted
 * clock value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxInvertClk_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x18), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the long strobe value for the CSSI transmission in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the CSSI transmission.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the long strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxLongStrobe_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the long strobe value from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved long strobe
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxLongStrobe_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the least significant bit first configuration for the CSSI
 * transmission in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxLsbFirst_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the least significant byte from a specific register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved least
 * significant byte will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxLsbFirst_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the first transmit queue configuration for the `adrv9001` device.
 *
 * @param device A pointer to the device structure that represents the
 * `adrv9001` device.
 * @param instance An enumerated value representing the specific instance of the
 * transmit queue.
 * @param value An 8-bit unsigned integer representing the configuration value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxQFirst_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the first transmit queue value from the CSSI register map
 * for a specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved transmit
 * queue value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxQFirst_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the delay for enabling the read FIFO in the CSSI transmission of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the delay value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxRdFifoEnableDelay_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x13), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the CSSI TX read FIFO enable delay value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxRdFifoEnableDelay_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x13), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the CSSI TX strobe alignment error status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxStrobeAlignError_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CSSI TXDP interface selection in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value A uint8_t value that specifies the new selection for the CSSI
 * TXDP interface.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxdpIntfSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2a), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_CssiTxdpIntfSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2a), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DAC clock enable state in the ADRV9001 device's NVS register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A uint8_t value indicating the desired state of the DAC clock
 * enable (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the DAC clock enable setting operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_DacClockEnable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc4), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DAC clock enable status from the specified register for
 * a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved DAC clock
 * enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_DacClockEnable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc4), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the data capture drive enable configuration for a specified
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A uint8_t value representing the drive enable configuration to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_DataCaptureDriveEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12b), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the data capture drive enable status from a specific
 * register for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_DataCaptureDriveEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12b), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the direct modulation analog clock divider value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the clock divider value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_DirectModAnalogClkdivValue_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xc6), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock divider value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * divider value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_DirectModAnalogClkdivValue_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xc6), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the direct modulation clock enable state in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A uint8_t value indicating the desired state (enabled or
 * disabled) for the direct modulation clock.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_DirectModClkEnable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc9), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the direct modulation clock enable status from a specific
 * register for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_DirectModClkEnable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc9), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the direct modulation clock polarity in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A uint8_t value representing the desired polarity setting for
 * the direct modulation clock.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_DirectModClkPolarity_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc9), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the direct modulation clock polarity setting from a
 * specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * polarity value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_DirectModClkPolarity_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc9), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the direct modulation enable field in the ADRV9001 NVS register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that indicates the desired state for the direct
 * modulation enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_DirectModEnable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc5), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the direct modulation enable value from the ADRV9001
 * register map.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved modulation
 * enable value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_DirectModEnable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc5), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the direct modulation FIFO enable state in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A uint8_t value indicating the desired state to set for the
 * direct modulation FIFO enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_DirectModFifoEnable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc7), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the direct modulation FIFO enable status from a specified
 * register.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_DirectModFifoEnable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc7), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the number of clock cycles for direct modulation in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the number of clock
 * cycles to set for direct modulation.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_DirectModNumClkCycles_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xc8), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the number of clock cycles for direct modulation from a
 * specified register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A pointer to a uint8_t variable where the retrieved clock cycle
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_DirectModNumClkCycles_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xc8), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the direct modulation read FIFO enable delay for a specified
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the direct modulation read FIFO enable delay.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_DirectModRdFifoEnableDelay_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc7), (value >> 0), 0xe, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Direct Modulation Read FIFO Enable Delay value from a
 * specified register.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_DirectModRdFifoEnableDelay_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc7), &register_value, 0xe, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the constant step mode for the specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A uint8_t value that indicates the desired state to set for the
 * constant step mode.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_EnConstStepMode_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe5), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field for the ADRV9001
 * device in constant step mode.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_EnConstStepMode_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe5), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SPI CSB update value in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 8-bit unsigned integer representing the value to be set in the
 * register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_EnableSpiCsbUpdate_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xda), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SPI CSB update status from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_EnableSpiCsbUpdate_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xda), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the flush period for the transmit register map in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated type representing the specific instance of the
 * transmit register map.
 * @param value A 32-bit unsigned integer representing the flush period value to
 * be set.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_FlushPeriod_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1a2), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1a1), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1a0), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the flush period value from the device's register map by
 * reading three consecutive registers.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated type indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved flush
 * period value will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the register read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_FlushPeriod_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1a2), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1a1), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1a0), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain amplifier RSSI capture enable value in the ADRV9001 NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanAmpRssiCcDataCaptEnable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12d), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RSSI CC data capture enable value from a specific
 * register for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanAmpRssiCcDataCaptEnable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12d), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the average exponential value for the gain of the power amplifier
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the average exponential gain.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmTLAvgExp_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x16e), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the average exponential value from a specific register for
 * the given instance of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmTLAvgExp_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x16e), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the average manual gain for the power amplifier by writing to
 * specific registers.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the value to be set in
 * the registers.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmTLAvgMan_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x16d), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x16c), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the average manual gain value from the specified register of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmTLAvgMan_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x16d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x16c), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain control parameters in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map to be modified.
 * @param value A 32-bit unsigned integer representing the value to be written
 * to the registers.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmTLInst_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x176), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x175), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x174), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x173), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 32-bit value from a series of registers for a specified
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, where a
 * status of zero indicates success and a non-zero value indicates an
 * error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmTLInst_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x176), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x175), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x174), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x173), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the average exponential value for the gain of the power amplifier
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the average exponential gain.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmTUAvgExp_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x16b), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the average expected value of the gain for the power
 * amplifier from a specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmTUAvgExp_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x16b), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the average manual gain for the power amplifier by writing to
 * specific registers.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the value to be written
 * to the registers.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any of the register write operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmTUAvgMan_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x16a), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x169), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the average manual gain value from the specified register of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * average gain value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmTUAvgMan_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x16a), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x169), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain control parameters for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer representing the value to be written
 * to the registers.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmTUInst_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x172), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x171), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x170), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x16f), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 32-bit value from a series of registers for a specified
 * instance of a device.
 *
 * @param device A pointer to the device context from which the registers will
 * be read.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, with the
 * output value containing the combined 32-bit value from the four
 * registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmTUInst_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x172), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x171), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x170), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x16f), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain and power management accumulator value in the ADRV9001
 * device's register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer representing the value to be set in
 * the gain and power management accumulator.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmAcc0Num_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x179), (value >> 16), 0x1f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x178), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x177), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `GanPaPmAcc0Num` register from the device's
 * NVS register map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, indicating success or
 * failure, while the retrieved value is stored in the provided pointer.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmAcc0Num_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x179), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x178), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x177), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain and power management accumulator value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer representing the value to be set in
 * the gain and power management accumulator.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmAcc0NumB_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x17c), (value >> 16), 0x1f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x17b), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x17a), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from a specific register map for the given
 * instance of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, with the 24-bit value
 * stored in the provided pointer.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmAcc0NumB_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17c), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x17b), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x17a), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the number of reciprocal values for the gain control in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer containing the value to be set, which
 * is divided into three parts for writing.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmAcc0NumRecip_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x17f), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x17e), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x17d), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `GanPaPmAcc0NumRecip` register from the
 * device by reading three consecutive registers.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated type indicating the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, where a
 * status of 0 indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmAcc0NumRecip_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x17f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x17e), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x17d), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Gain and Power Amplifier (GanPa) parameters in the NVS
 * register map for the specified instance.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer containing the value to be split and
 * written to the registers.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmAcc0NumRecipB_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x182), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x181), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x180), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive registers for a
 * specified instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, where a
 * status of 0 indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmAcc0NumRecipB_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x182), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x181), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x180), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain and power amplifier parameters in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer containing the value to be set in the
 * registers.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmAcc1Num_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x185), (value >> 16), 0x1f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x184), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x183), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the `GanPaPmAcc1Num` register from the device's
 * NVS register map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated type indicating the specific instance of the
 * NVS register map to access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, where a status of zero
 * indicates success and a non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmAcc1Num_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x185), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x184), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x183), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Gain Control parameters in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map to be modified.
 * @param value A 32-bit unsigned integer containing the value to be split and
 * written to the registers.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmAcc1NumRecip_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x188), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x187), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x186), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the accumulated gain value from the register map for a
 * specified instance.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the accumulated
 * gain value will be stored.
 * @return Returns the status of the last register read operation, where a value
 * of 0 indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmAcc1NumRecip_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x188), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x187), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x186), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain and power amplifier parameters in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer containing the value to be set in the
 * registers.
 * @return Returns the status of the last write operation, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmAcc2Num_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x18b), (value >> 16), 0x1f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x18a), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x189), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from a specific register map for the given
 * instance of the device.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmAcc2Num_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x18b), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x18a), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x189), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the number of reciprocal values for the gain control in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated type representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer containing the value to be split and
 * written to the registers.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmAcc2NumRecip_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x18e), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x18d), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x18c), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive registers for a
 * specified instance of the ADRV9001 device.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * ADRV9001 device.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, where a
 * status of 0 indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmAcc2NumRecip_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x18e), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x18d), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x18c), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain control parameters in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer containing the value to be split and
 * written to the registers.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmAcc3Num_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x191), (value >> 16), 0x1f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x190), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x18f), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from a specific register map for the given
 * instance of the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmAcc3Num_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x191), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x190), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x18f), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Gain Control parameters in the ADRV9001 device by writing to
 * specific registers.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer containing the value to be split and
 * written to the registers.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmAcc3NumRecip_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x194), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x193), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x192), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from three consecutive registers for a
 * specified instance of the device.
 *
 * @param device A pointer to the device context from which the registers will
 * be read.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, with the
 * output variable containing the combined 24-bit value from the three
 * registers.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmAcc3NumRecip_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x194), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x193), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x192), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain control parameter in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the ADRV9001.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmAccClear_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x195), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the gain control
 * of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmAccClear_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x195), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain of the power amplifier by writing a specified value to a
 * specific field in the device's register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type representing the specific instance of the
 * register map to be accessed.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmAccOvr_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x198), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain setting from a specific register for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmAccOvr_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x198), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain control parameter for the ADRV9001 device's transmit
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmit path.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the gain control parameter.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmAccOvrVal_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x199), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain setting from a specific register for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved gain value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmAccOvrVal_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x199), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain control parameter in the NVS register map for the
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmAccSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19b), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain control setting from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmAccSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19b), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Gain Control for the PA using a specific instance and value.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmAccSelB_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19c), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmAccSelB_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19c), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clear mode for the gain amplifier power amplifier in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A uint8_t value that indicates the clear mode to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmClearMode_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x196), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmClearMode_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x196), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Gain Control mode for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A uint8_t value representing the Gain Control mode to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmMode_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19a), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain amplifier power management mode value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmMode_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19a), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the read strobe value for the gain control of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the read strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmReadStrobe_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x197), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register related to the gain control
 * of the PA in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmReadStrobe_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x197), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain control parameter for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the gain control.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmXSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19d), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain setting from a specific register for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GanPaPmXSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19d), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the analog gain value for the specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the gain value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GdcalAnaGain1_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xf2), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the analog gain value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved gain value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GdcalAnaGain1_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xf2), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the analog gain value for the Gdcal in the NVS register map of
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the gain value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GdcalAnaGain2_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xf3), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the analog gain value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved gain value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GdcalAnaGain2_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xf3), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the digital gain value for the specified instance in the ADRV9001
 * NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the digital gain value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GdcalDigGain1_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xf4), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the digital gain value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved digital gain
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GdcalDigGain1_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xf4), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the digital gain value for the specified instance in the ADRV9001
 * NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value An 8-bit unsigned integer representing the digital gain value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GdcalDigGain2_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xf5), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the digital gain value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure used for communication with
 * the ADRV9001.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved digital gain
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GdcalDigGain2_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xf5), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the GDCal state from the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved GDCal state
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GdcalStatePre_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19f), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain calibration value for the specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for which the calibration is being set.
 * @param value An 8-bit unsigned integer representing the gain calibration
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GdcalTxStartCal_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19f), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific calibration value from a device's register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved calibration
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GdcalTxStartCal_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19f), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GDCal window size in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the GDCal window size to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GdcalWindowSize_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19f), (value >> 0), 0x38, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GDCal window size from the NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved GDCal window
 * size will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_GdcalWindowSize_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19f), &register_value, 0x38, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the internal delay enable configuration for a specified instance
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A uint8_t value indicating the enable/disable state for the
 * internal delay.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_IntDelay0Enable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12f), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the internal delay enable status from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_IntDelay0Enable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12f), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the internal delay configuration for the ADRV9001 device's
 * transmit register.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * transmit register.
 * @param value An 8-bit unsigned integer that specifies the value to set for
 * the internal delay.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_IntDelay1Enable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12f), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the internal delay enable status from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved delay enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_IntDelay1Enable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12f), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the internal transmission enable state for a specified instance
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A uint8_t value indicating the transmission enable state to be
 * set (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_IntTxEnable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12f), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the transmission enable status from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A pointer to a uint8_t variable where the retrieved transmission
 * enable status will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_IntTxEnable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12f), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the interrupt arm for high-pass attenuation changes in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A uint8_t value that indicates the desired state to set for the
 * interrupt.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_InterruptArmOnlyForAttenHpChanges_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xda), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the interrupt arm status for high power attenuation changes
 * from a specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_InterruptArmOnlyForAttenHpChanges_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xda), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the load resistance value for the LDO in the ADRV9001 NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the load resistance value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LdoResLoad_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1f1), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LDO resistor load value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved resistor
 * load value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LdoResLoad_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1f1), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bypass state of the Low Dropout Regulator (LDO) in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A uint8_t value indicating the desired bypass state (0 or 1) for
 * the LDO.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LoLdoBypass_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1f2), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bypass value from the Low LDO register of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved bypass value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LoLdoBypass_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1f2), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the GM boost value in the NVS register map for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the GM boost value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LoLdoGmBoost_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1f1), (value >> 0), 0x18, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the GM boost value from the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved GM boost
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LoLdoGmBoost_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1f1), &register_value, 0x18, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low dropout regulator power-down state in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A uint8_t value indicating the desired power-down state (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LoLdoPd_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1f2), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the low LDO power-down status from a specific register for a
 * given instance of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LoLdoPd_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1f2), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the early strobe detected flag in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value to be written to the early strobe detected flag.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxClearEarlyStrobeDetectedFlag_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1cb), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the early strobe detected flag from a specific register in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxClearEarlyStrobeDetectedFlag_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1cb), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the strobe alignment error clear value in the ADRV9001 NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxClearStrobeAlignError_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the strobe alignment error status from a specific register
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxClearStrobeAlignError_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI transmit clock enable field in the ADRV9001 register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A uint8_t value indicating the desired state of the LSSI
 * transmit clock enable (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxClkEnable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x28), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI TX clock enable status from a specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxClkEnable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x28), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the 12-bit LSSI transmission data format in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the LSSI transmission data format.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDataFormat12bit_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 12-bit data format value from a specific register for the
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDataFormat12bit_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI transmit data for one lane in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the data to be
 * transmitted.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDataOneLane_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 16-bit value from a specific register in the device's NVS
 * register map.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDataOneLane_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI TX debug register after clearing FIFO error for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 8-bit unsigned integer that represents the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugAfterFifoErrorClear_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x21), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI TX debug value after clearing FIFO errors from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugAfterFifoErrorClear_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x21), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves debug captured data from the LSSI TX register map for a
 * specified instance.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the captured data
 * will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugCapturedData_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x27), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x26), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the second captured debug data from the LSSI TX register map
 * for a specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the captured debug
 * data will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the register read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugCapturedDataSecond_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1ca), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1c9), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the LSSI TX debug error value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugError_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x25), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI TX debug error counter value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the ADRV9001.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the debug error counter.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugErrorCounterRead_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x20), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Reads the LSSI TX debug error counter from a specific register and
 * stores the value.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the read error counter
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugErrorCounterRead_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x20), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI transmission debug mode for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for which the debug mode is being set.
 * @param value A uint8_t value representing the debug mode to be set, where the
 * least significant bit indicates the mode.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugMode_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x20), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI TX debug mode value from a specific register for
 * the given device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved debug mode
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugMode_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x20), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PRBS15 enable state for the LSSI transmission debug in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A uint8_t value indicating the desired state to enable or
 * disable PRBS15.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugPrbs15Enable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x21), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PRBS15 enable status from the LSSI TX debug register.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugPrbs15Enable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x21), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the PRBS15 ramp shift error count from a specific register.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved error count
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugPrbs15RampShiftErrorCount_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x22), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PRBS15 restart value in the LSSI TX debug register for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the LSSI TX.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugPrbs15Restart_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x21), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PRBS15 restart value from the LSSI TX debug register.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugPrbs15Restart_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x21), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PRBS7 enable configuration for the LSSI transmission in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A uint8_t value indicating the desired state (enable/disable)
 * for the PRBS7 configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugPrbs7Enable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x23), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PRBS7 enable status from a specific register for the
 * LSSI TX debug.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved PRBS7 enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugPrbs7Enable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x23), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PRBS7 error clear flag in the LSSI TX debug register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A uint8_t value that indicates the state to set for the PRBS7
 * error clear flag.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugPrbs7ErrorClear_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x23), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PRBS7 error status from the LSSI TX debug register.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved error status
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugPrbs7ErrorClear_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x23), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the PRBS7 error count from a specific register for a given
 * device instance.
 *
 * @param device A pointer to the device context from which the register value
 * will be read.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved error count
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugPrbs7ErrorCount_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x24), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PRBS7 restart value in the LSSI TX debug register for a
 * specified instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugPrbs7Restart_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x23), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PRBS7 restart value from a specific register for the
 * given device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved PRBS7
 * restart value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugPrbs7Restart_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x23), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PRBS7 odd/even swap configuration in the LSSI TX debug
 * register.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the LSSI TX.
 * @param value A uint8_t value that specifies the configuration to be set for
 * the PRBS7 odd/even swap.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugPrbs7SwapOddEven_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x23), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PRBS7 odd/even swap value from a specific register in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugPrbs7SwapOddEven_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x23), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI TX debug queue selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the debug queue selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugQSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x20), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI TX debug queue selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugQSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x20), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI TX debug capture configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the LSSI TX.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugStartCapture_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x20), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI TX debug capture value from a specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugStartCapture_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x20), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI TX debug start error check value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugStartErrorCheck_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x20), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI TX debug start error check value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugStartErrorCheck_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x20), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the debug start ramp value for the LSSI transmission in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the LSSI transmission.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the debug start ramp.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugStartRamp_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x20), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the debug start ramp value from a specific register for the
 * LSSI TX.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugStartRamp_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x20), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI TX debug start shift value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be shifted
 * and set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugStartShift_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x20), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI TX debug start shift value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDebugStartShift_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x20), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI TX divider value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the divider value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDivValue_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1f), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1e), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI TX divider value from the register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * divider value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if a read operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxDivValue_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1e), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the early strobe detected flag from a specific register in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxEarlyStrobeDetectedFlag_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x25), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI TX enable state in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the TX.
 * @param value A uint8_t value indicating the desired state to set for the LSSI
 * TX enable.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxEnable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI TX enable status from a specific register for a
 * given device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxEnable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI TX FIFO clear register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit value to be written to the FIFO clear register.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxFifoClear_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value from a specific register in the ADRV9001 device
 * and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated type indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxFifoClear_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI TX FIFO clock enable register for a specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that indicates the clock enable setting to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxFifoClkEnable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI TX FIFO clock enable status from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxFifoClkEnable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the LSSI TX FIFO empty status from a specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved FIFO empty
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxFifoEmpty_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x25), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI TX FIFO enable field in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that indicates the desired state to set for the
 * LSSI TX FIFO enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxFifoEnable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI TX FIFO enable status from a specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved FIFO enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxFifoEnable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the status of the LSSI TX FIFO full flag from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved FIFO full
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxFifoFull_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x25), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI TX FIFO read reset value in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the ADRV9001.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the LSSI TX FIFO read reset field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxFifoReadReset_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x29), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI TX FIFO read reset status from a specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the read value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxFifoReadReset_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x29), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the write reset value for the LSSI TX FIFO in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the TX.
 * @param value A uint8_t value that specifies the reset value to be written to
 * the FIFO.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxFifoWriteReset_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x29), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the write reset status from the LSSI TX FIFO register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxFifoWriteReset_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x29), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the MCS (Modulation and Coding Scheme) value for the LSSI (Low
 * Latency Serial Interface) transmission in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS (Non-Volatile Storage) register map for the transmission.
 * @param value An 8-bit unsigned integer representing the MCS value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxForceMcs_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x20), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the MCS value from the LSSI TX force register for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved MCS value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxForceMcs_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x20), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock gating enable for the LSSI TX full reference clock in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the TX.
 * @param value A uint8_t value that indicates the desired state for the clock
 * gating enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxFullRefclkClkGatingEnable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x28), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock gating enable status from a specific register for
 * the LSSI TX full reference clock.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock gating
 * enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxFullRefclkClkGatingEnable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x28), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the high longer duty cycle value for the LSSI TX full reference
 * clock in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the TX.
 * @param value An 8-bit unsigned integer representing the duty cycle value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxFullRefclkDutyCycleHighLonger_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x28), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the high duty cycle value from a specific register for the
 * LSSI TX full reference clock.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved duty cycle
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxFullRefclkDutyCycleHighLonger_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x28), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the full reference clock enable state for the LSSI transmission
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A 8-bit unsigned integer that indicates the desired state to set
 * for the full reference clock enable.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxFullRefclkEnable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x28), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the full reference clock enable status from the LSSI TX
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxFullRefclkEnable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x28), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bit inversion configuration for the LSSI TX I channel in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the LSSI TX.
 * @param value A uint8_t value representing the bit inversion setting to be
 * applied.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxIBitInversion_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bit inversion setting from a specific register for the
 * LSSI TX interface.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved bit
 * inversion value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxIBitInversion_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the load divider value for the LSSI transmission in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the load divider value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxLoadDivider_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the load divider value from a specific register for the
 * given instance of the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved load divider
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxLoadDivider_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the long strobe value for the LSSI transmission in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the LSSI transmission.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the long strobe.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxLongStrobe_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the long strobe value from the LSSI TX register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved long strobe
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxLongStrobe_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSB first configuration for the LSSI transmission in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxLsbFirst_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the least significant byte of a specific register value from
 * the device and stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxLsbFirst_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bit inversion configuration for the LSSI TX Q in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the LSSI TX.
 * @param value A uint8_t value representing the bit inversion setting to be
 * applied.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxQBitInversion_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the bit inversion value from a specific register for the
 * LSSI TX Q configuration.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved bit
 * inversion value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxQBitInversion_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the first transmit queue value in the LSSI register map for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the transmit queue.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxQFirst_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the first LSSI TX queue value from the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxQFirst_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI TX read FIFO enable delay in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the TX.
 * @param value An 8-bit unsigned integer representing the delay value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxRdFifoEnableDelay_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI TX read FIFO enable delay value from a specified
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxRdFifoEnableDelay_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI TX reference clock enable value in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxRefclkEnable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x28), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI TX reference clock enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved reference
 * clock enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxRefclkEnable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x28), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the LSSI TX strobe alignment error status from a specific
 * register.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved alignment
 * error status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxStrobeAlignError_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x25), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the bit inversion for the LSSI TX strobe in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the TX.
 * @param value A uint8_t value that indicates the desired bit inversion
 * setting.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxStrobeBitInversion_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI TX strobe bit inversion value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved strobe bit
 * inversion value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxStrobeBitInversion_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI TXDP interface selection in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that specifies the selection for the LSSI TXDP
 * interface.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxdpIntfSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2a), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI TXDP interface selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_LssiTxdpIntfSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2a), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PA protection APR enable value in the ADRV9001 NVS register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that indicates the enable/disable state for PA
 * protection APR.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionAprEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xcb), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PA protection APR enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionAprEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xcb), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the average peak ratio for PA protection from the NVS
 * register map.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * average peak ratio will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionAveragePeakRatio_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd7), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xd6), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the average power protection value from the PA register map
 * for a specified instance.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * average power protection value will be stored.
 * @return Returns the status of the last register read operation, which
 * indicates success (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionAveragePower_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xd5), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xd4), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the average threshold for PA protection in the ADRV9001 device's
 * NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the average threshold
 * value to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionAvgThreshold_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xcd), (value >> 8), 0x1f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xcc), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the average threshold value for PA protection from the NVS
 * register map.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * average threshold value will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionAvgThreshold_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xcd), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xcc), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the average power protection enable state for the PA in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A uint8_t value indicating the desired state (enabled or
 * disabled) for average power protection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionAvgpowerEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xca), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the average power protection setting from the PA register
 * for a specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved average
 * power protection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionAvgpowerEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xca), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the average power error value from the PA protection
 * register for a specified instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved average
 * power error value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionAvgpowerError_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd3), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PA protection average power error clear field in the ADRV9001
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A uint8_t value to be written to the register, which is shifted
 * to align with the field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionAvgpowerErrorClear_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd3), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the average power error clear status from the PA protection
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionAvgpowerErrorClear_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd3), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PA protection average power error clear requirement in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A uint8_t value that indicates the new setting for the PA
 * protection average power error clear requirement.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionAvgpowerErrorClearRequired_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xca), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the average power protection error status from a specific
 * register for a given instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionAvgpowerErrorClearRequired_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xca), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the average duration for PA protection in the ADRV9001 device's
 * NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the average duration of PA protection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionAvrgDur_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xca), (value >> 0), 0xf8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the average duration for PA protection from the NVS register
 * map.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved average
 * duration value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionAvrgDur_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xca), &register_value, 0xf8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the PA protection error power value from the specified
 * register map instance.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved power
 * value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the register read operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionErrorPower_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xd9), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xd8), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PA protection gain ramp down enable field in the ADRV9001
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A uint8_t value that indicates whether to enable (1) or disable
 * (0) the PA protection gain ramp down.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionGainRampDownEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd1), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PA protection gain ramp down enable status from a
 * specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionGainRampDownEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd1), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PA protection gain ramp-up enable value in the ADRV9001
 * device's NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that indicates the ramp-up enable setting to be
 * written.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionGainRampUpEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd3), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PA protection gain ramp-up enable status from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionGainRampUpEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd3), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PA protection gain step down enable value in the NVS register
 * map for a specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that indicates the enable state for the PA
 * protection gain step down.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionGainStepDownEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd0), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PA protection gain step down enable status from a
 * specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionGainStepDownEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd0), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PA protection input selection in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionInputSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xca), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PA protection input selection value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionInputSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xca), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the peak count for PA protection in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the peak count value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionPeakCount_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xcf), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the peak count value from the PA protection register for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved peak count
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionPeakCount_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xcf), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the peak duration for PA protection in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the peak duration value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionPeakDur_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xcb), (value >> 0), 0xf8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the peak duration value for PA protection from the NVS
 * register map.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved peak
 * duration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionPeakDur_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xcb), &register_value, 0xf8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the peak power protection value from the specified register
 * map for the given device instance.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved peak
 * power protection value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the register reads failed.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionPeakPower_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1cf), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1ce), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the peak threshold for PA protection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the peak threshold value
 * to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the operations performed.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionPeakThreshold_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1cd), (value >> 8), 0x1f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xce), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the peak threshold value for PA protection from the NVS
 * register map.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved peak
 * threshold value will be stored.
 * @return Returns the status of the read operations, indicating success (0) or
 * an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionPeakThreshold_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1cd), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xce), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the peak power enable configuration for the PA protection in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A uint8_t value that indicates the desired state (enabled or
 * disabled) for the peak power protection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionPeakpowerEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xcb), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the peak power enable status from the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved peak power
 * enable status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionPeakpowerEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xcb), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the peak power error value from the PA protection register
 * for a specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved peak power
 * error value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionPeakpowerError_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd3), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the peak power error clear value in the ADRV9001 NVS register map
 * for the specified instance.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionPeakpowerErrorClear_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd3), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the peak power error status from the PA protection register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved peak power
 * error value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionPeakpowerErrorClear_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd3), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PA protection peak power error clear requirement in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A uint8_t value that indicates the new setting for the peak
 * power error clear requirement.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionPeakpowerErrorClearRequired_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xcb), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the peak power error status from the PA protection register
 * for a specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved peak power
 * error status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionPeakpowerErrorClearRequired_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xcb), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the PA protection ramp down status from a specific register.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved status will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionRampDownInProgress_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd3), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the maximum attenuation value for the PA protection ramp in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the maximum attenuation
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionRampMaxAttenuation_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd1), (value >> 0), 0xfe, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the maximum attenuation value from the PA protection ramp
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved maximum
 * attenuation value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionRampMaxAttenuation_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd1), &register_value, 0xfe, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PA protection ramp step duration in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the duration value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionRampStepDuration_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd2), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PA protection ramp step duration value from a specific
 * register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionRampStepDuration_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd2), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PA protection ramp step size in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device context for the ADRV9001.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the step size value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionRampStepSize_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd2), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PA protection ramp step size from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved step size
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionRampStepSize_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd2), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the PA protection ramp-up status from a specific register.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionRampUpInProgress_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd3), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PA protection attenuation step in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the attenuation value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionTxAttenStep_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd0), (value >> 0), 0xfe, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PA protection transmit attenuation step value from a
 * specific register.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved attenuation
 * step value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PaProtectionTxAttenStep_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd0), &register_value, 0xfe, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PDIDist value in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PdIDist_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1f3), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PdIDist_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1f3), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a 2-bit PDBIAS value in the ADRV9001 NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_Pdbias2bit04bit1_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1f3), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 2-bit value from a specific register and stores it in a
 * provided variable.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_Pdbias2bit04bit1_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1f3), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the 4-bit control value for the PDBIAS in the ADRV9001 NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for which the control is being set.
 * @param value A 8-bit unsigned integer representing the value to be set for
 * the PDBIAS control.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_Pdbias4bitCtrl_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1f3), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 4-bit control value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved control
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_Pdbias4bitCtrl_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1f3), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PLL protection clear register for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the PLL protection clear register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PllProtClr_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xdc), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PLL protection clear value from the NVS register map for
 * a specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved PLL
 * protection clear value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PllProtClr_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xdc), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PLL protection clear required value in the ADRV9001 NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that indicates the desired setting for the PLL
 * protection clear.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PllProtClrReqd_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xdc), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PLL protection clear required status from a specific
 * register in the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PllProtClrReqd_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xdc), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the PLL protection event status from a specific register in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PllProtEvent_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xdc), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power threshold for the specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for which the power threshold is being set.
 * @param value An 8-bit unsigned integer representing the power threshold value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PowerThreshold_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a8), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power threshold value from the NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved power
 * threshold value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_PowerThreshold_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a8), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific reserved register value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be accessed.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the specified register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_Reserved0_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x132), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_Reserved0_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x132), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a reserved register value in the ADRV9001 device's NVS register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be accessed.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the specified register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_Reserved1_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x133), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_Reserved1_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x133), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a reserved register value in the ADRV9001 NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_Reserved2_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xf6), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific reserved register value from the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_Reserved2_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xf6), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a reserved register value in the ADRV9001 device's NVS register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the specified register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_Reserved3_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1ac), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_Reserved3_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1ac), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the loopback configuration for the transmit datapath in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * transmit register.
 * @param value A uint8_t value that specifies the loopback setting to be
 * applied.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_RxToTxDatapathLoopback_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b3), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the loopback configuration value from the TX register map
 * for a specified instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * TX register map.
 * @param value A pointer to a uint8_t variable where the retrieved loopback
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_RxToTxDatapathLoopback_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b3), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a software spare register value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns the status of the register write operation, indicating
 * success or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare0_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1b5), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare0_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1b5), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific software spare register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be accessed.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns the status of the register write operation, indicating
 * success or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare1_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1b6), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare1_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1b6), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific software spare register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare10_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1bf), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare10_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1bf), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a software spare register value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be accessed.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare11_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1c0), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare11_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1c0), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific software spare register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare12_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1c1), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare12_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1c1), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific software spare register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns the status of the register write operation, indicating
 * success or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare13_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1c2), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare13_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1c2), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Software Spare 14 register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be accessed.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare14_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1c3), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare14_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1c3), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific register in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the specified register.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare15_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1c4), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare15_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1c4), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Software Spare 16 register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be accessed.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare16_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1c5), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare16_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1c5), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific register in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the specified register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare17_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1c6), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare17_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1c6), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific register in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the specified register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare18_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1c7), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare18_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1c7), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific register in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the specified register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare19_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1c8), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare19_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1c8), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a software spare register value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare2_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1b7), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare2_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1b7), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific software spare register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare3_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1b8), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare3_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1b8), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Software Spare 4 register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be accessed.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare4_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1b9), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare4_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1b9), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific software spare register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be accessed.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare5_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1ba), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare5_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1ba), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific software spare register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare6_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1bb), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare6_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1bb), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific software spare register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare7_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1bc), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare7_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1bc), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Software Spare 8 register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be accessed.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare8_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1bd), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare8_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1bd), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the Software Spare 9 register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register to be accessed.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare9_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1be), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SoftwareSpare9_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1be), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the serial enable field in the NVS register map for the specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that indicates the serial enable state to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SrlEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x87), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the serial enable value from a specific register for the
 * given instance of the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SrlEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x87), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SrlIrq_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x88), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the serial interrupt enable register for the specified instance
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SrlIrqEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x88), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the serial interrupt enable value from a specific register
 * for the given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SrlIrqEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x88), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the slew offset for the specified instance in the ADRV9001 NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to modify.
 * @param value An 8-bit unsigned integer representing the slew offset value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SrlSlewOffset_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x87), (value >> 0), 0x1e, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the serial slew offset value from a specific register for a
 * given instance of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for which the slew offset is being
 * retrieved.
 * @param value A pointer to a uint8_t variable where the retrieved slew offset
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SrlSlewOffset_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x87), &register_value, 0x1e, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the serial status from the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * serial status will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SrlStat_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x8a), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x8b), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the serial status enable field in the NVS register map for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to modify.
 * @param value A uint8_t value that indicates the status to be set, where the
 * least significant bit is used.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SrlStatEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x88), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the serial status enable value from a specific register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SrlStatEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x88), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the serial status mode in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the serial status mode.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SrlStatMode_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x88), (value >> 0), 0x6, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the serial status mode from a specific register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SrlStatMode_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x88), &register_value, 0x6, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the serial table selection for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SrlTableSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x87), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific value from a register in the ADRV9001 device's
 * NVS register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SrlTableSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x87), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software status register for the specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the software status register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SwStatus0_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x130), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the software status from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SwStatus0_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x130), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the software status register for the specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the software status register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SwStatus1_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x131), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the software status from a specific register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SwStatus1_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x131), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ARM0 enable state in the NVS register map for the specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value indicating the enable state to be set (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SysArm0Enable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12e), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SysArm0Enable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12e), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SysArm1Enable field in the NVS register map for the specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value to be written to the SysArm1Enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SysArm1Enable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12e), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_SysArm1Enable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12e), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the maximum attenuation index for the TDD ramp in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the maximum attenuation
 * index to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TddRampMaxAttenIndex_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xe9), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the maximum attenuation index from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved maximum
 * attenuation index will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TddRampMaxAttenIndex_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xe9), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TDD ramp step size in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the ramp step size to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TddRampStepSize_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe8), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the TDD ramp step size from a specific register for a given
 * device instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved ramp step
 * size will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TddRampStepSize_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe8), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TDD ramp wait duration bandwidth steps in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TddRampWaitDurationBwSteps_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe8), (value >> 0), 0xf0, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the TDD ramp wait duration bandwidth steps from a specified
 * register.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TddRampWaitDurationBwSteps_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe8), &register_value, 0xf0, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the transmission threshold for the ADRV9001 device by writing to
 * specific registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A 16-bit unsigned integer representing the threshold value to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_Threshold_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a7), (value >> 8), 0xf, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1a6), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the transmission threshold value from the NVS register map
 * for a specified instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * threshold value will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_Threshold_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a7), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1a6), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the threshold shift value in the NVS register map for a specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the threshold shift value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ThresholdShift_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a8), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the threshold shift value from a specific register for a
 * given instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for which the threshold shift is being
 * retrieved.
 * @param value A pointer to a uint8_t variable where the retrieved threshold
 * shift value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_ThresholdShift_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a8), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the NVS register map for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TpnxxSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf9), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TpnxxSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf9), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the QEC trim value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A 16-bit unsigned integer representing the trim value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfC1QecTrim_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xb8), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xb9), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the QEC trim value from the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved QEC
 * trim value will be stored.
 * @return Returns the status of the read operations, with a value of 0
 * indicating success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfC1QecTrim_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xb8), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xb9), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the QEC trim value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A 16-bit unsigned integer representing the QEC trim value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfC2QecTrim_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xba), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xbb), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the QEC trim value from the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved QEC
 * trim value will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfC2QecTrim_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xba), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xbb), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ABBF force clock enable configuration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfForceClockEnable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa2), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the TxAbbfForceClockEnable field from a
 * specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfForceClockEnable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa2), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the frequency calibration value for the AABB frequency
 * calibration register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the frequency calibration
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalAiFc_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xa5), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the frequency calibration value from a specific register for
 * the given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved frequency
 * calibration value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalAiFc_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xa5), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the frequency calibration value for the Tx ABBF in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx ABBF.
 * @param value An 8-bit unsigned integer representing the frequency calibration
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalAiQ_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xa6), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the frequency calibration value from a specific register for
 * the given instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved frequency
 * calibration value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalAiQ_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xa6), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the frequency calibration value for the AABB frequency
 * calibration register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the frequency calibration
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalAq_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xa7), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a frequency calibration value from a specific register for a
 * given device instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved frequency
 * calibration value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalAq_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xa7), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the frequency calibration value for the ADRV9001 transmitter.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated type representing the specific instance of the
 * transmitter register map.
 * @param value A 16-bit unsigned integer representing the frequency calibration
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalC1_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xb4), (value >> 2));
    if (0 != status) return status;

    status = adi_bf_hal_Field_Write(device, (instance + 0xb5), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the frequency calibration value from the specified register
 * of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * frequency calibration value will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalC1_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xb4), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Field_Read(device, (instance + 0xb5), &register_value, 0x3, 0x0);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the cutoff frequency for the Tx ABBF frequency calibration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value An 8-bit unsigned integer representing the cutoff frequency
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalC2Cutoff_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa3), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the C2 cutoff frequency calibration value from the ADRV9001
 * device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved cutoff
 * frequency value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalC2Cutoff_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa3), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration enable value for the Tx ABBF frequency
 * calibration in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value A uint8_t value that indicates the calibration enable setting to
 * be written.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalCalEnQCal_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa2), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific frequency calibration value from a device
 * register.
 *
 * @param device A pointer to the device context from which the register value
 * will be read.
 * @param instance An enumerated value representing the specific instance of the
 * register to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalCalEnQCal_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa2), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration multiplier for the ABBF frequency calibration in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the calibration
 * multiplier value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalCalMultpass_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa2), (value >> 0), 0x18, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific frequency calibration value from a device's
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalCalMultpass_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa2), &register_value, 0x18, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the frequency calibration value for the specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the frequency calibration
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalFFc_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xa8), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a frequency calibration value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved frequency
 * calibration value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalFFc_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xa8), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ABBF frequency calibration flow register values for a
 * specified instance of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A 16-bit unsigned integer representing the frequency calibration
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalFLow_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xaa), (value >> 8), 0x7, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xa9), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the frequency calibration value from the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * frequency calibration value will be stored.
 * @return Returns the status of the read operations, indicating success (0) or
 * an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalFLow_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xaa), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xa9), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the frequency calibration value for the ADRV9001 transmitter.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated type representing the specific instance of the
 * transmitter register map.
 * @param value A 16-bit unsigned integer representing the frequency calibration
 * value to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalFQ_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xaa), (value >> 8), 0x70, 0x4);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xab), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the frequency calibration value from the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * frequency calibration value will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalFQ_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xaa), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xab), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the frequency calibration filter time in the ADRV9001 device's
 * transmit register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * transmit register.
 * @param value An 8-bit unsigned integer representing the filter time value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalFiltertime_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa3), (value >> 0), 0x38, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the filter time value from a specific register for the given
 * instance of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved filter time
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalFiltertime_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa3), &register_value, 0x38, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the frequency calibration value for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the frequency calibration
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalGentle_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa2), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific frequency calibration value from a device's
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved frequency
 * calibration value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalGentle_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa2), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO enable value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalNcoEnable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xac), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO enable status from a specific register for the given
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalNcoEnable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xac), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO I frequency calibration value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated type representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer representing the frequency calibration
 * value to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalNcoI_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xae), (value >> 16), 0xf, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xaf), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xb0), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO I frequency calibration value from the specified
 * device instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * frequency calibration value will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalNcoI_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xae), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xaf), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xb0), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO Q frequency calibration value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated type representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer representing the frequency calibration
 * value to be set.
 * @return Returns the status of the last write operation, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalNcoQ_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xb1), (value >> 16), 0xf, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xb2), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xb3), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO Q frequency calibration value from the specified
 * device instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * frequency calibration value will be stored.
 * @return Returns the status of the last read operation, which indicates
 * success (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalNcoQ_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xb1), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xb2), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xb3), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the frequency calibration offset from a specific register
 * for a given device instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved frequency
 * calibration offset will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalOffset_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xad), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the force power-up configuration for the Tx ABBF frequency
 * calibration peak detector.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value A uint8_t value that specifies the power-up configuration to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalPkdetForcePowerup_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xac), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the frequency calibration peak detector force power-up value
 * from a specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalPkdetForcePowerup_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xac), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx ABBF frequency calibration peak detector latch value in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the peak detector latch.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalPkdetLatch_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xac), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the frequency calibration peak detection latch value from a
 * specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved latch value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalPkdetLatch_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xac), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the frequency calibration peak detection output from a
 * specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalPkdetOut_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xac), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx ABBF frequency calibration peak detection override value
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx path.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the peak detection override.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalPkdetOverride_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xac), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the frequency calibration peak detection override value from
 * a specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalPkdetOverride_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xac), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxAbbf frequency calibration peak detector reset value in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalPkdetReset_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xac), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the frequency calibration peak detection reset value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalPkdetReset_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xac), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the reset time for the Tx ABBF frequency calibration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value An 8-bit unsigned integer representing the reset time value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalResettime_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa4), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reset time value for the Tx ABBF frequency calibration
 * from a specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved reset time
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalResettime_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa4), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ABBF frequency calibration settle time in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the settle time value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalSettletime_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa3), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the frequency calibration settle time from a specific
 * register for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved settle time
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalSettletime_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa3), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the frequency calibration trim value for the transmitter in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated type representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A 16-bit unsigned integer representing the frequency calibration
 * trim value to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalTrimq_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xb6), (value >> 2));
    if (0 != status) return status;

    status = adi_bf_hal_Field_Write(device, (instance + 0xb7), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the frequency calibration trim value from the specified
 * register of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * frequency calibration trim value will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfFreqcalTrimq_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xb6), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Field_Read(device, (instance + 0xb7), &register_value, 0x3, 0x0);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO2 I output value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfNco2UseIOut_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x94), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided output variable.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAbbfNco2UseIOut_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x94), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable field for the Tx Algorithm Group 10 in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value A uint8_t value that indicates the clock enable state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup10ClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9c), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock enable status for Tx Algorithm Group 10 from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup10ClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9c), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable configuration for Tx Algorithm Group 11 in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for Tx.
 * @param value A 8-bit unsigned integer representing the clock enable value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup11ClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9c), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock enable status for Tx Algorithm Group 11 from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx algorithm.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup11ClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9c), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable state for the Tx Algorithm Group 1 in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value A uint8_t value indicating the desired clock enable state (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup1ClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9b), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock enable status for the Tx Algorithm Group 1 from
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup1ClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9b), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable field for the Tx Algorithm Group 2 in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value A uint8_t value that indicates the clock enable state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup2ClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9b), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock enable status for the TxAlgGroup2 configuration
 * from the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx algorithm.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup2ClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9b), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the Tx Algorithm Group 2 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup2ClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9d), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value from a specific register for the
 * given instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup2ClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9d), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable configuration for the Tx Algorithm Group 3 in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value A 8-bit unsigned integer representing the clock enable value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup3ClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9b), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock enable status for the Tx Algorithm Group 3 from
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup3ClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9b), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the Tx Algorithm Group 3 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup3ClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9d), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value for the Tx Algorithm Group 3 from
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup3ClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9d), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable configuration for the Tx Algorithm Group 4 in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value An 8-bit unsigned integer representing the clock enable value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup4ClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9b), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock enable status for Tx Algorithm Group 4 from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for Tx.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup4ClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9b), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the Tx Algorithm Group 4 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup4ClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9e), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value from a specific register for the
 * given instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup4ClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9e), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable configuration for the Tx Algorithm Group 5 in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value A 8-bit unsigned integer representing the clock enable value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup5ClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9b), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock enable status for Tx Algorithm Group 5 from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup5ClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9b), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the Tx Algorithm Group 5 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup5ClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9e), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value for the Tx Algorithm Group 5 from
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup5ClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9e), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable configuration for the Tx Algorithm Group 6 in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value A 8-bit unsigned integer representing the clock enable value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup6ClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9b), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock enable status from a specific register for the
 * given instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup6ClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9b), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the Tx Algorithm Group 6 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup6ClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9f), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value from a specific register for the
 * given instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup6ClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9f), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable configuration for Tx Algorithm Group 7 in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for Tx.
 * @param value A 8-bit unsigned integer representing the clock enable value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup7ClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9b), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock enable status for Tx Algorithm Group 7 from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for Tx.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup7ClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9b), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for Tx Algorithm Group 7 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for Tx.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup7ClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9f), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value from a specific register for the
 * given instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup7ClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9f), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable field for Tx Algorithm Group 8 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for Tx.
 * @param value A 8-bit unsigned integer that specifies the value to be written
 * to the clock enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup8ClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9b), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock enable status for Tx Algorithm Group 8 from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx algorithm.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup8ClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9b), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for Tx Algorithm Group 8 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for Tx.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup8ClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa0), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value for Tx Algorithm Group 8 from the
 * NVS register map.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup8ClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa0), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable field for the Tx Algorithm Group 9 in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value A 1-bit value indicating whether to enable (1) or disable (0)
 * the clock.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup9ClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9c), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock enable status from a specific register for the
 * given instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup9ClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9c), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the Tx Algorithm Group 9 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup9ClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa0), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgGroup9ClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa0), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx Algorithm Mux 401B selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux401BSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x92), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux401BSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x92), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the NVS register map for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux401CSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x92), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux401CSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x92), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx Algorithm Mux 401 selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux401Sel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x92), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux401Sel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x92), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 register map for
 * the transmit algorithm.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map to be modified.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux402ANBDPDI0Sel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x93), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param instance An enumerated type indicating the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux402ANBDPDI0Sel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x93), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 register map for
 * the transmit algorithm multiplexer.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmit path.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux402ATB2Sel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x93), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux402ATB2Sel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x93), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx Algorithm Mux 402 BTA selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux402BTASel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x93), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux402BTASel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x93), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 NVS register map
 * for the Tx algorithm multiplexer.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx algorithm.
 * @param value An 8-bit unsigned integer that represents the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux402BTCSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x93), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux402BTCSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x93), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map to be modified.
 * @param value An 8-bit unsigned integer that represents the value to be set in
 * the specified register field.
 * @return Returns an integer status code indicating the success or failure of
 * the field write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux402CPNAdderCSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x93), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux402CPNAdderCSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x93), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DPD active selection for the specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux402DpdActSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x93), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated type indicating the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux402DpdActSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x93), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the NVS register map for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux402From401Sel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x93), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux402From401Sel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x93), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 register map for
 * the transmit algorithm.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value An 8-bit unsigned integer that represents the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux403BMagCompfir13Sel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x94), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific bit field value from a hardware register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param instance An enumerated type indicating the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux403BMagCompfir13Sel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x94), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux403From402cSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x94), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific bit field value from a hardware register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux403From402cSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x94), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the QEC selection value in the ADRV9001 register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the QEC selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux403TxlolQecSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x94), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux403TxlolQecSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x94), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the NVS register map for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux404TB4Sel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x94), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux404TB4Sel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x94), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the NVS register map for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux405ASel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x94), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated type indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux405ASel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x94), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO2 selection value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the NCO2 selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux406Nco2Sel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x94), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO2 selection value from a specific register for a
 * given instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved NCO2
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux406Nco2Sel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x94), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FIFO A selection for the Tx algorithm multiplexer in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx algorithm.
 * @param value A uint8_t value that specifies the selection for FIFO A.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux407AFifoASel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x95), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux407AFifoASel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x95), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FIFO B selection for the Tx algorithm multiplexer in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx algorithm.
 * @param value A uint8_t value that specifies the FIFO B selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux407AFifoBSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x95), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux407AFifoBSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x95), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FIFO A selection for the Tx algorithm multiplexer in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx algorithm.
 * @param value An 8-bit unsigned integer that specifies the selection value for
 * FIFO A.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux407BFifoASel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x95), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux407BFifoASel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x95), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FIFO B selection for the specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the FIFO B selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux407BFifoBSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x95), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux407BFifoBSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x95), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map to be modified.
 * @param value An 8-bit unsigned integer that represents the value to be set in
 * the specified register field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux407CFifoBSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x95), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux407CFifoBSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x95), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx Algorithm Mux 407 selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux407Sel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x95), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux407Sel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x95), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 register map for
 * the Tx algorithm multiplexer.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx algorithm.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux408ANcoASel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x96), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux408ANcoASel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x96), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 register map for
 * the transmit algorithm.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmit algorithm.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux408ANcoBSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x96), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux408ANcoBSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x96), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO A selection for the Tx algorithm multiplexer in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx algorithm.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the NCO A selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux408BNcoASel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x96), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux408BNcoASel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x96), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the NVS register map for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux408BNcoBSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x96), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux408BNcoBSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x96), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO A selection for the Tx algorithm multiplexer in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx path.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux408CNcoASel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x96), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux408CNcoASel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x96), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx Algorithm Mux 409A selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux409ASel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x96), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux409ASel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x96), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx Algorithm Mux 409B selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux409BSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x96), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux409BSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x96), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx Algorithm Mux 410BTG selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A uint8_t value representing the selection to be set for the Tx
 * Algorithm Mux.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux410BTGSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x97), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated type indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux410BTGSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x97), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx Algorithm Mux 410 selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux410Sel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x97), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated type indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux410Sel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x97), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the serial selection for the Tx algorithm multiplexer in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx path.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux411SrlSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x97), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux411SrlSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x97), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx Algorithm Mux 412 Serial Select field in the NVS register
 * map for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux412SrlSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x97), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated type indicating the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux412SrlSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x97), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx Algorithm Mux 413 selection in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux413Sel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x97), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux413Sel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x97), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx Algorithm Mux 414 selection in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux414Sel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x97), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated type indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux414Sel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x97), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx Algorithm Mux 415 from 410B selection in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux415From410BSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x97), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux415From410BSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x97), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx Algorithm Mux 415 Serial Select field in the NVS register
 * map for the specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux415SrlSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x97), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux415SrlSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x97), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 register map for
 * the transmit algorithm multiplexer.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmit path.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux416ASel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d4), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux416ASel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d4), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of a specific field in the ADRV9001 NVS register map
 * for the transmit algorithm multiplexer.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmit algorithm.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux416BSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d4), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux416BSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d4), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx Algorithm Mux 417 selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux417Sel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d4), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux417Sel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d4), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx Algorithm Mux 418 selection in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux418Sel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d4), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated type indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgMux418Sel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d4), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable field for the Twin FIR A algorithm in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A 8-bit unsigned integer that indicates the value to be written
 * to the clock enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgObsTwinFirAClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x98), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgObsTwinFirAClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x98), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Twin FIR B clock enable field in the ADRV9001 NVS register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgObsTwinFirBClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x98), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated type indicating the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgObsTwinFirBClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x98), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the observation source selection for the Tx algorithm in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx algorithm.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgRxmux301ObsSourceSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x91), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgRxmux301ObsSourceSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x91), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the observation source selection for the RXMUX in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgRxmux302ObsSourceSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x91), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgRxmux302ObsSourceSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x91), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock enable state for the Twin FIR A algorithm in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A 1-bit value indicating whether to enable (1) or disable (0)
 * the clock.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgTwinFirAClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x98), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field for the Twin FIR A
 * clock enable setting in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgTwinFirAClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x98), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Twin FIR B clock enable field in the ADRV9001 register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A uint8_t value that indicates the desired state (enabled or
 * disabled) for the Twin FIR B clock.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgTwinFirBClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x98), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAlgTwinFirBClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x98), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the transmit attenuation configuration for a specified instance
 * of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the attenuation value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenConfig_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xda), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the transmit attenuation configuration value from a
 * specified register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A pointer to a uint8_t variable where the retrieved attenuation
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenConfig_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xda), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Reads the digital attenuation value from the ADRV9001 register map.
 *
 * @param device A pointer to the device structure used for communication with
 * the ADRV9001.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the read
 * attenuation value will be stored.
 * @return Returns the status of the read operations, indicating success (0) or
 * an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenDigitalRead_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf1), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xf0), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the ECC error address from the transmit attenuator register
 * of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmit attenuator.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved ECC
 * error address will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenEccErrAddr_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d1), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1d2), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the error clear value for the transmit attenuator in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmit attenuator.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the error clear field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenEccErrClr_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d1), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ECC error clear value from the specified register for
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved ECC error
 * clear value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenEccErrClr_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d1), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the ECC error flag value from a specific register for the
 * given instance of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved ECC error
 * flag value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenEccErrFlag_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d1), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ECC error interrupt selection for the Tx attenuation register
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx attenuation.
 * @param value A uint8_t value that specifies the interrupt selection for ECC
 * errors.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenEccErrIrqSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d1), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ECC error interrupt selection value from the ADRV9001
 * device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenEccErrIrqSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d1), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the analog delay values for the transmit attenuator in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * transmit attenuator.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the analog delays.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenForceAnalogDelays_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xdb), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the analog delay value from a specific register for a given
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved analog delay
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenForceAnalogDelays_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xdb), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the analog delay configuration for the transmit attenuator in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmit path.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenForceAnalogDelaysOffNotOn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xdb), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the analog delay setting from a specific register for a
 * given instance of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenForceAnalogDelaysOffNotOn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xdb), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the digital attenuation value for the specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the digital attenuation
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenForceDigital_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe2), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the digital attenuation value from a specific register for
 * the given instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved attenuation
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenForceDigital_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe2), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the transmit attenuation force high-pass filter value in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the attenuation value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenForceHp_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe3), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the transmit attenuation force high-pass value from a
 * specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved attenuation
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenForceHp_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe3), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the high-pass latency override value in the ADRV9001
 * transceiver's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * transceiver.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the high-pass latency override.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenHpLatenOverride_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xdc), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the high power latency attenuation override value from a
 * specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved attenuation
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenHpLatenOverride_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xdc), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Reads the high precision transmit attenuation value from a specific
 * register in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmit path.
 * @param value A pointer to a uint8_t variable where the read attenuation value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenHpRead_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xef), &register_value, 0xfc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the high-pass reference attenuation value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the attenuation value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenHpRef_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xec), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the high-pass reference attenuation value from the specified
 * register for a given device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved attenuation
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenHpRef_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xec), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the transmit attenuation mode for the specified instance of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the attenuation value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenMode_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xda), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the transmit attenuation mode from the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A pointer to a uint8_t variable where the retrieved attenuation
 * mode value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenMode_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xda), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the transmit attenuation offset for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * transmit register map.
 * @param value An 8-bit unsigned integer representing the attenuation offset
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenOffset_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe1), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the transmit attenuation offset value from a specified
 * register for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map for which the attenuation offset is being
 * retrieved.
 * @param value A pointer to a uint8_t variable where the retrieved attenuation
 * offset value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenOffset_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe1), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx Attenuation QEC LOL update enable field in the ADRV9001
 * device's register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx attenuation.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenQeclolUpdEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xdb), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx Attenuation QEC LOL Update Enable value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenQeclolUpdEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xdb), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ECC disable value in the TX attenuation table of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * TX attenuation table.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * ECC disable.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenTableEccDisable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xdc), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ECC disable value from the Tx attenuation table for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * Tx attenuation table.
 * @param value A pointer to a uint8_t variable where the retrieved ECC disable
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenTableEccDisable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xdc), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PLL lock mask for the specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value representing the PLL lock mask to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenTableRf1PllLockMask_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xed), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PLL lock mask value from a specific register for a given
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved PLL lock
 * mask value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenTableRf1PllLockMask_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xed), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the RF to PLL lock mask value in the ADRV9001 device's transmit
 * attenuation table.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * transmit attenuation table.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the RF to PLL lock mask.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenTableRf2PllLockMask_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xed), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the RF to PLL lock mask value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenTableRf2PllLockMask_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xed), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the transmission attenuation value in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A 16-bit unsigned integer representing the attenuation value to
 * be set.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any write operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenuation_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xde), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xdd), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the transmission attenuation value from the ADRV9001
 * device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * attenuation value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenuation_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xde), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xdd), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the transmission attenuation value for a specified instance in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A 16-bit unsigned integer representing the attenuation value to
 * be set.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any of the write operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenuationB_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe0), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xdf), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx attenuation value from the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for Tx.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * attenuation value will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenuationB_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe0), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xdf), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the early delay counter for analog transmission attenuation in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the early delay counter.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenuationEarlyDelayCounterForAnalog_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xea), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx attenuation early delay counter value from a
 * specified register.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * Tx register.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenuationEarlyDelayCounterForAnalog_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xea), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the late delay counter for analog transmission attenuation in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the attenuation value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenuationLateDelayCounterForAnalog_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xeb), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx Attenuation Late Delay Counter for Analog from a
 * specified register.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the register read operation, indicating success
 * or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenuationLateDelayCounterForAnalog_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xeb), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the transmission attenuation value in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated type indicating the specific instance of the
 * NVS register map for transmission.
 * @param value A 16-bit unsigned integer representing the attenuation value to
 * be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenuationRead_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xef), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xee), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Reads the transmission attenuation value from the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A pointer to a 16-bit unsigned integer where the read
 * attenuation value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenuationRead_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xef), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xee), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx attenuation table gain FIFO reset value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenuationTableGainFifoReset_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ee), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx Attenuation Table Gain FIFO reset value from a
 * specified register.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * Tx attenuation table.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenuationTableGainFifoReset_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ee), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the transmission attenuation value in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * transmission register.
 * @param value An 8-bit unsigned integer representing the attenuation value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenuationTableReset_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ee), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx attenuation value from the NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved attenuation
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxAttenuationTableReset_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ee), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the BBF tuner calibration start value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A uint8_t value that indicates the calibration start setting.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxBbfTunerCalStart_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa2), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the tuner calibration value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved calibration
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxBbfTunerCalStart_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa2), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration multiplexer selection for the specified instance
 * in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the calibration multiplexer.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxCalMuxSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5a), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the TxCalMuxSel value from the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * Tx calibration multiplexer.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxCalMuxSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5a), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock generator divider value in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A 16-bit unsigned integer representing the divider value to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxClkgenCssiDivValue_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1a), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x19), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the TxClkgen CSSI divider value from the specified register
 * map instance.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * divider value will be stored.
 * @return Returns the status of the last register read operation, indicating
 * success or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxClkgenCssiDivValue_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1a), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x19), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the load divider for the transmit clock generator in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the load divider.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxClkgenCssiLoadDivider_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x18), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the load divider value from the Tx clock generator register
 * for a specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved load divider
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxClkgenCssiLoadDivider_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x18), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the CSSI enable field in the ADRV9001 NVS register map for a
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that indicates the enable state to be set for
 * the CSSI.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxCssiEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2d), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxCssiEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2d), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the zero selection value for the transmit DAC output in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmit path.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the zero selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDacOutIZeroSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2a), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the Tx DAC output I zero selection from a
 * specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDacOutIZeroSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2a), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx DAC output Q zero selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx path.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDacOutQZeroSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2a), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the Tx DAC output Q zero selection from a
 * specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDacOutQZeroSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2a), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx Data Ramp Down on PLL unlock configuration for a specified
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDataRampDownOnPllUnlock_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xed), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx Data Ramp Down value from the PLL unlock register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDataRampDownOnPllUnlock_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xed), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the input selection for the Tx datapath of the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx datapath.
 * @param value A uint8_t value that specifies the input selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDatapathIInputZeroSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2a), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDatapathIInputZeroSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2a), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx datapath I-only enable configuration for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx datapath.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * I-only configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDatapathIOnlyEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2f), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to be accessed.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDatapathIOnlyEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2f), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Q input zero selection for the transmit datapath in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmit datapath.
 * @param value A uint8_t value that specifies the selection for the Q input
 * zero.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDatapathQInputZeroSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2a), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDatapathQInputZeroSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2a), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the transmit digital attenuator selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the desired attenuation
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpAttenSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5a), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx Digital Pre-Attenuation Selection value from a
 * specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * Tx register.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpAttenSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5a), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the frequency deviation mapping for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpFreqDevMapper47En_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2e), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific frequency deviation value from a register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved frequency
 * deviation value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpFreqDevMapper47En_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2e), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the global clock enable reset for the specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A uint8_t value that indicates the desired state to set for the
 * global clock enable reset.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpGlobalClkEnableReset_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x50), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the TxDpGlobalClkEnableReset field from a
 * specific register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpGlobalClkEnableReset_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x50), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the global reset value for the transmit data path in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmit path.
 * @param value A 8-bit unsigned integer representing the value to be written to
 * the global reset field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpGlobalReset_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x50), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the global reset status from the Tx DP register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * Tx DP register.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpGlobalReset_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x50), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpInt212En field in the NVS register map for the specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt212En_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2b), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt212En_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2b), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpInt214En field in the NVS register map for the specified
 * instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt214En_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2b), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt214En_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2b), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpInt216En field in the NVS register map for the specified
 * instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt216En_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2b), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt216En_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2b), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpInt218En field in the NVS register map for the specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt218En_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2b), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt218En_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2b), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpInt220En field in the NVS register map for the specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value to be written to the TxDpInt220En field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt220En_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2c), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt220En_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2c), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpInt2221En field in the NVS register map for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the TxDpInt2221En field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt2221En_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2c), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt2221En_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2c), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpInt222En field in the NVS register map for the specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value to be written to the TxDpInt222En field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt222En_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2c), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided variable.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt222En_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2c), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpInt224En field in the NVS register map for the specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the TxDpInt224En field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt224En_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2c), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt224En_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2c), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpInt226En field in the NVS register map for the specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the TxDpInt226En field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt226En_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2c), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumeration value representing the specific instance of
 * the register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt226En_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2c), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpInt228En field in the NVS register map for the specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt228En_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2c), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt228En_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2c), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpInt230En field in the NVS register map for the specified
 * instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt230En_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2c), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt230En_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2c), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpInt236En field in the NVS register map for the specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value to be written to the TxDpInt236En field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt236En_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2d), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device context used for the hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt236En_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2d), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpInt238En field in the NVS register map for the specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value to be written to the TxDpInt238En field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt238En_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2d), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific bit field value from a register and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt238En_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2d), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpInt28En field in the NVS register map for the specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt28En_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2b), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt28En_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2b), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpInt310En field in the NVS register map for the specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the TxDpInt310En field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt310En_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2b), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt310En_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2b), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpInt340En field in the NVS register map for the specified
 * instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt340En_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2d), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated type indicating the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t where the retrieved register value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt340En_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2d), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpInt3441En field in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt3441En_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2d), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a hardware register and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpInt3441En_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2d), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDp modem mode in the ADRV9001 device's NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the TxDp.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the modem mode.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpModemMode_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2f), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the modem mode value from a specific register for the given
 * instance of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved modem mode
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpModemMode_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2f), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the modem mode division value in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the division value to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpModemModeDivValue_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x30), (value >> 8), 0x7, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x31), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the modem mode division value from the specified register
 * map instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * division value will be stored.
 * @return Returns the status of the read operations, with the modem mode
 * division value stored in the provided pointer.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpModemModeDivValue_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x30), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x31), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpNbdpd0En field in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 8-bit unsigned integer that represents the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpNbdpd0En_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x52), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific bit field value from a hardware register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpNbdpd0En_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x52), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpNbdpd1En field in the NVS register map for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value to be written to the TxDpNbdpd1En field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpNbdpd1En_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x52), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific bit field value from a hardware register and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpNbdpd1En_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x52), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpNbdpd2En field in the NVS register map for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 8-bit unsigned integer that represents the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpNbdpd2En_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x52), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpNbdpd2En_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x52), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO attenuation phase offset in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the value to be set for
 * the NCO attenuation phase offset.
 * @return Returns an integer status code indicating the success or failure of
 * the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpNcoAttenPhaseOffset_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf7), (value >> 8), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xf8), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the phase offset value from the NCO attenuation register for
 * a specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved phase
 * offset value will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpNcoAttenPhaseOffset_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf7), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xf8), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpSinc242 enable field in the ADRV9001 register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * TxDpSinc242 feature.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpSinc242En_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2d), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpSinc242En_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2d), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpSinc344 enable/disable configuration in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A uint8_t value that indicates the enable (1) or disable (0)
 * state for the TxDpSinc344 feature.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpSinc344En_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2d), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpSinc344En_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2d), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the spectral inversion configuration for the TxDp in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the TxDp.
 * @param value A uint8_t value indicating the spectral inversion setting to be
 * applied.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpSpectralInvertI_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b4), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the spectral inversion setting from a specific register for
 * a given instance of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved spectral
 * inversion value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpSpectralInvertI_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b4), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the spectral inversion configuration for the TxDp in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the TxDp.
 * @param value A uint8_t value that indicates the spectral inversion setting to
 * be applied.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpSpectralInvertQ_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b4), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the spectral inversion value from a specific register for a
 * given instance of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved spectral
 * inversion value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpSpectralInvertQ_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b4), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SPI interface clock enable bit in the ADRV9001 NVS register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that indicates the desired state of the clock
 * enable bit (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpSpiIntfClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5c), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SPI interface clock enable status from a specific
 * register for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpSpiIntfClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5c), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpTpfirI3Reset field in the ADRV9001 register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the TxDpTpfirI3Reset field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpTpfirI3Reset_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x50), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to be accessed.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpTpfirI3Reset_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x50), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpTpfirQ5Reset field in the NVS register map for the
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpTpfirQ5Reset_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x50), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated type indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpTpfirQ5Reset_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x50), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the division factor for the TxDpTscic32 register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the division factor to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpTscic32DivFactor_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2f), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the TxDpTscic32 division factor from the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved division
 * factor will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpTscic32DivFactor_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2f), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpTscic32En field in the NVS register map for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpTscic32En_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2c), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific 8-bit value from a register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpTscic32En_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2c), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpTscic32 reset value in the ADRV9001 device's NVS register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpTscic32Reset_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x50), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific 8-bit value from a register and stores it in the
 * provided pointer.
 *
 * @param device A pointer to the device context from which the register value
 * will be read.
 * @param instance An enumerated type indicating the specific instance of the
 * register to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpTscic32Reset_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x50), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ripple selection for the TxDpTscic32 register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the TxDpTscic32.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpTscic32RippleSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2f), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ripple selection value from a specific register for a
 * given instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved ripple
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpTscic32RippleSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2f), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the division factor for the TxDpTxPreproc2 register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the division factor to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpTxPreproc2DivFactor_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x33), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the division factor from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved division
 * factor will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpTxPreproc2DivFactor_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x33), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpTxPreproc2 enable field in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that indicates the enable state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpTxPreproc2En_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x32), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpTxPreproc2En_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x32), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpTxRound46En field in the NVS register map for the
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value to be written to the TxDpTxRound46En field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpTxRound46En_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2e), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a hardware register and
 * stores it in the provided pointer.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpTxRound46En_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2e), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the TxDpTxqec34 register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpTxqec34ClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x54), (value >> 0), 0xe, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value from a specific register for a
 * given instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpTxqec34ClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x54), &register_value, 0xe, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpTxqec34En field in the NVS register map for the specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value to be written to the TxDpTxqec34En field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpTxqec34En_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4f), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated type indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpTxqec34En_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4f), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpWbdpd0En field in the NVS register map for the specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 8-bit unsigned integer that represents the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpWbdpd0En_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x53), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpWbdpd0En_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x53), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpWbdpd1En field in the NVS register map for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value to be written to the TxDpWbdpd1En field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpWbdpd1En_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x53), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific bit field value from a register and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpWbdpd1En_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x53), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxDpWbdpd2En field in the NVS register map for the specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpWbdpd2En_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x53), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpWbdpd2En_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x53), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DPD data capture enable state in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A uint8_t value indicating the enable state for DPD data capture
 * (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpdDataCaptEnable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12d), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DPD data capture enable status from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpdDataCaptEnable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12d), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the DPD island RAM 0 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpdIslandRam0ClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19e), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value from the DPD island RAM 0 register
 * for a specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpdIslandRam0ClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19e), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the DPD island RAM in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpdIslandRam1ClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19e), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value from a specific register for the
 * DPD island RAM in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpdIslandRam1ClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19e), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the DPD island RAM in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpdIslandRam2ClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19e), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value from the DPD island RAM register
 * for a specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpdIslandRam2ClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19e), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the DPD island RAM 3 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpdIslandRam3ClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19e), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value from a specific register for the
 * DPD island RAM.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpdIslandRam3ClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19e), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the DPD island RAM in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpdIslandRam4ClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19e), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific clock selection value from a register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpdIslandRam4ClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19e), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the DPD island RAM 5 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpdIslandRam5ClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d3), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value from a specific register for the
 * DPD island RAM.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpdIslandRam5ClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d3), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the Tx DPD island RAM 6 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpdIslandRam6ClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d3), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific clock selection value from a register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpdIslandRam6ClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d3), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the DPD island RAM 7 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpdIslandRam7ClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d3), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock selection value from a specific register for the
 * DPD island RAM 7.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpdIslandRam7ClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d3), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the clock selection for the Tx DPD island RAM 8 in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value An 8-bit unsigned integer representing the clock selection value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpdIslandRam8ClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d3), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpdIslandRam8ClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d3), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DPD RAM clock selection in the ADRV9001 device's NVS register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A uint8_t value representing the clock selection to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpdRamClkSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x99), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDpdRamClkSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x99), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx DUC enable field in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value A 8-bit unsigned integer that indicates the value to set for the
 * Tx DUC enable field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDucEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6c), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDucEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6c), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DUC frequency tuning word in the ADRV9001 device's NVS
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value A 32-bit unsigned integer representing the frequency tuning word
 * to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDucFtw_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x64), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x65), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x66), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x67), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 32-bit frequency tuning word from a device's register map.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * frequency tuning word will be stored.
 * @return Returns the status of the last register read operation, where a
 * status of 0 indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDucFtw_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x64), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x65), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x66), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x67), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DUC frequency tuning offset in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A 16-bit unsigned integer representing the frequency tuning
 * offset to be set.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDucFtwOffset_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x68), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x69), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DUC frequency tuning offset from the specified register
 * map instance.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * offset value will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the register read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDucFtwOffset_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x68), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x69), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Updates the frequency tuning word in the TX DUC register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the TX.
 * @param value An 8-bit unsigned integer representing the new frequency tuning
 * word to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register update operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDucFtwUpdate_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6c), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the frequency tuning word from a specific register for the
 * given instance of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved frequency
 * tuning word will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxDucFtwUpdate_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6c), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the frequency deviation for the TX frequency mapper in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * TX frequency mapper.
 * @param value A 32-bit unsigned integer representing the frequency deviation
 * value to be set.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any of the write operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxFreqDevMapperMPLL_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x40), (value >> 16), 0x7f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x41), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x42), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the frequency deviation value from the specified register
 * map for the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * frequency deviation value will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxFreqDevMapperMPLL_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x40), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x41), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x42), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the transmit frequency deviation for a specific instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A 64-bit unsigned integer representing the frequency deviation
 * value to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxFreqDevMapperNch_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint64_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3b), (value >> 32), 0x7, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x3c), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x3d), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x3e), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x3f), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the frequency deviation value from the NVS register map for
 * a specified instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 64-bit integer where the retrieved frequency
 * deviation value will be stored.
 * @return Returns the status of the last read operation, with a value of 0
 * indicating success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxFreqDevMapperNch_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint64_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3b), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x3c), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x3d), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x3e), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x3f), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fractional deviation factor for the transmitter frequency
 * mapping in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * transmitter frequency mapping.
 * @param value A 32-bit unsigned integer representing the value to be set,
 * which is divided into three parts for different register writes.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxFreqDevMapperRrc2fracDevFac_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x38), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x39), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x3a), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief This function retrieves frequency deviation values from a device's
 * register and combines them into a single output value.
 *
 * @param device A pointer to the device context from which the registers will
 * be read.
 * @param instance An enumerated type indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a 32-bit unsigned integer where the combined
 * frequency deviation value will be stored.
 * @return The function returns the status of the last register read operation,
 * with the combined frequency deviation value stored in the location
 * pointed to by the 'value' parameter.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxFreqDevMapperRrc2fracDevFac_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x38), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x39), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x3a), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx frequency deviation mapper threshold in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * Tx frequency deviation mapper.
 * @param value A 32-bit unsigned integer representing the threshold value to be
 * set.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxFreqDevMapperThreshold_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x82), (value >> 16), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x81), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x80), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx frequency deviation mapper threshold value from the
 * device's register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * threshold value will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxFreqDevMapperThreshold_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x82), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x81), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x80), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SLR enable value for the specified TX fuse in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the TX.
 * @param value A 1-bit value indicating whether to enable (1) or disable (0)
 * the SLR.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxFuseTxSLREnable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x89), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxFuseTxSLREnable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x89), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the FIFO overflow gain change value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the gain change value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxGainChangeFifoOverflow_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xda), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the FIFO overflow status from the Tx gain change register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * Tx gain change register.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxGainChangeFifoOverflow_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xda), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx gain calibration pre-selection value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the Tx gain calibration pre-selection.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxGdcalPreSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5b), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxGdcalPreSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5b), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the NVS register map for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the specified field.
 * @return Returns an integer status code indicating the success or failure of
 * the field write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxIncrDecrWord_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe4), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated type indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxIncrDecrWord_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe4), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx I/Q demodulation enable field in the ADRV9001 register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A uint8_t value that indicates whether to enable or disable the
 * Tx I/Q demodulation.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxIqdmEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6c), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx I/Q demodulation enable status from a specific
 * register for the given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxIqdmEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6c), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx I/Q demodulation frequency deviation in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated type representing the specific instance of the
 * NVS register map for transmission.
 * @param value A 32-bit unsigned integer representing the frequency deviation
 * value to be set.
 * @return Returns the status of the last write operation, which indicates
 * success (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxIqdmFreqDev_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x5d), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x5e), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x5f), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx I/Q demodulation frequency deviation value from the
 * ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx path.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * frequency deviation value will be stored.
 * @return Returns the status of the last register read operation, where a
 * status of 0 indicates success and any non-zero value indicates an
 * error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxIqdmFreqDev_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x5d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x5e), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x5f), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx IQDM frequency offset in the ADRV9001 device by writing to
 * specific registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated type representing the specific instance of the
 * NVS register map for transmission.
 * @param value A 32-bit unsigned integer representing the frequency offset
 * value to be set.
 * @return Returns the status of the last register write operation, indicating
 * success (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxIqdmFreqOffset_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x60), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x61), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x62), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x63), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx I/Q demodulation frequency offset from the ADRV9001
 * device's register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * Tx register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * frequency offset will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero). The retrieved frequency offset is stored in
 * the variable pointed to by value.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxIqdmFreqOffset_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x60), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x61), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x62), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x63), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx I/Q demodulator scaler value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value A 16-bit unsigned integer representing the scaler value to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxIqdmScaler_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x6a), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x6b), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx Iqdm scaler value from the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * scaler value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the register read operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxIqdmScaler_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x6a), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x6b), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx I/Q DM threshold for a specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * Tx register map.
 * @param value A 32-bit unsigned integer representing the threshold value to be
 * set.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxIqdmThreshold_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x85), (value >> 16), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x84), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x83), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx Iqdm threshold value from the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * threshold value will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxIqdmThreshold_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x85), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x84), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x83), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the coarse correction value for the Tx Lo Delay in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * Tx register map.
 * @param value An 8-bit unsigned integer representing the coarse correction
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxLoDelayCoarseCorrI_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc1), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the coarse correction value for the Tx Lo Delay from the
 * specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved coarse
 * correction value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxLoDelayCoarseCorrI_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc1), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the coarse correction value for the Tx Lo Delay in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value An 8-bit unsigned integer representing the coarse correction
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxLoDelayCoarseCorrIB_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc2), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the coarse correction value for the Tx Lo Delay from the
 * specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * Tx register.
 * @param value A pointer to a uint8_t variable where the retrieved coarse
 * correction value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxLoDelayCoarseCorrIB_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc2), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the coarse correction value for the Tx Lo Delay in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value An 8-bit unsigned integer representing the coarse correction
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxLoDelayCoarseCorrQ_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc1), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the coarse correction value for the Tx Lo Delay from the
 * specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * Tx register.
 * @param value A pointer to a uint8_t variable where the retrieved coarse
 * correction value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxLoDelayCoarseCorrQ_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc1), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the coarse correction value for the Tx Lo Delay in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value An 8-bit unsigned integer representing the coarse correction
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxLoDelayCoarseCorrQB_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc2), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the coarse correction value for the Tx Lo Delay from the
 * specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved coarse
 * correction value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxLoDelayCoarseCorrQB_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc2), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the low delay correction DAC value in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A 16-bit unsigned integer representing the value to be set for
 * the low delay correction DAC.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxLoDelayCorrDac_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ab), (value >> 8), 0x7, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1aa), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the TxLoDelay correction DAC value from the specified device
 * instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved DAC
 * value will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxLoDelayCorrDac_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ab), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1aa), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fine correction DAC value for the TxLo delay in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated type representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A 16-bit unsigned integer representing the value to be set for
 * the fine correction DAC.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register and field write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxLoDelayFineCorrDac_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xbe), (value >> 3));
    if (0 != status) return status;

    status = adi_bf_hal_Field_Write(device, (instance + 0xbd), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the fine correction DAC value for the Tx low delay from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved DAC
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxLoDelayFineCorrDac_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xbe), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Field_Read(device, (instance + 0xbd), &register_value, 0x7, 0x0);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fine correction DAC value for the TxLo delay in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A 16-bit unsigned integer representing the value to be set for
 * the fine correction DAC.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register and field write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxLoDelayFineCorrDacB_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xc0), (value >> 3));
    if (0 != status) return status;

    status = adi_bf_hal_Field_Write(device, (instance + 0xbf), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the fine correction DAC value for the TxLo delay from the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved DAC
 * value will be stored.
 * @return Returns the status of the read operations, indicating success (0) or
 * an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxLoDelayFineCorrDacB_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xc0), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Field_Read(device, (instance + 0xbf), &register_value, 0x7, 0x0);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxLoDelay latch enable field in the ADRV9001 register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A uint8_t value that indicates the desired state for the
 * TxLoDelay latch enable.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxLoDelayLatchEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xbd), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the TxLoDelay latch enable status from a specific register
 * for the given device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type indicating the specific instance of the Tx
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved latch enable
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxLoDelayLatchEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xbd), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx LOL reset value in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value A uint8_t value that represents the reset value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxLolReset_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx LOL reset value from the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxLolReset_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx LOL selection value in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the Tx LOL selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxLolSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx LOL selection value from the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved Tx LOL
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxLolSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the LSSI enable field in the NVS register map for the specified
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * LSSI.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxLssiEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2d), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the LSSI enable status from the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved LSSI enable
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxLssiEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2d), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO frequency tuning word in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated type indicating the specific instance of the
 * NVS register map for transmission.
 * @param value A 32-bit unsigned integer representing the frequency tuning word
 * to be set.
 * @return Returns the status of the last write operation, where a zero
 * indicates success and a non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxNcoFtw_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x55), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x56), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x57), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x58), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO frequency tuning word from the device's register
 * map.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * frequency tuning word will be stored.
 * @return Returns the status of the last register read operation, where a
 * status of 0 indicates success and any non-zero value indicates an
 * error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxNcoFtw_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x55), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x56), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x57), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x58), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Updates the NCO frequency tuning word in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the frequency tuning word
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register update operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxNcoFtwUpdate_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5a), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the NCO frequency tuning word from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved frequency
 * tuning word will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxNcoFtwUpdate_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5a), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO MCS adjustment amplitude in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the adjustment amplitude
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxNcoMcsAdjAmp_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x59), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the adjusted amplitude value from the NCO MCS register for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved amplitude
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxNcoMcsAdjAmp_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x59), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO MCS adjustment amplitude for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for which the adjustment is being set.
 * @param value An 8-bit unsigned integer representing the adjustment amplitude
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxNcoMcsAdjAmp1_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5b), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the adjusted amplitude value from a specific register for a
 * given instance of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved amplitude
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxNcoMcsAdjAmp1_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5b), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the NCO MCS adjustment amplitude for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for which the adjustment is being set.
 * @param value An 8-bit unsigned integer representing the adjustment amplitude
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxNcoMcsAdjAmp2_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x5b), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the adjusted amplitude value from a specific register for
 * the given instance of the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved amplitude
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxNcoMcsAdjAmp2_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x5b), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the transmit state of the ADRV9001 device by writing a specified
 * value to a register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A uint8_t value indicating the desired transmit state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxOn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b2), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the transmission status from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved transmission
 * status will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxOn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b2), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Clears the Tx PA protection error status in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A uint8_t value that is used to clear the protection error
 * status.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxPaProtectionErrorClear_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa1), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx PA protection error status from a specific register.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxPaProtectionErrorClear_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa1), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR 4x division factor for the specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the PFIR 4x division.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxPfir4xDiv4p5_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x37), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a device register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device context from which the register value
 * will be read.
 * @param instance An enumerated type indicating the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxPfir4xDiv4p5_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x37), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR 4x divider value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map to be modified.
 * @param value A 16-bit unsigned integer representing the PFIR 4x divider value
 * to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxPfir4xDivValue_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x35), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x36), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR 4x divider value from the specified register of the
 * device.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * divider value will be stored.
 * @return Returns the status of the last register read operation, with *value
 * containing the combined PFIR 4x divider value if successful.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxPfir4xDivValue_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x35), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x36), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR I3 configuration value in the ADRV9001 device without
 * using a global reset.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the PFIR I3 configuration.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxPfirI3DontUseGlobalReset_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x50), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxPfirI3DontUseGlobalReset_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x50), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR I enable field in the ADRV9001 register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A uint8_t value that indicates whether to enable or disable the
 * PFIR I.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxPfirIEnable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x34), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR I enable status from a specific register for a
 * given device instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxPfirIEnable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x34), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR Q5 register value for a specified instance without using
 * a global reset.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the PFIR Q5 register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxPfirQ5DontUseGlobalReset_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x50), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxPfirQ5DontUseGlobalReset_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x50), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PFIR Q enable configuration for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A uint8_t value that indicates the enable/disable state for the
 * PFIR Q.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxPfirQEnable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x34), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PFIR Q enable value from the specified register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved PFIR Q
 * enable value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxPfirQEnable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x34), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the transmission preprocessing multiplexer selection in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the multiplexer selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxPreprocMuxSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x32), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxPreprocMuxSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x32), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output selection for the transmit preprocessor in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmit path.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxPreprocOutSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x32), (value >> 0), 0x60, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the output selection value from the transmit preprocessor
 * register for a specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * transmit preprocessor.
 * @param value A pointer to a uint8_t variable where the retrieved output
 * selection value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxPreprocOutSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x32), &register_value, 0x60, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the transmission preprocessing symbol 0 configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device context for the ADRV9001.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A 32-bit unsigned integer containing the value to be set in the
 * transmission preprocessing registers.
 * @return Returns the status of the last write operation, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxPreprocSym0_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x43), (value >> 16), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x44), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x45), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from a specific register map for the given
 * instance of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, which indicates
 * success (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxPreprocSym0_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x43), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x44), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x45), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the transmission preprocessing symbol 1 configuration in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device context for the ADRV9001.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A 32-bit unsigned integer representing the value to be set in
 * the transmission preprocessing registers.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxPreprocSym1_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x46), (value >> 16), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x47), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x48), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from a series of registers for a specified
 * instance of the device.
 *
 * @param device A pointer to the device context from which the registers will
 * be read.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit integer where the retrieved value will be
 * stored.
 * @return Returns the status of the last read operation, which indicates
 * success (0) or failure (non-zero). The retrieved 24-bit value is
 * stored in the location pointed to by the value parameter.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxPreprocSym1_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x46), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x47), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x48), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx preprocessing symbol 2 register values for a given device
 * instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * Tx preprocessing register.
 * @param value A 32-bit unsigned integer containing the value to be written to
 * the registers.
 * @return Returns the status of the last write operation, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxPreprocSym2_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x49), (value >> 16), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x4a), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x4b), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from a specific register map for the given
 * instance of the device.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the read operations, where a status of zero
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxPreprocSym2_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x49), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x4a), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x4b), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx preprocessing symbol 3 configuration in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for transmission.
 * @param value A 32-bit unsigned integer containing the value to be set in the
 * Tx preprocessing symbol 3 registers.
 * @return Returns the status of the last write operation, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxPreprocSym3_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x4c), (value >> 16), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x4d), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x4e), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from a specific register map for the given
 * instance of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, which indicates
 * success (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxPreprocSym3_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x4c), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x4d), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x4e), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the global clock enable reset value for a specified transmission
 * profile in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific transmission
 * profile instance.
 * @param value A 8-bit unsigned integer representing the value to be set for
 * the global clock enable reset.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxProfileDpGlobalClkEnableReset_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x50), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field from the device and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated type indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxProfileDpGlobalClkEnableReset_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x50), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SSI global clock enable/reset configuration for a specified
 * TX profile in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific TX profile
 * instance.
 * @param value A uint8_t value indicating the desired state for the SSI global
 * clock enable/reset.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxProfileSsiGlobalClkEnableReset_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1cc), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the SSI global clock enable reset value from a specific
 * register for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved clock enable
 * reset value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxProfileSsiGlobalClkEnableReset_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1cc), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the transmission pulse shaping mode in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value An 8-bit unsigned integer representing the pulse shaping mode to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxPulseShapingMode_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x32), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx pulse shaping mode from the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * Tx register.
 * @param value A pointer to a uint8_t variable where the retrieved pulse
 * shaping mode will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxPulseShapingMode_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x32), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the free-running clock enable bit in the NVS register map for the
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value that indicates whether to enable or disable the
 * free-running clock.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxSsiFreeRunningClkEn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1ef), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the Free Running Clock Enable field from the
 * specified register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxSsiFreeRunningClkEn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1ef), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the global reset state for the SSI in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A uint8_t value that indicates the reset state to be set (0 or
 * 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxSsiGlobalReset_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1f0), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the global reset status from the SSI register for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxSsiGlobalReset_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1f0), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SSI invert configuration for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to configure.
 * @param value A uint8_t value representing the SSI invert setting to apply.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxSsiIInvert_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d0), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the inverted SSI value from the specified register for a
 * given device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved inverted SSI
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxSsiIInvert_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d0), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SSI I-swap configuration for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map to be modified.
 * @param value A uint8_t value representing the new configuration to be set for
 * the I-swap.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxSsiISwap_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d0), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxSsiISwap_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d0), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SSI Q Invert configuration for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for which the configuration is being set.
 * @param value A uint8_t value representing the configuration to be written,
 * specifically the Q Invert setting.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxSsiQInvert_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d0), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the inverted SSI Q value from a specific register for a
 * given instance of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved inverted SSI
 * Q value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxSsiQInvert_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d0), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the SSI Q Swap configuration in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the ADRV9001.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxSsiQSwap_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d0), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxSsiQSwap_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d0), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx attenuation multiplier for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * Tx attenuation multiplier.
 * @param value A 16-bit unsigned integer representing the attenuation
 * multiplier value to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxattenMultiplierI_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x8c), (value >> 8), 0xf, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x8d), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx attenuation multiplier value from the specified
 * device instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * attenuation multiplier value will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxattenMultiplierI_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x8c), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x8d), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx attenuation multiplier for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * Tx register map.
 * @param value A 16-bit unsigned integer representing the attenuation
 * multiplier value to be set.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any operation fails.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxattenMultiplierQ_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x8e), (value >> 8), 0xf, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x8f), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx attenuation multiplier value from the specified
 * register for a given device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved Tx
 * attenuation multiplier value will be stored.
 * @return Returns the status of the read operations, indicating success (0) or
 * an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxattenMultiplierQ_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x8e), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x8f), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx attenuation multiplier selection in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx path.
 * @param value An 8-bit unsigned integer representing the value to set for the
 * Tx attenuation multiplier selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxattenMultiplierSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x90), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Tx attenuation multiplier selection value from a
 * specified register.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxattenMultiplierSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x90), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxTxchest bypass PN field in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxchestBypassPn_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6e), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated type indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxchestBypassPn_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6e), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxTxchestEnableA field in the NVS register map for the A
 * instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value to be written to the TxTxchestEnableA field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxchestEnableA_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6e), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxchestEnableA_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6e), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxTxchestEnableB field in the NVS register map for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A uint8_t value to be written to the TxTxchestEnableB field.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxchestEnableB_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6e), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register field from the device and
 * stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxchestEnableB_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6e), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx chest PN length in the ADRV9001 device by writing to
 * specific registers.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer representing the PN length to be set.
 * @return Returns the status of the last write operation, where 0 indicates
 * success and a non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxchestPnLength_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x79), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x7a), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x7b), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x7c), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the PN length value from the specified register map for a
 * given instance.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved PN
 * length value will be stored.
 * @return Returns the status of the last register read operation, where a
 * status of 0 indicates success and any non-zero value indicates an
 * error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxchestPnLength_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x79), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x7a), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x7b), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x7c), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the PN repeat value in the TX channel register map for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * TX channel.
 * @param value A 16-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxchestPnRepeat_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x7e), (value >> 8), 0x1, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x7f), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the TxTxchestPnRepeat value from the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the read operations, with a value of 0
 * indicating success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxchestPnRepeat_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x7e), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x7f), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxTxchestPnTapsI register values for a given device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A 32-bit unsigned integer containing the value to be split and
 * written to the registers.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxchestPnTapsI_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x75), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x76), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x77), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x78), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 32-bit value from a series of registers for a specified
 * instance in the ADRV9001 device.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last register read operation, where a value
 * of 0 indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxchestPnTapsI_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x75), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x76), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x77), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x78), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxTxchest position value for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer representing the value to be set in
 * the TxTxchest position.
 * @return Returns the status of the last write operation, indicating success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxchestPosValI_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6f), (value >> 16), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x70), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x71), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the TxChest position value from the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved
 * TxChest position value will be stored.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxchestPosValI_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6f), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x70), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x71), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxTxchest position value in the NVS register map for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 32-bit unsigned integer representing the value to be set in
 * the TxTxchest position.
 * @return Returns the status of the last write operation, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxchestPosValQ_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x72), (value >> 16), 0x3, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x73), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x74), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 24-bit value from a series of registers for a specified
 * instance of the device.
 *
 * @param device A pointer to the device context from which the registers will
 * be read.
 * @param instance An enumerated type indicating the specific instance of the
 * register map to access.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxchestPosValQ_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x72), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x73), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x74), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the transmit channel chest programming delay for the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmit channel.
 * @param value An 8-bit unsigned integer representing the programming delay
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxchestProgDly_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x7d), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the programmed delay value from a specific register for a
 * given instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved delay value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxchestProgDly_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x7d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxTxchest selection for a given instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that specifies the value to be written
 * to the TxTxchest selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxchestSelPnNot0_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6e), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific field value from a register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxchestSelPnNot0_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6e), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the QEC error value from the specified register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved QEC error
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxdigQecError_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x11), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the actuator bypass scaler value in the ADRV9001 device's
 * register.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to be modified.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxlolActuatorBypassScaler_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d6), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the actuator bypass scaler value from a specific register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved scaler value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxlolActuatorBypassScaler_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d6), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the actuator error status from a specific register for the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating the specific instance of the
 * NVS register map to access.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxlolActuatorError_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d7), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DC offset for the TxTxlol actuator filter in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A 16-bit unsigned integer representing the DC offset value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxlolActuatorFilterDcOffsetI_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1db), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1da), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DC offset value of the TxTxlol actuator filter from the
 * specified device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved DC
 * offset value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxlolActuatorFilterDcOffsetI_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1db), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1da), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DC offset for the TxTxlol actuator filter in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the DC offset value to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxlolActuatorFilterDcOffsetIB_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1dd), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1dc), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DC offset value from the actuator filter of the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved DC
 * offset value will be stored.
 * @return Returns the status of the last register read operation, indicating
 * success or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxlolActuatorFilterDcOffsetIB_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1dd), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1dc), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DC offset value for the actuator filter in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A 16-bit unsigned integer representing the DC offset value to be
 * set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxlolActuatorFilterDcOffsetQ_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1df), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1de), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DC offset value from the actuator filter of the
 * specified instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved DC
 * offset value will be stored.
 * @return Returns the status of the last register read operation, which
 * indicates success (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxlolActuatorFilterDcOffsetQ_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1df), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1de), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DC offset for the actuator filter in the ADRV9001 device's
 * transmit register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * transmit register map.
 * @param value A 16-bit unsigned integer representing the DC offset value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxlolActuatorFilterDcOffsetQB_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1e1), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1e0), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DC offset value from the actuator filter of the
 * specified instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved DC
 * offset value will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or failure (non-zero). The retrieved DC offset value is stored in the
 * variable pointed to by value.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxlolActuatorFilterDcOffsetQB_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1e1), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1e0), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Updates the DC offset of the TxTxlol actuator filter in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the TxTxlol actuator.
 * @param value An 8-bit unsigned integer representing the new DC offset value
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxlolActuatorFilterDcOffsetUpdate_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1e2), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DC offset value from a specific register for the
 * actuator filter in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved DC offset
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxlolActuatorFilterDcOffsetUpdate_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1e2), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the old setting selection for the TxTxlol actuator in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the TxTxlol actuator.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxlolActuatorOldSettingSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d6), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the old setting selection value for the TxTxlol actuator
 * from the device's register.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxlolActuatorOldSettingSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d6), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the actuator scaler value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set in
 * the actuator scaler.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxlolActuatorScaler_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1d8), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the actuator scaler value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxlolActuatorScaler_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1d8), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the actuator scaler value for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the actuator scaler.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxlolActuatorScalerB_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1d9), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxlolActuatorScalerB_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1d9), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Updates the actuator scaler value in the NVS register map for the
 * specified instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the new value to set for
 * the actuator scaler.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxlolActuatorScalerUpdate_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d6), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the actuator scaler value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxlolActuatorScalerUpdate_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d6), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxQEC control registers for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * TxQEC control.
 * @param value A 32-bit unsigned integer containing the value to be written to
 * the control registers.
 * @return Returns the status of the last operation, which indicates success (0)
 * or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecControl_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xd), (value >> 22));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xc), (value >> 14));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xb), (value >> 6));
    if (0 != status) return status;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa), (value >> 0), 0xfc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 32-bit value from a series of registers associated with a
 * given instance.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the last read operation, indicating success (0)
 * or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecControl_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xd), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xc), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xb), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa), &register_value, 0xfc, 0x2);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxQEC filter channel perturbation value in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx channel.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the TxQEC filter channel perturbation.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterChPerterbUpdate_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1eb), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific filter channel perturbation value from a device's
 * register.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterChPerterbUpdate_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1eb), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Updates the TxTxqec filter channel scaler in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx channel.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the filter channel scaler.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterChScalerUpdate_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register and updates the provided
 * value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterChScalerUpdate_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the filter coefficient I0 for the TxTxqec in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the filter coefficient to
 * be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the operations performed.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffI0_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x105), (value >> 8), 0x3f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x104), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the filter coefficient value for the TxTxqec filter from the
 * specified device instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * filter coefficient will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffI0_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x105), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x104), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the filter coefficient for the TxTxqec I0B register in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the filter coefficient
 * value to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffI0B_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x121), (value >> 8), 0x3f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x120), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the filter coefficient value from the specified register for
 * a given instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * filter coefficient will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffI0B_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x121), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x120), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the filter coefficient for the TxQEC I1 register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the filter coefficient
 * value to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffI1_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x107), (value >> 8), 0x3f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x106), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the filter coefficient value from the specified register for
 * a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * filter coefficient will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffI1_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x107), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x106), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the filter coefficient for the TxQEC I1B register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the filter coefficient
 * value to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffI1B_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x123), (value >> 8), 0x3f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x122), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the filter coefficient value from the specified register for
 * a given instance.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * filter coefficient will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the read operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffI1B_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x123), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x122), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx QEC filter coefficient I2 in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the filter coefficient to
 * be set.
 * @return Returns an integer status code indicating success (0) or an error
 * code if any of the write operations fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffI2_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x109), (value >> 8), 0x3f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x108), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the filter coefficient value from the specified register for
 * a given instance of the device.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * filter coefficient will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffI2_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x109), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x108), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the filter coefficient for the TxTxqec in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A 16-bit unsigned integer representing the filter coefficient to
 * be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffI2B_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x125), (value >> 8), 0x3f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x124), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the filter coefficient value from the specified register for
 * a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * filter coefficient will be stored.
 * @return Returns the status of the read operations, which indicates success
 * (0) or an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffI2B_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x125), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x124), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the filter coefficient for the TxQEC of the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the filter coefficient to
 * be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffI3_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x10a), (value >> 8), 0x3f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x10b), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the filter coefficient value from the specified register for
 * a given instance of the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * filter coefficient will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffI3_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x10a), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x10b), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the filter coefficient for the TxQEC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the filter coefficient to
 * be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the operations performed.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffI3B_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x127), (value >> 8), 0x3f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x126), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the filter coefficient value from the specified register for
 * a given instance of the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * filter coefficient will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffI3B_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x127), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x126), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the filter coefficient for the TxQEC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the filter coefficient to
 * be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffI4_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x10d), (value >> 8), 0x3f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x10c), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the filter coefficient value from the specified register for
 * a given instance of the device.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * filter coefficient will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffI4_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x10d), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x10c), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the filter coefficient for the TxTxqec in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx path.
 * @param value A 16-bit unsigned integer representing the filter coefficient to
 * be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffI4B_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x129), (value >> 8), 0x3f, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x128), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the 4-byte filter coefficient from the specified register
 * for a given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * filter coefficient will be stored.
 * @return Returns the status of the read operations, where a status of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffI4B_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x129), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x128), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Q0 filter coefficient for the TxTxqec in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * TxTxqec filter.
 * @param value A 16-bit unsigned integer representing the filter coefficient to
 * be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffQ0_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xfb), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xfa), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the filter coefficient value from the specified register for
 * a given instance.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * filter coefficient will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the register read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffQ0_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xfb), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xfa), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the filter coefficient for the TxQEC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmitter.
 * @param value A 16-bit unsigned integer representing the filter coefficient to
 * be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffQ0B_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x117), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x116), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the filter coefficient value from the specified register for
 * a given instance.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * filter coefficient will be stored.
 * @return Returns the status of the read operations, indicating success (0) or
 * an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffQ0B_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x117), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x116), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Q1 filter coefficient for the TxTxqec module in the ADRV9001
 * device.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * TxTxqec module.
 * @param value A 16-bit unsigned integer representing the filter coefficient to
 * be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffQ1_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xfd), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xfc), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Q1 filter coefficient from the device's register map.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * filter coefficient will be stored.
 * @return Returns the status of the register read operations, indicating
 * success or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffQ1_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xfd), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xfc), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Q1B filter coefficient for the TxTxqec in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the TxTxqec.
 * @param value A 16-bit unsigned integer representing the filter coefficient to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffQ1B_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x119), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x118), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the filter coefficient from the specified register for a
 * given instance of the device.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * filter coefficient will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffQ1B_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x119), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x118), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Q2 filter coefficient for the TxTxqec in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the TxTxqec.
 * @param value A 16-bit unsigned integer representing the filter coefficient
 * value to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffQ2_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0xff), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xfe), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Q2 filter coefficient from the device's register map.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * filter coefficient will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the register reads fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffQ2_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0xff), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xfe), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Q2B filter coefficient for the specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the filter coefficient to
 * be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffQ2B_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x11b), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x11a), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the filter coefficient value from the device's register for
 * a specified instance.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * filter coefficient will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the register read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffQ2B_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x11b), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x11a), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Q3 filter coefficient for the TxTxqec in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the TxTxqec.
 * @param value A 16-bit unsigned integer representing the filter coefficient to
 * be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffQ3_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x101), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x100), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Q3 filter coefficient from the specified register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * filter coefficient will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the register reads fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffQ3_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x101), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x100), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Q3B filter coefficient for the TxTxqec in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the TxTxqec.
 * @param value A 16-bit unsigned integer representing the filter coefficient to
 * be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffQ3B_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x11d), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x11c), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the filter coefficient from the register map for a specified
 * instance.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * filter coefficient will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffQ3B_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x11d), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x11c), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Q4 filter coefficient for the TxTxqec in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the TxTxqec.
 * @param value A 16-bit unsigned integer representing the filter coefficient
 * value to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffQ4_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x103), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x102), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the filter coefficient value from the specified register for
 * a given instance.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * filter coefficient will be stored.
 * @return Returns the status of the read operations, indicating success (0) or
 * an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffQ4_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x103), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x102), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Q4B filter coefficient for the TxTxqec in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the TxTxqec.
 * @param value A 16-bit unsigned integer representing the filter coefficient to
 * be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffQ4B_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x11f), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x11e), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the filter coefficient from the register map for a specified
 * instance.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * filter coefficient will be stored.
 * @return Returns the status of the last register read operation, indicating
 * success or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffQ4B_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x11f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x11e), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Updates the TX QEC filter coefficient in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for TX.
 * @param value An 8-bit unsigned integer representing the new filter
 * coefficient value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register update operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffUpdate_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf9), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the filter coefficient value from a specific register for a
 * given instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved filter
 * coefficient will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterCoeffUpdate_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf9), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Updates the DC offset filter value in the ADRV9001 device's register.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value An 8-bit unsigned integer representing the new DC offset filter
 * value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register update operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterDcOffsetUpdate_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf9), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DC offset value from a specific register for the given
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved DC offset
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterDcOffsetUpdate_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf9), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the filter offset I value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated type representing the specific instance of the
 * register map to be modified.
 * @param value A 16-bit unsigned integer representing the filter offset I value
 * to be set.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterOffsetI_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x10f), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x10e), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the TxQEC filter offset I value from the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * filter offset value will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterOffsetI_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x10f), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x10e), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TX QEC filter offset for the specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the filter offset value
 * to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterOffsetIB_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x113), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x112), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the TxQEC filter offset value from the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * filter offset value will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterOffsetIB_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x113), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x112), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Q component of the TxQEC filter offset in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the filter offset value
 * to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterOffsetQ_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x111), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x110), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Q filter offset value from the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure used for communication with
 * the ADRV9001.
 * @param instance An enumerated value representing the specific instance of the
 * register map to access.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * filter offset value will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success and any non-zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterOffsetQ_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x111), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x110), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TX QEC filter offset for a specified instance in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * TX register map.
 * @param value A 16-bit unsigned integer representing the filter offset value
 * to be set.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterOffsetQB_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x115), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x114), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the filter offset value from the specified register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * filter offset value will be stored.
 * @return Returns the status of the last register read operation, indicating
 * success (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterOffsetQB_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x115), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x114), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxQEC filter perturbation value in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated type representing the specific instance of the
 * register map.
 * @param value A 16-bit unsigned integer representing the value to be set in
 * the TxQEC filter.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterPerterbI_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1e4), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1e3), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific register from the device and stores
 * it in the provided pointer.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumeration value representing the specific instance of
 * the register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * register value will be stored.
 * @return Returns the status of the last register read operation, indicating
 * success or failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterPerterbI_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1e4), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1e3), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx QEC filter perturbation value in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A 16-bit unsigned integer representing the value to be written
 * to the registers.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterPerterbIB_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1e6), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1e5), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 16-bit value from two consecutive registers for a
 * specified instance of the device.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumeration value representing the specific instance of
 * the register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the register read operations, where a non-zero
 * value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterPerterbIB_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1e6), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1e5), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxQEC filter perturbation value in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A 16-bit unsigned integer representing the value to be set in
 * the TxQEC filter perturbation registers.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterPerterbQ_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1e8), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1e7), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 16-bit value from two consecutive registers for a
 * specified instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the register read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterPerterbQ_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1e8), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1e7), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxQEC filter perturbation value in the ADRV9001 device's
 * register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map to be modified.
 * @param value A 16-bit unsigned integer representing the value to be set in
 * the TxQEC filter registers.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterPerterbQB_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1ea), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1e9), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 16-bit value from two consecutive registers for a
 * specified instance in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the read operations, where a value of 0
 * indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterPerterbQB_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1ea), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1e9), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxQEC filter scaler value in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated type representing the specific instance of the
 * register map to be modified.
 * @param value A 16-bit unsigned integer representing the value to be set in
 * the filter scaler.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterScaler_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x10), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0xf), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the filter scaler value from the specified register of the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * filter scaler value will be stored.
 * @return Returns an integer status code indicating success (0) or an error
 * code if the register reads fail.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterScaler_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x10), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0xf), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxQEC filter scaler B value in the ADRV9001 device's register
 * map.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A 16-bit unsigned integer representing the value to be set in
 * the filter scaler.
 * @return Returns the status of the last write operation, indicating success
 * (0) or failure (non-zero error code).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterScalerB_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1ed), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1ec), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of the TxTxqecFilterScalerB register from the
 * device and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for register access.
 * @param instance An enumerated type indicating the specific instance of the
 * register to read.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved
 * register value will be stored.
 * @return Returns an integer status code indicating success (0) or failure
 * (non-zero) of the register read operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecFilterScalerB_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1ed), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1ec), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxTxqecIaddr register value for a specified instance in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A 16-bit unsigned integer representing the value to be set in
 * the register.
 * @return Returns an integer status code indicating the success (0) or failure
 * (non-zero) of the register write operations.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecIaddr_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9), (value >> 8), 0x1, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x8), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 16-bit value from a specific register in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 16-bit unsigned integer where the retrieved value
 * will be stored.
 * @return Returns the status of the read operations, indicating success (0) or
 * an error code.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecIaddr_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x8), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves a 32-bit value from a series of registers by reading them in
 * reverse order.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit integer where the retrieved value will be
 * stored.
 * @return Returns the status of the last register read operation, where a
 * status of 0 indicates success.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecRdata_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x3), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x2), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x0), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets a specific field in the NVS register map for the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * hardware.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer that represents the value to be
 * written to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecRead_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Reads a specific register value from the device and stores it in the
 * provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated type indicating the specific instance of the
 * register to read.
 * @param value A pointer to a uint8_t variable where the read register value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecRead_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TxTxqec reset value in the ADRV9001 device's register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * register to be modified.
 * @param value A uint8_t value that indicates the reset state to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecReset_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the reset status of the TxTxqec register for a specified
 * instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * TxTxqec register.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecReset_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TX QEC write data in the ADRV9001 device by writing to
 * multiple registers.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the TX path.
 * @param value A 32-bit unsigned integer containing the data to be written to
 * the TX QEC registers.
 * @return Returns the status of the last register write operation, where a non-
 * zero value indicates an error.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecWdata_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint32_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x7), (value >> 24));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x6), (value >> 16));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x5), (value >> 8));
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x4), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a 32-bit value from a series of registers by reading four
 * consecutive registers and combining their values.
 *
 * @param device A pointer to the device context used for register access.
 * @param instance An enumerated type indicating the specific instance of the
 * register map.
 * @param value A pointer to a 32-bit unsigned integer where the combined
 * register values will be stored.
 * @return Returns the status of the last register read operation, indicating
 * success (0) or failure (non-zero).
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecWdata_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint32_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x7), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x6), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x5), &register_value);
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x4), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Writes a value to a specific field in the ADRV9001 NVS register map.
 *
 * @param device A pointer to the device context used for the hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value An 8-bit unsigned integer representing the value to be written
 * to the register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecWrite_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves a specific register value from the device and stores it in
 * the provided value pointer.
 *
 * @param device A pointer to the device structure used for communication with
 * the hardware.
 * @param instance An enumerated value representing the specific instance of the
 * register to be accessed.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxTxqecWrite_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the transmit attenuation path update for a specified instance in
 * the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the transmit path.
 * @param value An 8-bit unsigned integer representing the attenuation value to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxattenDpathUpdate_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x9a), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the transmission attenuation path register value from the
 * device and stores it in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxattenDpathUpdate_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9a), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the error value from the TxchestPnadderA register for a
 * specified instance.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map.
 * @param value A pointer to a uint8_t variable where the retrieved error value
 * will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxchestPnadderAErr_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a9), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the TxchestPnadderA selection in the ADRV9001
 * device's register map.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx channel.
 * @param value An 8-bit unsigned integer representing the value to be set for
 * the TxchestPnadderA selection.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxchestPnadderASel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a9), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxchestPnadderASel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a9), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device structure used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the register read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxchestPnadderCErr_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a9), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the value of the `TxchestPnadderCSel` field in the ADRV9001
 * register map.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register map.
 * @param value A 8-bit unsigned integer representing the value to be set in the
 * register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxchestPnadderCSel_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1a9), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided pointer.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxchestPnadderCSel_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1a9), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Tx QEC LOL data capture enable status in the ADRV9001 device.
 *
 * @param device A pointer to the device structure that represents the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific instance of the
 * NVS register map for the Tx path.
 * @param value A uint8_t value indicating the enable status to be set (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the register write operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxqecLolDataCaptEnable_Set(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12d), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the value of a specific field from a register and stores it
 * in the provided value pointer.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific instance of the
 * register to read from.
 * @param value A pointer to a uint8_t variable where the retrieved register
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_NvsRegmapTx_TxqecLolDataCaptEnable_Get(void *const device,
    adrv9001_BfNvsRegmapTx_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12d), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


#endif // __ADRV9001_BF_NVS_REGMAP_TX_H__