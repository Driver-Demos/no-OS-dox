/**
 * \file
 * \brief BitField accessors for txdac_mem_map
 *
 * Autogenerated with yoda-gen 1.2.0. Do not modify
 *
 * \copyright Copyright (c) 2020 Analog Devices, Inc. All Rights Reserved.
 * This software is proprietary to Analog Devices, Inc. and its licensors.
 */

 #ifndef __ADRV9001_BF_TXDAC_MEM_MAP_H__
 #define __ADRV9001_BF_TXDAC_MEM_MAP_H__

#include "adrv9001_bf_hal.h"

/***************************************************************************//**
 * @brief The `adrv9001_BfTxdacMemMap_e` is an enumeration that defines memory
 * map addresses for the TX DACs in the ADRV9001 device. It includes two
 * members, `ADRV9001_BF_TX1_DAC` and `ADRV9001_BF_TX2_DAC`, which
 * correspond to the memory addresses for the first and second transmit
 * DACs, respectively. This enumeration is used to facilitate access to
 * specific DAC configurations and operations within the device's memory
 * map.
 *
 * @param ADRV9001_BF_TX1_DAC Represents the memory map address for TX1 DAC, set
 * to 0x2c00.
 * @param ADRV9001_BF_TX2_DAC Represents the memory map address for TX2 DAC, set
 * to 0x2e00.
 ******************************************************************************/
typedef enum adrv9001_BfTxdacMemMap_e
{
    ADRV9001_BF_TX1_DAC    =   0x2c00,
    ADRV9001_BF_TX2_DAC    =   0x2e00
} adrv9001_BfTxdacMemMap_e;

/***************************************************************************//**
 * @brief The `txdacMemMapInstances` is a static constant array of type
 * `adrv9001_BfTxdacMemMap_e`, which is an enumeration representing
 * memory map instances for the TX DACs in the ADRV9001 device. It
 * contains two elements: `ADRV9001_BF_TX1_DAC` and
 * `ADRV9001_BF_TX2_DAC`, which correspond to specific memory addresses
 * for the TX1 and TX2 DACs.
 *
 * @details This array is used to reference the memory map instances for the TX
 * DACs in various functions that perform operations on these DACs.
 ******************************************************************************/
static const adrv9001_BfTxdacMemMap_e txdacMemMapInstances[] = {
    ADRV9001_BF_TX1_DAC,
    ADRV9001_BF_TX2_DAC
};


/***************************************************************************//**
 * @brief Retrieves the calibration active status for the I DAC in the TXDAC
 * memory map.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (e.g., TX1 or TX2).
 * @param value A pointer to a `uint8_t` where the retrieved calibration active
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalActiveI_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x7), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the active calibration status of the QDAC in the ADRV9001
 * device.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value representing the specific QDAC instance
 * (e.g., TX1 or TX2).
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalActiveQ_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x7), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration address for the IDAC in the TXDAC memory map.
 *
 * @param device A pointer to the device context, which is used for hardware
 * access.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (TX1 or TX2).
 * @param value An 8-bit unsigned integer representing the calibration address
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalAddrI_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x10), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration address for the I DAC in the TXDAC memory
 * map.
 *
 * @param device A pointer to the device context, which is used for hardware
 * access.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (TX1 or TX2).
 * @param value A pointer to a `uint8_t` where the retrieved calibration address
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalAddrI_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x10), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration address for the QDAC in the ADRV9001 device.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value indicating which QDAC instance to
 * configure.
 * @param value The calibration address value to be set for the specified QDAC.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalAddrQ_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x13), (value >> 0), 0x3f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration address for the QDAC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific QDAC instance
 * (e.g., TX1 or TX2).
 * @param value A pointer to a uint8_t variable where the retrieved calibration
 * address will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalAddrQ_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x13), &register_value, 0x3f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration debug mode for the IDAC in the TXDAC memory map.
 *
 * @param device A pointer to the device context, which is used for hardware
 * access.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (e.g., TX1 or TX2).
 * @param value A uint8_t value that sets the calibration debug mode.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalDebugI_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x15), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration debug mode value for the IDAC in the TXDAC
 * memory map.
 *
 * @param device A pointer to the device context used for communication.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (e.g., TX1 or TX2).
 * @param value A pointer to a `uint8_t` where the retrieved calibration debug
 * mode value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalDebugI_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x15), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the QDAC calibration debug mode for the specified instance.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which QDAC instance to configure.
 * @param value A uint8_t value representing the debug mode setting.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalDebugQ_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x15), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the QDAC calibration debug mode value from the specified
 * device instance.
 *
 * @param device A pointer to the device context from which the calibration
 * debug mode value is to be read.
 * @param instance An enumerated value representing the specific QDAC instance
 * (e.g., ADRV9001_BF_TX1_DAC or ADRV9001_BF_TX2_DAC).
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration debug mode value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalDebugQ_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x15), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ISB calibration reference for the TXDAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific TXDAC instance.
 * @param value A uint8_t value to set the ISB calibration reference.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalDoIsbref_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ISB calibration reference value from the specified TXDAC
 * instance.
 *
 * @param device A pointer to the device context used for communication.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (TX1 or TX2).
 * @param value A pointer to a `uint8_t` where the retrieved calibration
 * reference value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalDoIsbref_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the offset calibration for the TXDAC calibration machine.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating which TXDAC instance to
 * configure.
 * @param value A uint8_t value that enables or disables the offset calibration.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalDoOffsetCal_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the offset calibration status for the TXDAC by reading a
 * specific register value.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value indicating which TXDAC instance (TX1 or
 * TX2) to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration offset value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalDoOffsetCal_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the calibration done status for the I DAC in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating which TXDAC instance (TX1 or
 * TX2) to access.
 * @param value A pointer to a `uint8_t` variable where the calibration done
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalDoneI_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x7), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the calibration status of the QDAC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating which TXDAC instance (TX1 or
 * TX2) to access.
 * @param value A pointer to a uint8_t variable where the calibration status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalDoneQ_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x7), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ISB calibration loop value for the specified TXDAC instance.
 *
 * @param device A pointer to the device context, which is used for hardware
 * access.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (TX1 or TX2).
 * @param value A uint8_t value that indicates the desired state for the ISB
 * calibration loop.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalIsbLoop_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration loop setting for the ISB calibration in the
 * TXDAC memory map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (TX1 or TX2).
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration loop value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalIsbLoop_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the saturation count of ISB CALDACs for the I DAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating which DAC instance to access.
 * @param value A pointer to a uint8_t where the saturation count will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalIsbSatI_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x8), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the count of ISB CALDACS that saturated to 0 or 15 for a
 * specified TXDAC instance.
 *
 * @param device A pointer to the device context used for the operation.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (e.g., TX1 or TX2).
 * @param value A pointer to a `uint8_t` variable where the saturated count will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalIsbSatQ_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the initial value for ISB reference calibration in the TXDAC
 * memory map.
 *
 * @param device A pointer to the device context, which is used for hardware
 * access.
 * @param instance An enumerated type indicating which TXDAC instance (TX1 or
 * TX2) is being configured.
 * @param value A uint8_t value representing the initial calibration reference
 * to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalIsbrefInit_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x15), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the initial value for the ISB reference CALDAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating the specific TXDAC instance (e.g.,
 * TX1 or TX2).
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalIsbrefInit_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x15), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the MSB calibration loop for the TXDAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the TXDAC instance (either
 * TX1 or TX2).
 * @param value A uint8_t value indicating the state to set for the MSB
 * calibration loop.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalMsbLoop_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the MSB calibration loop status for the TXDAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific TXDAC instance.
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalMsbLoop_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the count of MSB CALDACS that have saturated to 0 or 127.
 *
 * @param device A pointer to the device context used for communication.
 * @param instance An enumerated type indicating which TXDAC instance to access.
 * @param value A pointer to a `uint8_t` where the saturated count will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalMsbSatI_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x8), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the saturated count of MSB CALDACS for the QDAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which TXDAC instance to access.
 * @param value A pointer to a uint8_t where the result will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalMsbSatQ_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the saturation offset calibration status for the IDAC.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value indicating which TXDAC instance (e.g.,
 * TX1 or TX2) is being accessed.
 * @param value A pointer to a `uint8_t` variable where the retrieved saturation
 * offset calibration status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalOffsetSatI_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x8), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the calibration offset saturation status for the QDAC in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value indicating which QDAC instance to access.
 * @param value A pointer to a `uint8_t` where the retrieved saturation status
 * will be stored.
 * @return Returns the status of the read operation, which indicates success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalOffsetSatQ_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x9), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the calibration read data for the I DAC from the specified
 * device instance.
 *
 * @param device A pointer to the device context from which the calibration data
 * is to be read.
 * @param instance An enumerated value representing the specific DAC instance
 * (e.g., TX1 or TX2).
 * @param value A pointer to a `uint8_t` variable where the read calibration
 * data will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalRdDataI_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x11), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the calibration read data for the QDAC from the specified
 * device instance.
 *
 * @param device A pointer to the device context from which the QDAC calibration
 * data is to be read.
 * @param instance An enumerated value representing the specific QDAC instance
 * (e.g., ADRV9001_BF_TX1_DAC or ADRV9001_BF_TX2_DAC).
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration data will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalRdDataQ_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x14), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration settle delay for the TXDAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating which TXDAC instance to
 * configure.
 * @param value An 8-bit unsigned integer representing the settle delay value.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalSettleDelay_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xb), (value >> 0), 0xf8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration settle delay value for the TXDAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating which TXDAC instance to access.
 * @param value A pointer to a uint8_t where the retrieved settle delay value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalSettleDelay_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xb), &register_value, 0xf8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration start for the I DAC in the ADRV9001 device.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value indicating which TXDAC instance (e.g.,
 * TX1 or TX2) is being configured.
 * @param value A uint8_t value that indicates the calibration start command.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalStartI_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x7), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration start status for the I DAC in the TXDAC
 * memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which TXDAC instance to access.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalStartI_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x7), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration start value for the Q DAC in the ADRV9001 device.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value indicating which DAC instance (TX1 or
 * TX2) is being configured.
 * @param value A uint8_t value representing the calibration start setting to be
 * applied.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalStartQ_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x7), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration start status for the Q DAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which DAC instance to access.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalStartQ_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x7), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration use selection for the TXDAC in the ADRV9001
 * device.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (either TX1 or TX2).
 * @param value A uint8_t value that indicates the calibration use selection (0
 * or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalUseSelect_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x15), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration use selection value for the TXDAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which TXDAC instance to access.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalUseSelect_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x15), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration write enable for the I DAC in the TXDAC memory
 * map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (e.g., TX1 or TX2).
 * @param value A uint8_t value that indicates whether to enable (1) or disable
 * (0) the write operation.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalWeI_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration write enable status for the I DAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which TXDAC instance to access.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalWeI_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration write enable for the Q DAC in the ADRV9001
 * device.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value indicating which TX DAC instance (TX1 or
 * TX2) is being configured.
 * @param value A uint8_t value that indicates the write enable state (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalWeQ_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xe), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration write enable status for the Q DAC in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value representing the specific Q DAC instance
 * (e.g., ADRV9001_BF_TX1_DAC or ADRV9001_BF_TX2_DAC).
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration write enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation, while the `value` pointer is updated with the
 * calibration write enable status.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalWeQ_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xe), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration write data for the IDAC in the TXDAC memory map.
 *
 * @param device A pointer to the device context, used for hardware access.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (TX1 or TX2).
 * @param value An 8-bit unsigned integer representing the calibration write
 * data to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalWrDataI_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xf), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration write data for the I DAC from the specified
 * instance.
 *
 * @param device A pointer to the device context used for communication.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (e.g., TX1 or TX2).
 * @param value A pointer to a `uint8_t` where the retrieved calibration write
 * data will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalWrDataI_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xf), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration write data for the QDAC in the ADRV9001 device.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value indicating which QDAC instance to
 * configure.
 * @param value The 8-bit value to be written to the QDAC calibration data
 * register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalWrDataQ_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x12), (value >> 0), 0x7f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration write data for the QDAC from the specified
 * device instance.
 *
 * @param device A pointer to the device context that is used to access the
 * hardware.
 * @param instance An enumerated value representing the specific QDAC instance
 * to access.
 * @param value A pointer to a `uint8_t` where the retrieved calibration write
 * data will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalWrDataQ_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x12), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DAC clock divide ratio for calibration clock.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific TXDAC instance.
 * @param value An 8-bit unsigned integer representing the desired clock divide
 * ratio.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalclkDiv_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the DAC calibration clock division value from the specified
 * device instance.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (e.g., TX1 or TX2).
 * @param value A pointer to a `uint8_t` variable where the retrieved clock
 * division value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalclkDiv_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration clock enable for the I DAC in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating which TXDAC instance (TX1 or
 * TX2) is being configured.
 * @param value A uint8_t value that indicates whether to enable or disable the
 * calibration clock.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalclkEnI_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration clock enable status for the I DAC in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating which TXDAC instance (TX1 or
 * TX2) to access.
 * @param value A pointer to a uint8_t variable where the retrieved calibration
 * clock enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalclkEnI_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration clock enable for the Q DAC in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific TX DAC instance
 * (TX1 or TX2).
 * @param value A uint8_t value that indicates whether to enable or disable the
 * calibration clock.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalclkEnQ_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x6), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration clock enable status for the Q DAC in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific TX DAC instance
 * (either TX1 or TX2).
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration clock enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation, while the calibration clock enable status is
 * stored in the provided `value` pointer.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCalclkEnQ_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x6), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the full-scale current for the calibration DAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific TXDAC instance.
 * @param value The full-scale current value to be set, represented as an 8-bit
 * unsigned integer.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCaldacFsc_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the full-scale current setting of the calibration DAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which TXDAC instance to access.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCaldacFsc_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration offset for the MSB DAC in the TXDAC memory map.
 *
 * @param device A pointer to the device context, which is used for hardware
 * access.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (e.g., TX1 or TX2).
 * @param value An 8-bit unsigned integer representing the offset value to be
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCaldacOffset_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xc), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration offset value for the TXDAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which TXDAC instance to access.
 * @param value A pointer to a uint8_t where the retrieved offset value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCaldacOffset_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xc), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the common mode control for the DAC output.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific TXDAC instance.
 * @param value A uint8_t value representing the common mode level to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCmCtrl_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x23), (value >> 0), 0x38, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the common mode control value for the TXDAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which TXDAC instance to access.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCmCtrl_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x23), &register_value, 0x38, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the average value of all 32 MSB CALDAC codes for the IDAC.
 *
 * @param device A pointer to the device context, which is used for hardware
 * access.
 * @param instance An enumerated type indicating which TXDAC instance (TX1 or
 * TX2) to access.
 * @param value A pointer to a `uint8_t` where the retrieved average value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCompAvgmsbI_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x16), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the average most significant bit (MSB) value from the QDAC
 * calibration data.
 *
 * @param device A pointer to the device context used for communication.
 * @param instance An enumerated type indicating which TXDAC instance to access.
 * @param value A pointer to a `uint8_t` where the retrieved average MSB value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCompAvgmsbQ_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17), &register_value, 0x7f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the comparator powerdown value for the TXDAC.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (TX1 or TX2).
 * @param value A uint8_t value that specifies the powerdown state for the
 * comparator.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCompBiaspd_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x18), (value >> 0), 0x30, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the comparator bias power-down value from the TXDAC memory
 * map.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (TX1 or TX2) being accessed.
 * @param value A pointer to a `uint8_t` variable where the retrieved comparator
 * bias power-down value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation, while the retrieved comparator bias power-down
 * value is stored in the provided `value` pointer.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCompBiaspd_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x18), &register_value, 0x30, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fast comparator enable bit in the TXDAC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which TXDAC instance to configure.
 * @param value A uint8_t value to set the fast comparator enable bit.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCompFastcmEnb_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the fast comparator enable status from the TXDAC memory map.
 *
 * @param device A pointer to the device context used for communication.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (TX1 or TX2).
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCompFastcmEnb_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ISB comparator gain in the TXDAC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific TXDAC instance.
 * @param value An 8-bit unsigned integer representing the gain value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCompGainIsb_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xb), (value >> 0), 0x4, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ISB comparator gain setting from the specified TXDAC
 * memory map.
 *
 * @param device A pointer to the device context used for accessing the
 * hardware.
 * @param instance An enumerated value indicating which TXDAC instance to
 * access.
 * @param value A pointer to a `uint8_t` where the retrieved gain value will be
 * stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCompGainIsb_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xb), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the most significant bit (MSB) gain for the TXDAC comparator.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating which TXDAC instance to
 * configure.
 * @param value An 8-bit unsigned integer representing the gain value to set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCompGainMsb_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xb), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the most significant bit (MSB) gain setting for the TXDAC
 * comparator.
 *
 * @param device A pointer to the device context, which is used for hardware
 * access.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (TX1 or TX2).
 * @param value A pointer to a `uint8_t` where the retrieved gain value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCompGainMsb_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xb), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the average number of SAR runs for ISB calibration.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific TXDAC instance.
 * @param value An 8-bit unsigned integer representing the number of SAR runs to
 * average.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCompIsbavg_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the average number of SAR runs for ISB calibration from the
 * specified TXDAC instance.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (e.g., TX1 or TX2).
 * @param value A pointer to a `uint8_t` variable where the retrieved average
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCompIsbavg_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ISB comparator powerdown value in the TXDAC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific TXDAC instance.
 * @param value A uint8_t value representing the powerdown state to set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCompIsbpd_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x18), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ISB comparator powerdown setting from the specified
 * device instance.
 *
 * @param device A pointer to the device context from which the ISB comparator
 * powerdown setting is to be read.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (e.g., TX1 or TX2) to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved powerdown
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCompIsbpd_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x18), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the MSB average count for the TXDAC comparator.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which TXDAC instance to configure.
 * @param value The number of SAR runs to average for each MSB CALDAC
 * measurement.
 * @return Returns the status of the write operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCompMsbavg_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xd), (value >> 0), 0x70, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the average number of SAR runs for MSB calibration from the
 * specified TXDAC instance.
 *
 * @param device A pointer to the device context used for communication.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (TX1 or TX2).
 * @param value A pointer to a `uint8_t` where the retrieved average value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCompMsbavg_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xd), &register_value, 0x70, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the most significant bit of the TXDAC comparator powerdown value.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific TXDAC instance.
 * @param value A uint8_t value representing the comparator powerdown setting.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCompMsbpd_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x18), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the most significant byte of the comparator bias power-down
 * setting for a specified TXDAC instance.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (e.g., TX1 or TX2).
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCompMsbpd_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x18), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the one-shot enable for the comparator in the TXDAC memory map.
 *
 * @param device A pointer to the device context, which is used for hardware
 * access.
 * @param instance An enumerated type indicating which TXDAC instance (TX1 or
 * TX2) is being configured.
 * @param value A uint8_t value that indicates whether to enable (1) or disable
 * (0) the one-shot comparator.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCompOneshotEnb_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the one-shot enable status of the comparator for the TXDAC.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerator indicating which TXDAC instance to access.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCompOneshotEnb_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the raw output value of the I DAC comparator.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which TXDAC instance to access.
 * @param value A pointer to a uint8_t where the output value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCompOutI_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x16), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the comparator output value for the QDAC from the specified
 * device instance.
 *
 * @param device A pointer to the device context from which the comparator
 * output is to be read.
 * @param instance An enumerated value representing the specific QDAC instance
 * to access.
 * @param value A pointer to a `uint8_t` variable where the retrieved comparator
 * output value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacCompOutQ_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x17), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the dither amplitude for the TXDAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the TXDAC instance.
 * @param value An 8-bit unsigned integer representing the dither amplitude to
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacDitherAmplitude_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3), (value >> 0), 0xf8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the dither amplitude setting from the TXDAC memory map.
 *
 * @param device A pointer to the device context used for communication.
 * @param instance An enumerated value indicating which TXDAC instance to
 * access.
 * @param value A pointer to a uint8_t where the retrieved dither amplitude will
 * be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacDitherAmplitude_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3), &register_value, 0xf8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the dither enable state for the DAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific TXDAC instance.
 * @param value A uint8_t value indicating whether to enable (1) or disable (0)
 * dither.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacDitherEnable_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the dither enable status for the TXDAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which TXDAC instance to access.
 * @param value A pointer to a uint8_t where the retrieved dither enable value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacDitherEnable_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the update rate of the triangle waveform used for dithering in
 * the DAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating which TXDAC instance to
 * configure.
 * @param value A 16-bit unsigned integer representing the dither period.
 * @return Returns an integer status code indicating success or failure of the
 * operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacDitherPeriod_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint16_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x2), (value >> 8), 0xf, 0x0);
    if (0 != status) return status;

    status = adi_bf_hal_Register_Write(device, (instance + 0x1), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the dither period for the TXDAC by reading from specific
 * registers.
 *
 * @param device A pointer to the device context used for communication.
 * @param instance An enumerated type indicating which TXDAC instance to access.
 * @param value A pointer to a uint16_t where the retrieved dither period will
 * be stored.
 * @return Returns an integer status code indicating success or failure of the
 * read operations.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacDitherPeriod_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint16_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x2), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;
    if (0 != status) return status;

    status = adi_bf_hal_Register_Read(device, (instance + 0x1), &register_value);
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the external calibration enable for the I DAC in the ADRV9001
 * device.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value indicating which TXDAC instance (TX1 or
 * TX2) is being configured.
 * @param value A uint8_t value that indicates whether to enable or disable the
 * external calibration (1 to enable, 0 to disable).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacExtcalEnableI_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the external calibration enable status for the I DAC in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating which TXDAC instance (TX1 or
 * TX2) to access.
 * @param value A pointer to a uint8_t variable where the retrieved calibration
 * enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacExtcalEnableI_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the external calibration enable for the Q DAC in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific TX DAC instance
 * (TX1 or TX2).
 * @param value A uint8_t value that indicates whether to enable or disable the
 * external calibration (1 to enable, 0 to disable).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacExtcalEnableQ_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the external calibration enable status for the QDAC in the
 * ADRV9001 device.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value indicating which TXDAC instance (TX1 or
 * TX2) is being accessed.
 * @param value A pointer to a `uint8_t` variable where the retrieved
 * calibration enable status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacExtcalEnableQ_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the boost level for the IDAC output power by 3dB.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating which TXDAC instance to
 * configure.
 * @param value A uint8_t value that determines the boost setting.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacFscBoostI_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x20), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the boost setting for the IDAC output power.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific TXDAC instance.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacFscBoostI_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x20), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the QDAC output power boost for the specified instance.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific QDAC instance.
 * @param value A uint8_t value indicating the boost setting.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacFscBoostQ_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x21), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the QDAC full-scale boost setting from the device.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating which TXDAC instance to access.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacFscBoostQ_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x21), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fine-tuning value for the IDAC full-scale current.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific TXDAC instance.
 * @param value An 8-bit unsigned integer representing the fine-tuning value.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacFscTuneI_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x20), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the fine-tuning value for the IDAC full scale current from
 * the specified device instance.
 *
 * @param device A pointer to the device context that is used to access the
 * hardware.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (e.g., TX1 or TX2).
 * @param value A pointer to a `uint8_t` where the retrieved fine-tuning value
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacFscTuneI_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x20), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the fine-tuning value for the QDAC full-scale current.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific QDAC instance.
 * @param value An 8-bit unsigned integer representing the fine-tuning value.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacFscTuneQ_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x21), (value >> 0), 0x1f, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the fine-tuning value for the QDAC full-scale current.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific QDAC instance.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacFscTuneQ_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x21), &register_value, 0x1f, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ISB shuffle enable bit in the TXDAC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific TXDAC instance.
 * @param value A uint8_t value indicating whether to enable (1) or disable (0)
 * the ISB shuffle.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacIsbShuffleEnable_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the shuffle enable status for the TXDAC ISB.
 *
 * @param device A pointer to the device context used for hardware access.
 * @param instance An enumerated value indicating which TXDAC instance to
 * access.
 * @param value A pointer to a `uint8_t` where the retrieved shuffle enable
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacIsbShuffleEnable_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the MSB shuffle enable for the TXDAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the TXDAC instance (TX1 or
 * TX2).
 * @param value A uint8_t value indicating whether to enable (1) or disable (0)
 * the MSB shuffle.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacMsbShuffleEnable_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the MSB shuffle enable status for the TXDAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating which TXDAC instance to access.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacMsbShuffleEnable_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the output protection level for the DAC to a specified value.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific TXDAC instance.
 * @param value A uint8_t value that sets the output protection level.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacOutputProtect0p2v_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d), (value >> 0), 0x10, 0x4);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the output protection value for the DAC, specifically
 * setting it to 0.2V.
 *
 * @param device A pointer to the device structure that represents the DAC.
 * @param instance An enumerated type indicating which DAC instance to access.
 * @param value A pointer to a uint8_t variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacOutputProtect0p2v_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d), &register_value, 0x10, 0x4);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ground protection for the TXDAC output in the ADRV9001
 * device.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value indicating which TXDAC instance (TX1 or
 * TX2) is being configured.
 * @param value A uint8_t value that determines whether to enable or disable the
 * ground protection.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacOutputProtectGnd_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the ground protection status of the TXDAC output.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which TXDAC instance to access.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacOutputProtectGnd_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power-down bias override for the TXDAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value indicating which TXDAC instance to
 * configure.
 * @param value A uint8_t value that indicates whether to enable or disable the
 * bias override.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacPdMbiasOverride_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c), (value >> 0), 0x20, 0x5);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power-down bias override status for the TXDAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which TXDAC instance to access.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacPdMbiasOverride_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c), &register_value, 0x20, 0x5);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down driver control for the TXDAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which TXDAC instance to configure.
 * @param value A uint8_t value indicating the power down state to set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacPddriverEnable_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the status of the TXDAC power down driver control.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value indicating which TXDAC instance to access
 * (TX1 or TX2).
 * @param value A pointer to a `uint8_t` variable where the retrieved value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacPddriverEnable_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the DAC clock divide ratio for the powerdown state machine.
 *
 * @param device A pointer to the device structure that represents the DAC.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (e.g., TX1 or TX2).
 * @param value An 8-bit unsigned integer representing the clock divide ratio to
 * be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacPowerdownClkdiv_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1b), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the clock division setting for the power-down state machine
 * of the DAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific TXDAC instance.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacPowerdownClkdiv_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1b), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down control for the TXDAC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (TX1 or TX2).
 * @param value A uint8_t value that specifies the power down control setting.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacPowerdownCtrl_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d), (value >> 0), 0xf, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down control status for the TXDAC.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value indicating which TXDAC instance to query
 * (TX1 or TX2).
 * @param value A pointer to a `uint8_t` where the retrieved power down control
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacPowerdownCtrl_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d), &register_value, 0xf, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the I DAC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating which TXDAC instance (TX1 or
 * TX2) is being configured.
 * @param value A uint8_t value representing the desired power down state (0 for
 * active, 1 for power down).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacPowerdownI_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power-down control status of the I DAC in the ADRV9001
 * device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating which TXDAC instance (TX1 or
 * TX2) to access.
 * @param value A pointer to a uint8_t variable where the retrieved power-down
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacPowerdownI_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the manual override for the power down control of the TXDAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific TXDAC instance.
 * @param value A uint8_t value indicating the power down override state.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacPowerdownOverride_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1d), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down override status for the TXDAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which TXDAC instance to access.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacPowerdownOverride_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1d), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the power down state for the Q DAC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value indicating which DAC instance (TX1 or
 * TX2) is being configured.
 * @param value A uint8_t value representing the desired power down state (0 to
 * power up, 1 to power down).
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacPowerdownQ_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1c), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the power down status of the Q DAC in the ADRV9001 device.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated value indicating which DAC instance (TX1 or
 * TX2) is being accessed.
 * @param value A pointer to a `uint8_t` variable where the power down status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacPowerdownQ_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the power down status of the I DAC in the TXDAC memory map.
 *
 * @param device A pointer to the device structure representing the hardware
 * device.
 * @param instance An enumerated type indicating which TXDAC instance (e.g., TX1
 * or TX2) to query.
 * @param value A pointer to a `uint8_t` variable where the power down status
 * will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacPowerdownStatI_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c), &register_value, 0x4, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the power-down status of the TXDAC for a specified instance.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which TXDAC instance to query.
 * @param value A pointer to a uint8_t where the power-down status will be
 * stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacPowerdownStatQ_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the power-up status of the I DAC from the specified device
 * instance.
 *
 * @param device A pointer to the device context from which the power-up status
 * is to be read.
 * @param instance An enumerated value representing the specific DAC instance
 * (e.g., TX1 or TX2).
 * @param value A pointer to a `uint8_t` variable where the retrieved power-up
 * status will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacPowerupStatI_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the power-up status of the Q DAC in the ADRV9001 device.
 *
 * @param device A pointer to the device structure representing the ADRV9001
 * device.
 * @param instance An enumerated value representing the specific TX DAC instance
 * (TX1 or TX2).
 * @param value A pointer to a uint8_t variable where the power-up status will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacPowerupStatQ_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1c), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the calibration current branch to be output to a test pin.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific TXDAC instance.
 * @param value A uint8_t value that selects the current branch to output.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacSelCalToPin_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x19), (value >> 0), 0xc0, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the calibration selection for the IDAC currents from the
 * specified device.
 *
 * @param device A pointer to the device context that is used for communication.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (e.g., TX1 or TX2).
 * @param value A pointer to a `uint8_t` where the retrieved calibration
 * selection will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacSelCalToPin_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x19), &register_value, 0xc0, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the amplitude of the random shuffle for the DAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated type indicating the specific TXDAC instance.
 * @param value An 8-bit unsigned integer representing the amplitude value to
 * set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacShuffleAmplitude_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x3), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the amplitude value for the TXDAC shuffle configuration.
 *
 * @param device A pointer to the device context used for communication.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (TX1 or TX2).
 * @param value A pointer to a uint8_t variable where the retrieved amplitude
 * value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacShuffleAmplitude_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x3), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the shuffle reset state for the TXDAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which TXDAC instance to configure.
 * @param value A uint8_t value that sets the shuffle reset state, where a low
 * value resets the state.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacShuffleResetb_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0x8, 0x3);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the shuffle reset state of the TXDAC memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (either TX1 or TX2).
 * @param value A pointer to a `uint8_t` variable where the retrieved shuffle
 * reset state will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacShuffleResetb_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0x8, 0x3);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the spare control bits in the TXDAC memory map.
 *
 * @param device A pointer to the device context, used for hardware access.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (e.g., TX1 or TX2).
 * @param value A uint8_t value representing the data to be written to the spare
 * control register.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacSpareCtrl_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Register_Write(device, (instance + 0x24), (value >> 0));

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the spare control register value from the TXDAC memory map.
 *
 * @param device A pointer to the device context used for communication.
 * @param instance An enumerated value representing the specific TXDAC instance.
 * @param value A pointer to a uint8_t where the retrieved register value will
 * be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacSpareCtrl_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Register_Read(device, (instance + 0x24), &register_value);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the manual clock for the TXDAC startup sequence.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which TXDAC instance to configure.
 * @param value A uint8_t value representing the clock setting.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacStartupManclk_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1e), (value >> 0), 0x2, 0x1);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the startup manual clock status for the TXDAC.
 *
 * @param device A pointer to the device structure that represents the hardware
 * device.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (TX1 or TX2).
 * @param value A pointer to a `uint8_t` where the retrieved clock status will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacStartupManclk_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1e), &register_value, 0x2, 0x1);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the startup manual selection for the TXDAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the TXDAC instance (TX1 or
 * TX2).
 * @param value A uint8_t value indicating the manual selection state.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacStartupMansel_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x1e), (value >> 0), 0x1, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the startup state of the TXDAC's manual selection.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which TXDAC instance to access.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacStartupMansel_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1e), &register_value, 0x1, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


/***************************************************************************//**
 * @brief Retrieves the startup readiness status of the TXDAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which TXDAC instance to query.
 * @param value A pointer to a uint8_t where the result will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacStartupReady_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x1e), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the ISB control for the TXDAC, affecting performance versus power
 * tradeoff.
 *
 * @param device A pointer to the device context, used for hardware access.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (e.g., TX1 or TX2).
 * @param value A uint8_t value that sets the ISB control.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacThrowIsbCtrl_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x27), (value >> 0), 0xc, 0x2);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the control value for the ISB calibration throw setting in
 * the TXDAC memory map.
 *
 * @param device A pointer to the device context used for communication with the
 * hardware.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (e.g., TX1 or TX2).
 * @param value A pointer to a `uint8_t` where the retrieved value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacThrowIsbCtrl_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x27), &register_value, 0xc, 0x2);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the least significant bit control for the TXDAC throw
 * configuration.
 *
 * @param device A pointer to the device context, which is used for hardware
 * access.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (e.g., TX1 or TX2).
 * @param value A uint8_t value representing the control setting for the least
 * significant bit.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacThrowLsbCtrl_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x27), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the least significant bit control value for the TXDAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which TXDAC instance to access.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns the status of the read operation, indicating success or
 * failure.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacThrowLsbCtrl_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x27), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the gain for the TXDAC by writing a value to a specific field in
 * the device's memory.
 *
 * @param device A pointer to the device context, which is used to access the
 * hardware.
 * @param instance An enumerated type indicating which TXDAC instance (TX1 or
 * TX2) is being configured.
 * @param value An 8-bit unsigned integer representing the gain value to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacUseGain_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0xa), (value >> 0), 0x40, 0x6);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the gain setting from the TXDAC memory map for a specified
 * instance.
 *
 * @param device A pointer to the device context used for accessing the
 * hardware.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (e.g., TX1 or TX2).
 * @param value A pointer to a `uint8_t` where the retrieved gain value will be
 * stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacUseGain_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0xa), &register_value, 0x40, 0x6);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the Vds margin for the TXDAC current source.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which TXDAC instance to configure.
 * @param value A uint8_t value representing the desired Vds margin.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacVdsMargin_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x23), (value >> 0), 0x7, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the Vds margin value from the TXDAC memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific TXDAC instance.
 * @param value A pointer to a uint8_t where the retrieved Vds margin value will
 * be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacVdsMargin_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x23), &register_value, 0x7, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the TXDAC walk enable state for a specified instance.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerated value representing the specific TXDAC instance
 * (TX1 or TX2).
 * @param value A uint8_t value indicating the desired state for the walk enable
 * (0 or 1).
 * @return Returns an integer status code indicating the success or failure of
 * the write operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacWalkEnable_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0x80, 0x7);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the current state of the TXDAC walk enable setting.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which TXDAC instance to access.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacWalkEnable_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0x80, 0x7);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}

/***************************************************************************//**
 * @brief Sets the walking period for the MSB thermometer code in the TXDAC
 * memory map.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which TXDAC instance to configure.
 * @param value The value representing the walking period to be set.
 * @return Returns an integer status code indicating the success or failure of
 * the operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacWalkPeriod_Set(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    const uint8_t value)
{
    int32_t status = 0;

    status = adi_bf_hal_Field_Write(device, (instance + 0x0), (value >> 0), 0x3, 0x0);

    return status;
}

/***************************************************************************//**
 * @brief Retrieves the walking period value for the TXDAC.
 *
 * @param device A pointer to the device context.
 * @param instance An enumerator indicating which TXDAC instance to access.
 * @param value A pointer to a uint8_t where the retrieved value will be stored.
 * @return Returns an integer status code indicating the success or failure of
 * the read operation.
 ******************************************************************************/
static inline int32_t adrv9001_TxdacMemMap_TxdacWalkPeriod_Get(void *const device,
    adrv9001_BfTxdacMemMap_e instance,
    uint8_t *const value)
{
    int32_t status = 0;
    uint8_t register_value = 0;

    status = adi_bf_hal_Field_Read(device, (instance + 0x0), &register_value, 0x3, 0x0);
    *value = 0;
    *value = (*value << 8) | register_value;

    return status;
}


#endif // __ADRV9001_BF_TXDAC_MEM_MAP_H__